Requirement already satisfied: black in /home/ac097420_p/venv/lib/python3.10/site-packages (23.12.1)
Requirement already satisfied: isort in /home/ac097420_p/venv/lib/python3.10/site-packages (5.13.2)
Requirement already satisfied: flake8 in /home/ac097420_p/venv/lib/python3.10/site-packages (6.1.0)
Requirement already satisfied: pylint_junit in /home/ac097420_p/venv/lib/python3.10/site-packages (0.3.4)
Requirement already satisfied: typing_extensions in /home/ac097420_p/venv/lib/python3.10/site-packages (4.12.2)
Requirement already satisfied: mypy-extensions>=0.4.3 in /home/ac097420_p/venv/lib/python3.10/site-packages (from black) (1.0.0)
Requirement already satisfied: pathspec>=0.9.0 in /home/ac097420_p/venv/lib/python3.10/site-packages (from black) (0.12.1)
Requirement already satisfied: tomli>=1.1.0 in /home/ac097420_p/venv/lib/python3.10/site-packages (from black) (2.0.2)
Requirement already satisfied: packaging>=22.0 in /home/ac097420_p/venv/lib/python3.10/site-packages (from black) (24.1)
Requirement already satisfied: click>=8.0.0 in /home/ac097420_p/venv/lib/python3.10/site-packages (from black) (8.1.7)
Requirement already satisfied: platformdirs>=2 in /home/ac097420_p/venv/lib/python3.10/site-packages (from black) (4.3.6)
Requirement already satisfied: pycodestyle<2.12.0,>=2.11.0 in /home/ac097420_p/venv/lib/python3.10/site-packages (from flake8) (2.11.1)
Requirement already satisfied: pyflakes<3.2.0,>=3.1.0 in /home/ac097420_p/venv/lib/python3.10/site-packages (from flake8) (3.1.0)
Requirement already satisfied: mccabe<0.8.0,>=0.7.0 in /home/ac097420_p/venv/lib/python3.10/site-packages (from flake8) (0.7.0)
Requirement already satisfied: junit-xml-2 in /home/ac097420_p/venv/lib/python3.10/site-packages (from pylint_junit) (1.9)
Requirement already satisfied: pylint in /home/ac097420_p/venv/lib/python3.10/site-packages (from pylint_junit) (2.15.5)
Requirement already satisfied: six in /home/ac097420_p/venv/lib/python3.10/site-packages (from junit-xml-2->pylint_junit) (1.16.0)
Requirement already satisfied: tomlkit>=0.10.1 in /home/ac097420_p/venv/lib/python3.10/site-packages (from pylint->pylint_junit) (0.13.2)
Requirement already satisfied: astroid<=2.14.0-dev0,>=2.12.12 in /home/ac097420_p/venv/lib/python3.10/site-packages (from pylint->pylint_junit) (2.13.5)
Requirement already satisfied: dill>=0.2 in /home/ac097420_p/venv/lib/python3.10/site-packages (from pylint->pylint_junit) (0.3.9)
Requirement already satisfied: lazy-object-proxy>=1.4.0 in /home/ac097420_p/venv/lib/python3.10/site-packages (from astroid<=2.14.0-dev0,>=2.12.12->pylint->pylint_junit) (1.10.0)
Requirement already satisfied: wrapt<2,>=1.11 in /home/ac097420_p/venv/lib/python3.10/site-packages (from astroid<=2.14.0-dev0,>=2.12.12->pylint->pylint_junit) (1.16.0)
python3 -m isort --check-only --profile black --line-length 79  src/ tests/
python3 -m black --exclude .+\.ipynb --check --line-length 79  src/ tests/
python3 -m flake8 --show-source --statistics --max-line-length 79 --ignore=E501,W503 src/ tests/
src/ska_mid_cbf_mcs/commons/dish_utils.py:30:1: DAR101 Missing parameter(s) in Docstring: - mapping
        """
        Initialize a new instance.

        :param mapping: dict mapping the DISH ID and VCC ID.
        """
^
src/ska_mid_cbf_mcs/commons/dish_utils.py:46:10: N802 function name 'is_Valid_DISH_Id' should be lowercase
    def is_Valid_DISH_Id(self: DISHUtils, argin: str) -> tuple[bool, str]:
         ^
src/ska_mid_cbf_mcs/commons/dish_utils.py:47:1: DAR101 Missing parameter(s) in Docstring: - argin
        """
        Checks the DISH id is in range of either SKA001-SKA133 or MKT000-MKT063.
        Spaces before, after, or in the middle of the ID (e.g. "SKA 001", " SKA001",
        "SKA001 ") are not valid.

        :return: the result(bool) and message(str) as a Tuple(result, msg)
        """
^
src/ska_mid_cbf_mcs/commons/dish_utils.py:47:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Checks the DISH id is in range of either SKA001-SKA133 or MKT000-MKT063.
        Spaces before, after, or in the middle of the ID (e.g. "SKA 001", " SKA001",
        "SKA001 ") are not valid.

        :return: the result(bool) and message(str) as a Tuple(result, msg)
        """
^
src/ska_mid_cbf_mcs/commons/dish_utils.py:72:10: N802 function name 'are_Valid_DISH_Ids' should be lowercase
    def are_Valid_DISH_Ids(
         ^
src/ska_mid_cbf_mcs/commons/dish_utils.py:74:1: DAR101 Missing parameter(s) in Docstring: - dish_ids
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/commons/dish_utils.py:74:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/commons/global_enum.py:126:1: DAR101 Missing parameter(s) in Docstring: - parameter
    """
    Returns the value that is supported by MCS of the given parameter.
    The return values could be one of or a combination of:

    - Dictionary if only specific values are supported, or there are multiple
         validation parameters

    - List if there is a range of specific values that is supported

    - Tuple if there is a min value and max value supported, inclusively

    - Bool if the parameter is not supported (in that case, False), or if the parameter is not one that
        is handled by this function (in this case, False)

    :return: One of the types listed above
    :rtype: dict | list | tuple | bool
    """
^
src/ska_mid_cbf_mcs/commons/global_enum.py:126:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Returns the value that is supported by MCS of the given parameter.
    The return values could be one of or a combination of:

    - Dictionary if only specific values are supported, or there are multiple
         validation parameters

    - List if there is a range of specific values that is supported

    - Tuple if there is a min value and max value supported, inclusively

    - Bool if the parameter is not supported (in that case, False), or if the parameter is not one that
        is handled by this function (in this case, False)

    :return: One of the types listed above
    :rtype: dict | list | tuple | bool
    """
^
src/ska_mid_cbf_mcs/commons/validate_interface.py:45:1: DAR101 Missing parameter(s) in Docstring: - command_name
) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/commons/validate_interface.py:45:1: DAR101 Missing parameter(s) in Docstring: - command_object
) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/commons/validate_interface.py:45:1: DAR201 Missing "Returns" in Docstring: - return
) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/component/component_manager.py:65:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: Any,
^
src/ska_mid_cbf_mcs/component/component_manager.py:65:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: Any,
^
src/ska_mid_cbf_mcs/component/component_manager.py:65:1: DAR101 Missing parameter(s) in Docstring: - attr_archive_callback
        *args: Any,
^
src/ska_mid_cbf_mcs/component/component_manager.py:65:1: DAR101 Missing parameter(s) in Docstring: - attr_change_callback
        *args: Any,
^
src/ska_mid_cbf_mcs/component/component_manager.py:65:1: DAR101 Missing parameter(s) in Docstring: - health_state_callback
        *args: Any,
^
src/ska_mid_cbf_mcs/component/component_manager.py:65:1: DAR101 Missing parameter(s) in Docstring: - lrc_timeout
        *args: Any,
^
src/ska_mid_cbf_mcs/component/component_manager.py:65:1: DAR101 Missing parameter(s) in Docstring: - simulation_mode
        *args: Any,
^
src/ska_mid_cbf_mcs/component/component_manager.py:128:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/component/component_manager.py:128:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/component/component_manager.py:163:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/component/component_manager.py:163:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/component/component_manager.py:193:1: DAR101 Missing parameter(s) in Docstring: - command_name
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:193:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:193:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:193:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:216:1: DAR101 Missing parameter(s) in Docstring: - proxy
    ) -> None:
^
src/ska_mid_cbf_mcs/component/component_manager.py:241:1: DAR101 Missing parameter(s) in Docstring: - proxy
    ) -> None:
^
src/ska_mid_cbf_mcs/component/component_manager.py:265:1: DAR101 Missing parameter(s) in Docstring: - group_proxies
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:265:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:292:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> Any:
^
src/ska_mid_cbf_mcs/component/component_manager.py:292:1: DAR101 Missing parameter(s) in Docstring: - command_name
    ) -> Any:
^
src/ska_mid_cbf_mcs/component/component_manager.py:292:1: DAR101 Missing parameter(s) in Docstring: - proxy
    ) -> Any:
^
src/ska_mid_cbf_mcs/component/component_manager.py:292:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> Any:
^
src/ska_mid_cbf_mcs/component/component_manager.py:319:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> list[any]:
^
src/ska_mid_cbf_mcs/component/component_manager.py:319:1: DAR101 Missing parameter(s) in Docstring: - command_name
    ) -> list[any]:
^
src/ska_mid_cbf_mcs/component/component_manager.py:319:1: DAR101 Missing parameter(s) in Docstring: - max_workers
    ) -> list[any]:
^
src/ska_mid_cbf_mcs/component/component_manager.py:319:1: DAR101 Missing parameter(s) in Docstring: - proxies
    ) -> list[any]:
^
src/ska_mid_cbf_mcs/component/component_manager.py:319:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> list[any]:
^
src/ska_mid_cbf_mcs/component/component_manager.py:357:1: DAR101 Missing parameter(s) in Docstring: - attr_name
    ) -> Any:
^
src/ska_mid_cbf_mcs/component/component_manager.py:357:1: DAR101 Missing parameter(s) in Docstring: - proxy
    ) -> Any:
^
src/ska_mid_cbf_mcs/component/component_manager.py:357:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> Any:
^
src/ska_mid_cbf_mcs/component/component_manager.py:378:1: DAR101 Missing parameter(s) in Docstring: - attr_name
    ) -> list[Any]:
^
src/ska_mid_cbf_mcs/component/component_manager.py:378:1: DAR101 Missing parameter(s) in Docstring: - max_workers
    ) -> list[Any]:
^
src/ska_mid_cbf_mcs/component/component_manager.py:378:1: DAR101 Missing parameter(s) in Docstring: - proxies
    ) -> list[Any]:
^
src/ska_mid_cbf_mcs/component/component_manager.py:378:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> list[Any]:
^
src/ska_mid_cbf_mcs/component/component_manager.py:407:1: DAR101 Missing parameter(s) in Docstring: - attr_name
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:407:1: DAR101 Missing parameter(s) in Docstring: - proxy
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:407:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:407:1: DAR101 Missing parameter(s) in Docstring: - value
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:431:1: DAR101 Missing parameter(s) in Docstring: - attr_name
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:431:1: DAR101 Missing parameter(s) in Docstring: - max_workers
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:431:1: DAR101 Missing parameter(s) in Docstring: - proxies
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:431:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:431:1: DAR101 Missing parameter(s) in Docstring: - value
    ) -> bool:
^
src/ska_mid_cbf_mcs/component/component_manager.py:466:1: DAR101 Missing parameter(s) in Docstring: - health_state
    ) -> None:
^
src/ska_mid_cbf_mcs/component/component_manager.py:480:1: DAR101 Missing parameter(s) in Docstring: - health_state
    ) -> None:
^
src/ska_mid_cbf_mcs/component/component_manager.py:491:1: DAR101 Missing parameter(s) in Docstring: - event_data
    ) -> None:
^
src/ska_mid_cbf_mcs/component/component_manager.py:516:1: DAR101 Missing parameter(s) in Docstring: - event_data
    ) -> None:
^
src/ska_mid_cbf_mcs/component/component_manager.py:532:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> TaskStatus:
^
src/ska_mid_cbf_mcs/component/component_manager.py:532:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> TaskStatus:
^
src/ska_mid_cbf_mcs/component/component_manager.py:633:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return whether communication with the component is established.

        SKA Mid.CBF MCS uses the more expressive :py:attr:`communication_status`
        for this, but this is still needed as a base classes hook.

        :return: True if communication with the component is established, else False.
        """
^
src/ska_mid_cbf_mcs/component/component_manager.py:650:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return the power state of this component manager.

        :return: the power state of this component manager, if known.
        """
^
src/ska_mid_cbf_mcs/component/component_manager.py:659:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return whether this component manager is currently experiencing a fault.

        :return: True if this component manager is currently experiencing a fault, else False.
        """
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:32:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: Any,
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:32:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: Any,
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:32:1: DAR101 Missing parameter(s) in Docstring: - obs_command_running_callback
        *args: Any,
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:64:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args,
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:64:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args,
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:64:1: DAR101 Missing parameter(s) in Docstring: - command_thread
        *args,
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:64:1: DAR101 Missing parameter(s) in Docstring: - hook
        *args,
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:64:1: DAR201 Missing "Returns" in Docstring: - return
        *args,
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:80:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if ConfigureScan is allowed.

        :return: True if allowed, else False.
        """
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:103:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:103:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:103:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:103:1: DAR401 Missing exception(s) in Raises section: -r NotImplementedError
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:115:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:115:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:115:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:139:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if Scan is allowed.

        :return: True if allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:159:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:159:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:159:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:159:1: DAR401 Missing exception(s) in Raises section: -r NotImplementedError
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:171:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:171:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:171:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:191:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if EndScan is allowed.

        :return: True if allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:210:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:210:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:210:1: DAR401 Missing exception(s) in Raises section: -r NotImplementedError
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:221:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:221:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:238:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if GoToIdle is allowed.

        :return: True if allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:257:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:257:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:257:1: DAR401 Missing exception(s) in Raises section: -r NotImplementedError
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:268:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:268:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:305:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:305:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:305:1: DAR401 Missing exception(s) in Raises section: -r NotImplementedError
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:316:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:316:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:337:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if ObsReset is allowed.

        :return: True if allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:356:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:356:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:356:1: DAR401 Missing exception(s) in Raises section: -r NotImplementedError
    ) -> None:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:367:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/component/obs_component_manager.py:367:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:47:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: any,
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:47:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: any,
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:47:1: DAR101 Missing parameter(s) in Docstring: - config_path_dict
        *args: any,
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:47:1: DAR101 Missing parameter(s) in Docstring: - fqdn_dict
        *args: any,
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:47:1: DAR101 Missing parameter(s) in Docstring: - max_capabilities
        *args: any,
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:47:1: DAR101 Missing parameter(s) in Docstring: - talondx_component_manager
        *args: any,
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:167:1: DAR101 Missing parameter(s) in Docstring: - device_type
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:167:1: DAR101 Missing parameter(s) in Docstring: - fqdn
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:167:1: DAR101 Missing parameter(s) in Docstring: - proxy
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:167:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:205:1: DAR101 Missing parameter(s) in Docstring: - fqdn
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:205:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:239:1: DAR101 Missing parameter(s) in Docstring: - fqdn
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:239:1: DAR101 Missing parameter(s) in Docstring: - hw_device_type
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:239:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:239:1: DAR101 Missing parameter(s) in Docstring: - subscribe
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:272:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Initialize all device proxies.

        :return: True if the device proxies are all successfully initialized, False otherwise.
        """
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:304:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:304:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:330:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:330:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:371:1: DAR101 Missing parameter(s) in Docstring: - params
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:371:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:401:1: DAR101 Missing parameter(s) in Docstring: - init_sys_param_json
    ) -> tuple[bool, dict]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:401:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, dict]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:428:1: DAR101 Missing parameter(s) in Docstring: - params
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:428:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:469:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if the InitSysParam command is allowed

        :return: True if the InitSysParam command is allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:489:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:489:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:489:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:600:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:600:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:600:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:710:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:710:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:759:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:759:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> bool:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:828:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if the On command is allowed.

        :return: True if the On command is allowed, else False.
        """
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:850:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:850:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:937:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:937:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:959:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:959:1: DAR101 Missing parameter(s) in Docstring: - subarray
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:1018:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, list[str]]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:1018:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> tuple[bool, list[str]]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:1080:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[list[str], list[str]]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:1135:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:1135:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:1183:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if the Off command is allowed

        :return: True if the Off command is allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:1200:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:1200:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:1287:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/controller/controller_component_manager.py:1287:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/controller/controller_device.py:89:10: N802 function name 'sysParam' should be lowercase
    def sysParam(self: CbfController) -> str:
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:91:1: DAR201 Missing "Returns" in Docstring: - return
        """
        :return: the mapping from Dish ID to VCC and frequency offset k. The string is in JSON format.
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:101:10: N802 function name 'sourceSysParam' should be lowercase
    def sourceSysParam(self: CbfController) -> str:
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:103:1: DAR201 Missing "Returns" in Docstring: - return
        """
        :return: the location of the json file that contains the mapping from Dish ID to VCC
                 and frequency offset k, to be retrieved using the Telescope Model.
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:114:10: N802 function name 'dishToVcc' should be lowercase
    def dishToVcc(self: CbfController) -> list[str]:
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:116:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return dishToVcc attribute: 'dishID:vccID'
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:131:10: N802 function name 'vccToDish' should be lowercase
    def vccToDish(self: CbfController) -> list[str]:
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:133:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return dishToVcc attribute: 'vccID:dishID'
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:151:10: N802 function name 'maxCapabilities' should be lowercase
    def maxCapabilities(self: CbfController) -> list[str]:
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:153:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read maximum number of instances of each capability type, as defined in charts.
        By default, these include VCC, FSP, and Subarray.

        :return: list of maximum number of instances of each capability type
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:168:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: CbfController) -> SimulationMode:
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:170:1: DAR201 Missing "Returns" in Docstring: - return
        """
        :return: the current simulation mode
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:175:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: CbfController, value: SimulationMode) -> None:
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:177:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Set the Simulation Mode of the device.

        :param value: SimulationMode
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:194:10: N802 function name 'validateSupportedConfiguration' should be lowercase
    def validateSupportedConfiguration(self: CbfController) -> bool:
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:196:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Reads and return the value in the validateSupportedConfiguration

        :return: the value in validateSupportedConfiguration
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:204:10: N802 function name 'validateSupportedConfiguration' should be lowercase
    def validateSupportedConfiguration(
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:207:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Setting this flag to false allows the user to bypass validation that
        ensures the inputs are currently supported by the system.

        The option to bypass validation is intended for testing purposes only.
        Using unsupported configurations may result in unexpected system behaviour."

        A warning level log is created when the flag is set to False.

        :param value: Set the flag to True/False
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:251:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get maximum number of capabilities for VCC, FSP and Subarray. If property not found in db, then assign a default amount.

        :return: dictionary of maximum number of capabilities with capability type as key and max capability instances as value
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:290:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> ControllerComponentManager:
^
src/ska_mid_cbf_mcs/controller/controller_device.py:351:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            *args: any,
^
src/ska_mid_cbf_mcs/controller/controller_device.py:351:1: DAR101 Missing parameter(s) in Docstring: - *args
            *args: any,
^
src/ska_mid_cbf_mcs/controller/controller_device.py:351:1: DAR201 Missing "Returns" in Docstring: - return
            *args: any,
^
src/ska_mid_cbf_mcs/controller/controller_device.py:371:10: N802 function name 'is_On_allowed' should be lowercase
    def is_On_allowed(self: CbfController) -> bool:
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:372:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Overwrite base class's is_On_allowed method.
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:381:10: N802 function name 'On' should be lowercase
    def On(
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:385:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Turn the device on.

        :return: A tuple containing a return code and a string message indicating status.
                 The message is for information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:395:10: N802 function name 'is_Off_allowed' should be lowercase
    def is_Off_allowed(self: CbfController) -> bool:
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:396:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Overwrite baseclass's is_On_allowed method.
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:405:10: N802 function name 'Off' should be lowercase
    def Off(
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:409:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Turn the device off.

        :return: A tuple containing a return code and a string message indicating status.
                 The message is for information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:419:10: N802 function name 'is_InitSysParam_allowed' should be lowercase
    def is_InitSysParam_allowed(self: CbfController) -> bool:
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:420:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Determine if InitSysParamCommand is allowed (allowed when state is OFF).

        :return: if InitSysParamCommand is allowed
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:435:10: N802 function name 'InitSysParam' should be lowercase
    def InitSysParam(
         ^
src/ska_mid_cbf_mcs/controller/controller_device.py:439:1: DAR101 Missing parameter(s) in Docstring: - argin
        """
        This command sets the Dish ID - VCC ID mapping and k values

        :param argin: the Dish ID - VCC ID mapping and frequency offset (k) in a json string.
        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/controller/controller_device.py:439:1: DAR201 Missing "Returns" in Docstring: - return
        """
        This command sets the Dish ID - VCC ID mapping and k values

        :param argin: the Dish ID - VCC ID mapping and frequency offset (k) in a json string.
        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:43:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: any,
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:43:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: any,
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:43:1: DAR101 Missing parameter(s) in Docstring: - hw_config_path
        *args: any,
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:43:1: DAR101 Missing parameter(s) in Docstring: - talondx_config_path
        *args: any,
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:73:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:73:1: DAR101 Missing parameter(s) in Docstring: - talon_cfg
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:121:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:121:1: DAR101 Missing parameter(s) in Docstring: - talon_cfg
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:148:1: DAR101 Missing parameter(s) in Docstring: - dest
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:148:1: DAR101 Missing parameter(s) in Docstring: - src
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:148:1: DAR101 Missing parameter(s) in Docstring: - ssh_client
    ) -> None:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:163:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:163:1: DAR101 Missing parameter(s) in Docstring: - talon_cfg
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:209:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:209:1: DAR101 Missing parameter(s) in Docstring: - talon_cfg
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:241:1: DAR101 Missing parameter(s) in Docstring: - ip
                    """
                    Attempts to connect to the Talon board for the first time
                    after power-on.

                    :param ip: IP address of the board
                    :param ssh_client: SSH client to use for connection
                    """
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:241:1: DAR101 Missing parameter(s) in Docstring: - ssh_client
                    """
                    Attempts to connect to the Talon board for the first time
                    after power-on.

                    :param ip: IP address of the board
                    :param ssh_client: SSH client to use for connection
                    """
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:345:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:345:1: DAR101 Missing parameter(s) in Docstring: - talon_cfg
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:376:1: DAR101 Missing parameter(s) in Docstring: - ip
                    """
                    Attempts to connect to the Talon board for the first time
                    after power-on.

                    :param ip: IP address of the board
                    :param ssh_client: SSH client to use for connection
                    """
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:376:1: DAR101 Missing parameter(s) in Docstring: - ssh_client
                    """
                    Attempts to connect to the Talon board for the first time
                    after power-on.

                    :param ip: IP address of the board
                    :param ssh_client: SSH client to use for connection
                    """
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:418:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> str:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:418:1: DAR101 Missing parameter(s) in Docstring: - talon_cfg
    ) -> str:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:440:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:440:1: DAR101 Missing parameter(s) in Docstring: - talon_cfg
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:466:1: DAR101 Missing parameter(s) in Docstring: - ip
                    """
                    Attempts to connect to the Talon board for the first time
                    after power-on or reboot.

                    :param ip: IP address of the board
                    :param ssh_client: SSH client to use for connection
                    """
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:466:1: DAR101 Missing parameter(s) in Docstring: - ssh_client
                    """
                    Attempts to connect to the Talon board for the first time
                    after power-on or reboot.

                    :param ip: IP address of the board
                    :param ssh_client: SSH client to use for connection
                    """
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:495:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:495:1: DAR101 Missing parameter(s) in Docstring: - talon_cfg
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:556:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read in the configuration files for the Talon boards and the hardware

        :return: ResultCode.FAILED if any operations failed, else ResultCode.OK
        """
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:575:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Performs all actions to configure the Talon boards after power on. This includes: copying the device server
        binaries and FPGA bitstream to the Talon boards, starting the HPS master
        device server, and sending the configure command to each DsHpsMaster, which starts the HPS device servers.

        :return: ResultCode.FAILED if any operations failed, else ResultCode.OK
        """
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:608:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:608:1: DAR101 Missing parameter(s) in Docstring: - talon_cfg
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/controller/talondx_component_manager.py:640:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> ResultCode:
^
src/ska_mid_cbf_mcs/device/base_device.py:65:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            *args: any,
^
src/ska_mid_cbf_mcs/device/base_device.py:65:1: DAR101 Missing parameter(s) in Docstring: - *args
            *args: any,
^
src/ska_mid_cbf_mcs/device/base_device.py:65:1: DAR201 Missing "Returns" in Docstring: - return
            *args: any,
^
src/ska_mid_cbf_mcs/device/base_device.py:92:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: CbfDevice) -> SimulationMode:
         ^
src/ska_mid_cbf_mcs/device/base_device.py:94:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the Simulation Mode of the device.

        :return: Simulation Mode of the device.
        """
^
src/ska_mid_cbf_mcs/device/base_device.py:101:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: CbfDevice, value: SimulationMode) -> None:
         ^
src/ska_mid_cbf_mcs/device/base_device.py:103:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Set the simulation mode of the device.

        :param value: SimulationMode
        """
^
src/ska_mid_cbf_mcs/device/base_device.py:117:10: N802 function name 'On' should be lowercase
    def On(self: CbfDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/base_device.py:120:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Turn device on.

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        """
^
src/ska_mid_cbf_mcs/device/base_device.py:132:10: N802 function name 'Off' should be lowercase
    def Off(self: CbfDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/base_device.py:135:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Turn device off.

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        """
^
src/ska_mid_cbf_mcs/device/base_device.py:147:10: N802 function name 'Standby' should be lowercase
    def Standby(self: CbfDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/base_device.py:150:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Put the device into standby mode; currently unimplemented in Mid.CBF

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        """
^
src/ska_mid_cbf_mcs/device/base_device.py:164:10: N802 function name 'Reset' should be lowercase
    def Reset(self: CbfDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/base_device.py:167:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Reset the device; currently unimplemented in Mid.CBF

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        """
^
src/ska_mid_cbf_mcs/device/base_device.py:186:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    """
    Entry point for module.

    :param args: positional arguments
    :param kwargs: named arguments

    :return: exit code
    """
^
src/ska_mid_cbf_mcs/device/base_device.py:186:1: DAR101 Missing parameter(s) in Docstring: - *args
    """
    Entry point for module.

    :param args: positional arguments
    :param kwargs: named arguments

    :return: exit code
    """
^
src/ska_mid_cbf_mcs/device/base_device.py:186:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Entry point for module.

    :param args: positional arguments
    :param kwargs: named arguments

    :return: exit code
    """
^
src/ska_mid_cbf_mcs/device/obs_device.py:105:1: DAR101 Missing parameter(s) in Docstring: - **extra_kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/device/obs_device.py:105:1: DAR101 Missing parameter(s) in Docstring: - callback
    ) -> None:
^
src/ska_mid_cbf_mcs/device/obs_device.py:279:10: N802 function name 'deviceID' should be lowercase
    def deviceID(self: CbfObsDevice) -> int:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:281:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the device's ID.

        :return: the current DeviceID value
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:291:10: N802 function name 'scanID' should be lowercase
    def scanID(self: CbfObsDevice) -> int:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:293:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the current scan ID of the device.

        :return: the current scan_id value
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:303:10: N802 function name 'configurationID' should be lowercase
    def configurationID(self: CbfObsDevice) -> str:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:305:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the current configuration ID of the device.

        :return: the current config_id value
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:312:10: N802 function name 'lastScanConfiguration' should be lowercase
    def lastScanConfiguration(self: CbfObsDevice) -> str:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:314:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the last valid scan configuration of the device.

        :return: the current _last_scan_configuration value
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:321:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: CbfObsDevice) -> SimulationMode:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:323:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the Simulation Mode of the device.

        :return: Simulation Mode of the device.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:330:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: CbfObsDevice, value: SimulationMode) -> None:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:332:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Set the simulation mode of the device.

        :param value: SimulationMode
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:377:1: DAR101 Missing parameter(s) in Docstring: - hook
    ) -> None:
^
src/ska_mid_cbf_mcs/device/obs_device.py:377:1: DAR101 Missing parameter(s) in Docstring: - running
    ) -> None:
^
src/ska_mid_cbf_mcs/device/obs_device.py:389:1: DAR101 Missing parameter(s) in Docstring: - obs_state
        """
        Perform Tango operations in response to a change in obsState.

        This helper method is passed to the observation state model as a
        callback, so that the model can trigger actions in the Tango
        device.

        Overridden here to supply new ObsState value to component manager property

        :param obs_state: the new obs_state value
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:453:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            *args: Any,
^
src/ska_mid_cbf_mcs/device/obs_device.py:453:1: DAR101 Missing parameter(s) in Docstring: - *args
            *args: Any,
^
src/ska_mid_cbf_mcs/device/obs_device.py:453:1: DAR201 Missing "Returns" in Docstring: - return
            *args: Any,
^
src/ska_mid_cbf_mcs/device/obs_device.py:490:10: N802 function name 'ConfigureScan' should be lowercase
    def ConfigureScan(
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:494:1: DAR101 Missing parameter(s) in Docstring: - argin
        """
        Configure the observing device parameters for the current scan.

        :param argin: JSON formatted string with the scan configuration.

        :return: A tuple containing a return code and a string message
            indicating status. The message is for information purpose
            only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:494:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Configure the observing device parameters for the current scan.

        :param argin: JSON formatted string with the scan configuration.

        :return: A tuple containing a return code and a string message
            indicating status. The message is for information purpose
            only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:519:10: N802 function name 'Scan' should be lowercase
    def Scan(self: CbfObsDevice, argin: int) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:522:1: DAR101 Missing parameter(s) in Docstring: - argin
        """
        Start an observing scan.

        :param argin: Scan ID integer

        :return: A tuple containing a return code and a string message
            indicating status. The message is for information purpose
            only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:522:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Start an observing scan.

        :param argin: Scan ID integer

        :return: A tuple containing a return code and a string message
            indicating status. The message is for information purpose
            only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:542:10: N802 function name 'EndScan' should be lowercase
    def EndScan(self: CbfObsDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:545:1: DAR201 Missing "Returns" in Docstring: - return
        """
        End a running scan.

        :return: A tuple containing a return code and a string message
            indicating status. The message is for information purpose
            only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:563:10: N802 function name 'GoToIdle' should be lowercase
    def GoToIdle(self: CbfObsDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:566:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Transit the device from READY to IDLE obsState.
        To keep in line with LMC, using "GoToIdle" rather than the SKA base class
        equivalent "End".

        :return: A tuple containing a return code and a string message
            indicating status. The message is for information purpose
            only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:588:10: N802 function name 'ObsReset' should be lowercase
    def ObsReset(self: CbfObsDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:591:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Reset the observing device from a FAULT/ABORTED obsState to IDLE.

        :return: A tuple containing a return code and a string message
            indicating status. The message is for information purpose
            only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:609:10: N802 function name 'Abort' should be lowercase
    def Abort(self: CbfObsDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:612:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Abort the current observing process and move to ABORTED obsState.

        :return: A tuple containing a return code and a string message
            indicating status. The message is for information purpose
            only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:627:10: N802 function name 'On' should be lowercase
    def On(self: CbfObsDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:630:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Turn device on.

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:642:10: N802 function name 'Off' should be lowercase
    def Off(self: CbfObsDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:645:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Turn device off.

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:657:10: N802 function name 'Standby' should be lowercase
    def Standby(self: CbfObsDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:660:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Put the device into standby mode; currently unimplemented in Mid.CBF

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:674:10: N802 function name 'Reset' should be lowercase
    def Reset(self: CbfObsDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:677:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Reset the device; currently unimplemented in Mid.CBF

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:691:10: N802 function name 'End' should be lowercase
    def End(self: CbfObsDevice) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/device/obs_device.py:694:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Set obs device from READY to IDLE; currently unimplemented in Mid.CBF,
        as this is accomplished by GoToIdle.

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        """
^
src/ska_mid_cbf_mcs/device/obs_device.py:712:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    """
    Entry point for module.

    :param args: positional arguments
    :param kwargs: named arguments

    :return: exit code
    """
^
src/ska_mid_cbf_mcs/device/obs_device.py:712:1: DAR101 Missing parameter(s) in Docstring: - *args
    """
    Entry point for module.

    :param args: positional arguments
    :param kwargs: named arguments

    :return: exit code
    """
^
src/ska_mid_cbf_mcs/device/obs_device.py:712:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Entry point for module.

    :param args: positional arguments
    :param kwargs: named arguments

    :return: exit code
    """
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:36:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: any,
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:36:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: any,
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:36:1: DAR101 Missing parameter(s) in Docstring: - all_fsp_corr_subarray_fqdn
        *args: any,
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:36:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        *args: any,
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:36:1: DAR101 Missing parameter(s) in Docstring: - hps_fsp_controller_fqdn
        *args: any,
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:74:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:74:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:120:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if the SetFunctionMode command is allowed

        :return: True if the SetFunctionMode command is allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:137:1: DAR101 Missing parameter(s) in Docstring: - function_mode
    ) -> bool:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:137:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:158:1: DAR101 Missing parameter(s) in Docstring: - function_mode
    ) -> bool:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:158:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:190:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:190:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:190:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:242:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:242:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:242:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:266:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:266:1: DAR101 Missing parameter(s) in Docstring: - subarray_id
    ) -> bool:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:293:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:293:1: DAR101 Missing parameter(s) in Docstring: - subarray_id
    ) -> bool:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:342:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if the AddSubarrayMembership command is allowed

        :return: True if the AddSubarrayMembership command is allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:362:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:362:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:362:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:422:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:422:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:422:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:446:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:446:1: DAR101 Missing parameter(s) in Docstring: - subarray_id
    ) -> bool:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:494:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:515:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:515:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:515:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:584:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:584:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/fsp/fsp_component_manager.py:584:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:37:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: Any,
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:37:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: Any,
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:37:1: DAR101 Missing parameter(s) in Docstring: - hps_fsp_corr_controller_fqdn
        *args: Any,
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:86:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:86:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:86:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:121:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:128:14: N806 variable 'vccID' in function should be lowercase
        for vccID in argin:
             ^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:138:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:144:14: N806 variable 'vccID' in function should be lowercase
        for vccID in argin:
             ^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:156:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> str:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:156:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> str:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:216:1: DAR101 Missing parameter(s) in Docstring: - model
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:216:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:257:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:257:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:257:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:325:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:325:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:325:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:372:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:372:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:415:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:415:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:461:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:461:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:503:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_component_manager.py:503:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:60:10: N802 function name 'delayModel' should be lowercase
    def delayModel(self: FspCorrSubarray) -> str:
         ^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:62:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the delayModel attribute.

        :return: the delayModel attribute.
        :rtype: string
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:74:10: N802 function name 'vccIDs' should be lowercase
    def vccIDs(self: FspCorrSubarray) -> list[int]:
         ^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:76:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the vccIDs attribute; FSP deals with VCC, not DISH (receptor) IDs.

        :return: the list of assigned VCC IDs
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:88:10: N802 function name 'frequencyBand' should be lowercase
    def frequencyBand(self: FspCorrSubarray) -> tango.DevEnum:
         ^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:90:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the frequencyBand attribute.

        :return: the frequency band
        :rtype: tango.DevEnum
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:101:10: N802 function name 'frequencySliceID' should be lowercase
    def frequencySliceID(self: FspCorrSubarray) -> int:
         ^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:103:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the frequencySliceID attribute.

        :return: the frequencySliceID attribute.
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:113:10: N802 function name 'lastHpsScanConfiguration' should be lowercase
    def lastHpsScanConfiguration(self: FspCorrSubarray) -> str:
         ^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:115:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the last valid FSP scan configuration of the device sent to HPS.

        :return: the current last_hps_scan_configuration value
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:132:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            *args: any,
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:132:1: DAR101 Missing parameter(s) in Docstring: - *args
            *args: any,
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:132:1: DAR201 Missing "Returns" in Docstring: - return
            *args: any,
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:165:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> FspCorrSubarrayComponentManager:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:195:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Determine if UpdateDelayModel command is allowed.

            :return: True if command is allowed, otherwise False
            """
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:215:1: DAR101 Missing parameter(s) in Docstring: - argin
        ) -> DevVarLongStringArrayType:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:215:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> DevVarLongStringArrayType:
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:234:10: N802 function name 'UpdateDelayModel' should be lowercase
    def UpdateDelayModel(
         ^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:237:1: DAR101 Missing parameter(s) in Docstring: - argin
        """
        Update the FSP's delay model (serialized JSON object)

        :param argin: the delay model data
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_corr_subarray_device.py:237:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Update the FSP's delay model (serialized JSON object)

        :param argin: the delay model data
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:52:10: N802 function name 'functionMode' should be lowercase
    def functionMode(self: Fsp) -> tango.DevEnum:
         ^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:54:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the functionMode attribute.

        :return: a DevEnum representing the mode.
        :rtype: tango.DevEnum
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:67:10: N802 function name 'subarrayMembership' should be lowercase
    def subarrayMembership(self: Fsp) -> list[int]:
         ^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:69:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the subarrayMembership attribute.

        :return: an array of affiliations of the FSP.
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:103:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Create and return a component manager for this device.

        :return: a component manager for this device.
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:134:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            *args: Any,
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:134:1: DAR101 Missing parameter(s) in Docstring: - *args
            *args: Any,
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:134:1: DAR201 Missing "Returns" in Docstring: - return
            *args: Any,
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:164:10: N802 function name 'SetFunctionMode' should be lowercase
    def SetFunctionMode(
         ^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:167:1: DAR101 Missing parameter(s) in Docstring: - function_mode
        """
        Set the FSP function mode to either IDLE, CORR, PSS-BF, PST-BF, or VLBI.
        If IDLE, set the PSS, PST, CORR, and VLBI devices to DISABLE. Else,
        turn ON the target function_mode, and DISABLE all others.

        :param argin: one of 'IDLE','CORR','PSS-BF','PST-BF', or 'VLBI'

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: DevVarLongStringArrayType

        """
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:167:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Set the FSP function mode to either IDLE, CORR, PSS-BF, PST-BF, or VLBI.
        If IDLE, set the PSS, PST, CORR, and VLBI devices to DISABLE. Else,
        turn ON the target function_mode, and DISABLE all others.

        :param argin: one of 'IDLE','CORR','PSS-BF','PST-BF', or 'VLBI'

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: DevVarLongStringArrayType

        """
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:191:10: N802 function name 'AddSubarrayMembership' should be lowercase
    def AddSubarrayMembership(
         ^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:194:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Add a subarray to the subarrayMembership list.

        :param argin: an integer representing the subarray affiliation
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:194:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Add a subarray to the subarrayMembership list.

        :param argin: an integer representing the subarray affiliation
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:210:10: N802 function name 'RemoveSubarrayMembership' should be lowercase
    def RemoveSubarrayMembership(
         ^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:213:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Remove subarray from the subarrayMembership list.
        If subarrayMembership is empty after removing
        (no subarray is using this FSP), set function mode to empty.

        :param argin: an integer representing the subarray affiliation
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_device.py:213:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Remove subarray from the subarrayMembership list.
        If subarrayMembership is empty after removing
        (no subarray is using this FSP), set function mode to empty.

        :param argin: an integer representing the subarray affiliation
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_mode_subarray_device.py:51:10: N802 function name 'vccIDs' should be lowercase
    def vccIDs(self: FspModeSubarray) -> list[int]:
         ^
src/ska_mid_cbf_mcs/fsp/fsp_mode_subarray_device.py:53:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the vccIDs attribute; FSP deals with VCC, not DISH (receptor) IDs.

        :return: the list of assigned VCC IDs
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:33:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: Any,
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:33:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: Any,
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:33:1: DAR101 Missing parameter(s) in Docstring: - hps_fsp_pst_controller_fqdn
        *args: Any,
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:74:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Fsp ID

        :return: the fsp id
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:84:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Timing Beams

        :return: the timing beams
        :rtype: list[str]
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:94:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Timing Beam ID

        :return: list of timing beam ids
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:104:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Assigned VCC IDs

        :return: list of VCC IDs
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:114:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Output Enable

        :return: output enable
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:127:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:127:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:127:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:159:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:165:14: N806 variable 'vccID' in function should be lowercase
        for vccID in argin:
             ^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:175:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:182:14: N806 variable 'vccID' in function should be lowercase
        for vccID in argin:
             ^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:209:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:209:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:209:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:229:14: N806 variable 'timingBeam' in function should be lowercase
        for timingBeam in configuration["timing_beam"]:
             ^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:272:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:272:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:272:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:321:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:321:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:367:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:367:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:416:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:416:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:459:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_component_manager.py:459:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_device.py:71:10: N802 function name 'outputEnable' should be lowercase
    def outputEnable(self: FspPstSubarray) -> bool:
         ^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_device.py:73:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the outputEnable attribute. Used to enable/disable
        transmission of the output products.

        :return: the outputEnable attribute.
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_device.py:88:10: N802 function name 'timingBeams' should be lowercase
    def timingBeams(self: FspPstSubarray) -> list[str]:
         ^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_device.py:90:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the timingBeams attribute.  List of timing beams assigned to
        the FSP PST Subarray

        :return: list of timing beams assigned to the FSP PST Subarray
        :rtype: List[int]
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_device.py:105:10: N802 function name 'timingBeamID' should be lowercase
    def timingBeamID(self: FspPstSubarray) -> list[int]:
         ^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_device.py:107:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the list of Timing Beam IDs assigned to the FSP PST Subarray.

        :return: the timingBeamID attribute. List of ints
        :rtype: List[int]
        """
^
src/ska_mid_cbf_mcs/fsp/fsp_pst_subarray_device.py:151:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> FspPstSubarrayComponentManager:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:44:1: DAR101 Missing parameter(s) in Docstring: - communication_status_changed_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:44:1: DAR101 Missing parameter(s) in Docstring: - component_fault_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:44:1: DAR101 Missing parameter(s) in Docstring: - component_obs_fault_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:44:1: DAR101 Missing parameter(s) in Docstring: - component_power_mode_changed_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:44:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:44:1: DAR101 Missing parameter(s) in Docstring: - logger
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:44:1: DAR101 Missing parameter(s) in Docstring: - push_change_event_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:93:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Fsp ID

        :return: the fsp id
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:103:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Timing Beams

        :return: the timing beams
        :rtype: List[str]
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:113:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Timing Beam ID

        :return: list of timing beam ids
        :rtype: List[int]
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:123:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Assigned VCC IDs

        :return: list of VCC IDs
        :rtype: List[int]
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:133:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Scan ID

        :return: the scan id
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:143:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Output Enable

        :return: output enable
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:176:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:182:14: N806 variable 'vccID' in function should be lowercase
        for vccID in argin:
             ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:192:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:199:14: N806 variable 'vccID' in function should be lowercase
        for vccID in argin:
             ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:215:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:215:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:233:14: N806 variable 'timingBeam' in function should be lowercase
        for timingBeam in configuration["timing_beam"]:
             ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:245:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:245:1: DAR101 Missing parameter(s) in Docstring: - scan_id
    ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:268:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:296:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:321:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_component_manager.py:346:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:71:6: N815 variable 'outputEnable' in class scope should not be mixedCase
    outputEnable = attribute(
     ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:77:6: N815 variable 'vccIDs' in class scope should not be mixedCase
    vccIDs = attribute(
     ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:85:6: N815 variable 'timingBeams' in class scope should not be mixedCase
    timingBeams = attribute(
     ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:92:6: N815 variable 'timingBeamID' in class scope should not be mixedCase
    timingBeamID = attribute(
     ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:143:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:174:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> FspPstSubarrayComponentManager:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:203:10: N802 function name 'read_outputEnable' should be lowercase
    def read_outputEnable(self: FspPstSubarray) -> bool:
         ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:204:1: DAR201 Missing "Returns" in Docstring: - return
        # PROTECTED REGION ID(FspPstSubarray.outputEnable_read) ENABLED START #
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:215:10: N802 function name 'read_vccIDs' should be lowercase
    def read_vccIDs(self: FspPstSubarray) -> List[int]:
         ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:216:1: DAR201 Missing "Returns" in Docstring: - return
        # PROTECTED REGION ID(FspPstSubarray.vccIDs_read) ENABLED START #
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:229:1: DAR101 Missing parameter(s) in Docstring: - value
        # PROTECTED REGION ID(FspPstSubarray.receptors_write) ENABLED START #
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:239:10: N802 function name 'read_timingBeams' should be lowercase
    def read_timingBeams(self: FspPstSubarray) -> List[str]:
         ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:240:1: DAR201 Missing "Returns" in Docstring: - return
        # PROTECTED REGION ID(FspPstSubarray.timingBeams_read) ENABLED START #
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:250:10: N802 function name 'read_timingBeamID' should be lowercase
    def read_timingBeamID(self: FspPstSubarray) -> List[int]:
         ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:251:1: DAR201 Missing "Returns" in Docstring: - return
        # PROTECTED REGION ID(FspPstSubarray.timingBeamID_read) ENABLED START #
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:261:10: N802 function name 'read_scanID' should be lowercase
    def read_scanID(self: FspPstSubarray) -> int:
         ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:262:1: DAR201 Missing "Returns" in Docstring: - return
        # PROTECTED REGION ID(FspPstSubarray.scanID_read) ENABLED START #
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:272:10: N802 function name 'write_scanID' should be lowercase
    def write_scanID(self: FspPstSubarray, value: int) -> None:
         ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:273:1: DAR101 Missing parameter(s) in Docstring: - value
        # PROTECTED REGION ID(FspPstSubarray.scanID_write) ENABLED START #
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:293:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:322:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:351:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:381:1: DAR101 Missing parameter(s) in Docstring: - argin
            """
            Stateless hook for ConfigureScan() command functionality.

            :param argin: The configuration as JSON formatted string
            :type argin: str

            :return: A tuple containing a return code and a string
                message indicating status. The message is for
                information purpose only.
            :rtype: (ResultCode, str)
            :raises: ``CommandError`` if the configuration data validation fails.
            """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:381:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Stateless hook for ConfigureScan() command functionality.

            :param argin: The configuration as JSON formatted string
            :type argin: str

            :return: A tuple containing a return code and a string
                message indicating status. The message is for
                information purpose only.
            :rtype: (ResultCode, str)
            :raises: ``CommandError`` if the configuration data validation fails.
            """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:410:1: DAR101 Missing parameter(s) in Docstring: - argin
        ) -> Tuple[bool, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:410:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> Tuple[bool, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:440:10: N802 function name 'ConfigureScan' should be lowercase
    def ConfigureScan(
         ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:444:1: DAR101 Missing parameter(s) in Docstring: - argin
        """
        Configure the observing device parameters for the current scan.

        :param argin: JSON formatted string with the scan configuration.
        :type argin: 'DevString'

        :return: A tuple containing a return code and a string message indicating status.
            The message is for information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:444:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Configure the observing device parameters for the current scan.

        :param argin: JSON formatted string with the scan configuration.
        :type argin: 'DevString'

        :return: A tuple containing a return code and a string message indicating status.
            The message is for information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:480:1: DAR101 Missing parameter(s) in Docstring: - argin
        ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:480:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:513:10: N802 function name 'Scan' should be lowercase
    def Scan(self, argin):
         ^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:516:1: DAR101 Missing parameter(s) in Docstring: - argin
        """
        Start an observing scan.

        :param argin: A string with the scan ID
        :type argin: 'DevShort'

        :return: A tuple containing a return code and a string message indicating status.
            The message is for information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:516:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Start an observing scan.

        :param argin: A string with the scan ID
        :type argin: 'DevShort'

        :return: A tuple containing a return code and a string message indicating status.
            The message is for information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:536:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:565:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> Tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:590:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Stateless hook for ObsReset() command functionality.

            :return: A tuple containing a return code and a string
                message indicating status. The message is for
                information purpose only.
            :rtype: (ResultCode, str)
            """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:607:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Stateless hook for Abort() command functionality.

            :return: A tuple containing a return code and a string
                message indicating status. The message is for
                information purpose only.
            :rtype: (ResultCode, str)
            """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:625:1: DAR101 Missing parameter(s) in Docstring: - configured
        """
        Handle notification that the component has started or stopped configuring.

        This is callback hook.

        :param configured: whether this component is configured
        :type configured: bool
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:640:1: DAR101 Missing parameter(s) in Docstring: - scanning
        """
        Handle notification that the component has started or stopped scanning.

        This is a callback hook.

        :param scanning: whether this component is scanning
        :type scanning: bool
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:654:1: DAR101 Missing parameter(s) in Docstring: - faulty
        """
        Handle component fault
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:662:1: DAR101 Missing parameter(s) in Docstring: - faulty
        """
        Handle notification that the component has obsfaulted.

        This is a callback hook.
        """
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:674:1: DAR101 Missing parameter(s) in Docstring: - communication_status
    ) -> None:
^
src/ska_mid_cbf_mcs/fsp/old_pst/fsp_pst_subarray_device.py:695:1: DAR101 Missing parameter(s) in Docstring: - power_mode
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/apc_pdu_driver.py:112:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get number of outlets present in this power switch.

        :return: number of outlets
        """
^
src/ska_mid_cbf_mcs/power_switch/apc_pdu_driver.py:121:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns whether or not the power switch can be communicated with.

        :return: whether the power switch is communicating
        """
^
src/ska_mid_cbf_mcs/power_switch/apc_pdu_driver.py:140:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Query the power switch for a list of outlets and get their name
        and current state.

        :return: list of all the outlets available in this power switch,
                 or an empty list if there was an error.
        """
^
src/ska_mid_cbf_mcs/power_switch/apc_pdu_driver.py:164:1: DAR101 Missing parameter(s) in Docstring: - outlet
        """
        Get the power state of a specific outlet.

        :param outlet: outlet ID ("all" is not supported)
        :return: power state of the outlet

        :raise AssertionError: if outlet ID is out of bounds
        :raise AssertionError: if outlet power state is different than expected
        """
^
src/ska_mid_cbf_mcs/power_switch/apc_pdu_driver.py:164:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get the power state of a specific outlet.

        :param outlet: outlet ID ("all" is not supported)
        :return: power state of the outlet

        :raise AssertionError: if outlet ID is out of bounds
        :raise AssertionError: if outlet power state is different than expected
        """
^
src/ska_mid_cbf_mcs/power_switch/apc_pdu_driver.py:181:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/apc_pdu_driver.py:181:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/apc_pdu_driver.py:205:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/apc_pdu_driver.py:205:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:62:1: DAR101 Missing parameter(s) in Docstring: - ip
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:62:1: DAR101 Missing parameter(s) in Docstring: - logger
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:62:1: DAR101 Missing parameter(s) in Docstring: - login
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:62:1: DAR101 Missing parameter(s) in Docstring: - password
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:109:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get number of outlets present in this power switch.

        :return: number of outlets
        """
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:118:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns whether or not the power switch can be communicated with.

        :return: whether the power switch is communicating
        """
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:128:14: N806 variable 'cmdGen' in function should be lowercase
            cmdGen = cmdgen.CommandGenerator()
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:129:14: N806 variable 'errorIndication' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:129:14: N806 variable 'errorStatus' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:129:14: N806 variable 'errorIndex' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:129:14: N806 variable 'varBinds' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:147:1: DAR101 Missing parameter(s) in Docstring: - outlet
        """
        Get the power state of a specific outlet.

        :param outlet: outlet ID
        :return: power state of the outlet

        :raise AssertionError: if outlet ID is out of bounds
        :raise AssertionError: if outlet power state is different than expected
        """
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:147:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get the power state of a specific outlet.

        :param outlet: outlet ID
        :return: power state of the outlet

        :raise AssertionError: if outlet ID is out of bounds
        :raise AssertionError: if outlet power state is different than expected
        """
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:164:14: N806 variable 'cmdGen' in function should be lowercase
            cmdGen = cmdgen.CommandGenerator()
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:165:14: N806 variable 'errorIndication' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:165:14: N806 variable 'errorStatus' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:165:14: N806 variable 'errorIndex' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:165:14: N806 variable 'varBinds' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.getCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:198:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:198:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:215:14: N806 variable 'cmdGen' in function should be lowercase
            cmdGen = cmdgen.CommandGenerator()
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:216:14: N806 variable 'errorIndication' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.setCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:216:14: N806 variable 'errorStatus' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.setCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:216:14: N806 variable 'errorIndex' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.setCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:216:14: N806 variable 'varBinds' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.setCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:232:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:232:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:249:14: N806 variable 'cmdGen' in function should be lowercase
            cmdGen = cmdgen.CommandGenerator()
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:251:14: N806 variable 'errorIndication' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.setCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:251:14: N806 variable 'errorStatus' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.setCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:251:14: N806 variable 'errorIndex' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.setCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:251:14: N806 variable 'varBinds' in function should be lowercase
            errorIndication, errorStatus, errorIndex, varBinds = cmdGen.setCmd(
             ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:266:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Query the power switch for a list of outlets and get their name
        and current state.

        :return: list of all the outlets available in this power switch,
                 or an empty list if there was an error.
        """
^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:277:10: N806 variable 'cmdGen' in function should be lowercase
        cmdGen = cmdgen.CommandGenerator()
         ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:282:18: N806 variable 'errorIndication' in function should be lowercase
                (
                 ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:282:18: N806 variable 'errorStatus' in function should be lowercase
                (
                 ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:282:18: N806 variable 'errorIndex' in function should be lowercase
                (
                 ^
src/ska_mid_cbf_mcs/power_switch/apc_snmp_driver.py:282:18: N806 variable 'varBinds' in function should be lowercase
                (
                 ^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:49:1: DAR101 Missing parameter(s) in Docstring: - ip
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:49:1: DAR101 Missing parameter(s) in Docstring: - logger
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:49:1: DAR101 Missing parameter(s) in Docstring: - login
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:49:1: DAR101 Missing parameter(s) in Docstring: - password
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:109:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get number of outlets present in this power switch.

        :return: number of outlets
        """
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:118:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns whether or not the power switch can be communicated with.

        :return: whether the power switch is communicating
        """
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:146:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> PowerState:
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:146:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> PowerState:
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:209:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:209:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:256:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:256:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/dli_pro_switch_driver.py:302:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Query the power switch for a list of outlets and get their name
        and current state.

        :return: list of all the outlets available in this power switch,
                 or an empty list if there was an error
        """
^
src/ska_mid_cbf_mcs/power_switch/pdu_common.py:10:24: N803 argument name 'outlet_ID' should be lowercase
        self: Outlet, outlet_ID: str, outlet_name: str, power_state: PowerState
                       ^
src/ska_mid_cbf_mcs/power_switch/pdu_common.py:11:1: DAR101 Missing parameter(s) in Docstring: - outlet_ID
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/pdu_common.py:11:1: DAR101 Missing parameter(s) in Docstring: - outlet_name
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/pdu_common.py:11:1: DAR101 Missing parameter(s) in Docstring: - power_state
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:45:1: DAR101 Missing parameter(s) in Docstring: - ip
):
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:45:1: DAR101 Missing parameter(s) in Docstring: - logger
):
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:45:1: DAR101 Missing parameter(s) in Docstring: - login
):
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:45:1: DAR101 Missing parameter(s) in Docstring: - model
):
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:45:1: DAR101 Missing parameter(s) in Docstring: - password
):
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:45:1: DAR201 Missing "Returns" in Docstring: - return
):
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:97:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:97:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:97:1: DAR101 Missing parameter(s) in Docstring: - ip
        *args: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:97:1: DAR101 Missing parameter(s) in Docstring: - login
        *args: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:97:1: DAR101 Missing parameter(s) in Docstring: - model
        *args: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:97:1: DAR101 Missing parameter(s) in Docstring: - password
        *args: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:135:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get number of outlets present in this power switch.

        :return: number of outlets
        """
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:147:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns whether or not the power switch can be communicated with.

        :return: whether the power switch is communicating
        """
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:164:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:164:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:191:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:191:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:257:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> PowerState:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:257:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> PowerState:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:285:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if the TurnOnOutlet command is allowed

        :return: True if the TurnOnOutlet command is allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:300:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        **kwargs,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:300:1: DAR101 Missing parameter(s) in Docstring: - outlet
        **kwargs,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:300:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
        **kwargs,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:300:1: DAR101 Missing parameter(s) in Docstring: - task_callback
        **kwargs,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:361:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        **kwargs: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:361:1: DAR101 Missing parameter(s) in Docstring: - argin
        **kwargs: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:361:1: DAR201 Missing "Returns" in Docstring: - return
        **kwargs: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:361:1: DAR101 Missing parameter(s) in Docstring: - task_callback
        **kwargs: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:383:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if the TurnOffOutlet command is allowed

        :return: True if the TurnOffOutlet command is allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:398:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        **kwargs,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:398:1: DAR101 Missing parameter(s) in Docstring: - outlet
        **kwargs,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:398:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
        **kwargs,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:398:1: DAR101 Missing parameter(s) in Docstring: - task_callback
        **kwargs,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:459:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        **kwargs: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:459:1: DAR101 Missing parameter(s) in Docstring: - argin
        **kwargs: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:459:1: DAR201 Missing "Returns" in Docstring: - return
        **kwargs: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_component_manager.py:459:1: DAR101 Missing parameter(s) in Docstring: - task_callback
        **kwargs: any,
^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:54:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: PowerSwitch) -> SimulationMode:
         ^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:56:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the Simulation Mode of the device.

        :return: Simulation Mode of the device.
        """
^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:63:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: PowerSwitch, value: SimulationMode) -> None:
         ^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:65:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Set the simulation mode of the device.

        :param value: SimulationMode
        """
^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:74:10: N802 function name 'numOutlets' should be lowercase
    def numOutlets(self: PowerSwitch) -> int:
         ^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:76:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get the number of outlets.

        :return: number of outlets
        """
^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:83:10: N802 function name 'isCommunicating' should be lowercase
    def isCommunicating(self: PowerSwitch) -> bool:
         ^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:85:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get whether or not the power switch is communicating.

        :return: True if power switch can be contacted, False if not
        """
^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:97:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> PowerSwitchComponentManager:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:159:1: DAR101 Missing parameter(s) in Docstring: - argin
        ) -> PowerState:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:159:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> PowerState:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:180:10: N802 function name 'GetOutletPowerState' should be lowercase
    def GetOutletPowerState(self: PowerSwitch, argin: str) -> int:
         ^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:195:10: N802 function name 'TurnOnOutlet' should be lowercase
    def TurnOnOutlet(self: PowerSwitch, argin: str) -> None:
         ^
src/ska_mid_cbf_mcs/power_switch/power_switch_device.py:207:10: N802 function name 'TurnOffOutlet' should be lowercase
    def TurnOffOutlet(self: PowerSwitch, argin: str) -> None:
         ^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:34:1: DAR101 Missing parameter(s) in Docstring: - logger
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:34:1: DAR101 Missing parameter(s) in Docstring: - model
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:34:1: DAR401 Missing exception(s) in Raises section: -r AssertionError
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:57:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get number of outlets present in this power switch.

        :return: number of outlets
        """
^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:66:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns whether or not the power switch can be communicated with.

        :return: simulator always returns True
        """
^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:74:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> PowerState:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:74:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> PowerState:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:94:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:94:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:114:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:114:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/power_switch_simulator.py:133:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns a list of 8 outlets, containing their name and current state.
        The current state is always set to OFF.

        :return: list of all the outlets available in this power switch
        """
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:48:1: DAR101 Missing parameter(s) in Docstring: - ip
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:48:1: DAR101 Missing parameter(s) in Docstring: - logger
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:48:1: DAR101 Missing parameter(s) in Docstring: - login
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:48:1: DAR101 Missing parameter(s) in Docstring: - password
    ) -> None:
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:106:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get number of outlets present in this power switch.

        :return: number of outlets
        """
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:115:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns whether or not the power switch can be communicated with.

        :return: whether the power switch is communicating
        """
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:143:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> PowerState:
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:143:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> PowerState:
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:211:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:211:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:259:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:259:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/power_switch/st_switched_pro2_driver.py:307:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Query the power switch for a list of outlets and get their name
        and current state.

        :return: list of all the outlets available in this power switch,
                 or an empty list if there was an error
        """
^
src/ska_mid_cbf_mcs/release.py:23:1: DAR101 Missing parameter(s) in Docstring: - clsname
    """
    Return a formatted release info string.

    :param clsname: optional name of class to add to the info
    :type clsname: str

    :return: str
    """
^
src/ska_mid_cbf_mcs/release.py:23:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a formatted release info string.

    :param clsname: optional name of class to add to the info
    :type clsname: str

    :return: str
    """
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:52:1: DAR101 Missing parameter(s) in Docstring: - count_fsp
    ) -> None:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:52:1: DAR101 Missing parameter(s) in Docstring: - dish_ids
    ) -> None:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:52:1: DAR101 Missing parameter(s) in Docstring: - logger
    ) -> None:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:52:1: DAR101 Missing parameter(s) in Docstring: - scan_configuration
    ) -> None:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:52:1: DAR101 Missing parameter(s) in Docstring: - subarray_id
    ) -> None:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:83:1: DAR101 Missing parameter(s) in Docstring: - fsp
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:83:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:122:1: DAR101 Missing parameter(s) in Docstring: - fsp
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:122:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:157:1: DAR101 Missing parameter(s) in Docstring: - output_link_map
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:157:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:189:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:189:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:219:1: DAR101 Missing parameter(s) in Docstring: - frequency_band_offset_value
    ):
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:219:1: DAR101 Missing parameter(s) in Docstring: - frequency_offset_name
    ):
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:219:1: DAR201 Missing "Returns" in Docstring: - return
    ):
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:256:1: DAR101 Missing parameter(s) in Docstring: - band_5_tuning_array
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:256:1: DAR101 Missing parameter(s) in Docstring: - frequency_band
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:256:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:328:1: DAR101 Missing parameter(s) in Docstring: - common_configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:328:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:328:1: DAR101 Missing parameter(s) in Docstring: - fsp
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:328:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:396:1: DAR101 Missing parameter(s) in Docstring: - fsp
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:396:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:509:1: DAR101 Missing parameter(s) in Docstring: - ip
    ) -> bool:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:509:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:739:1: DAR101 Missing parameter(s) in Docstring: - fsp
    ):
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:739:1: DAR201 Missing "Returns" in Docstring: - return
    ):
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:783:1: DAR101 Missing parameter(s) in Docstring: - common_configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:783:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:783:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:847:1: DAR101 Missing parameter(s) in Docstring: - common_configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:847:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:847:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:884:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:884:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:925:1: DAR101 Missing parameter(s) in Docstring: - pss
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:925:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:947:1: DAR101 Missing parameter(s) in Docstring: - pst
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:947:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:967:1: DAR101 Missing parameter(s) in Docstring: - common_configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:967:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1023:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1023:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1138:1: DAR101 Missing parameter(s) in Docstring: - fsp_mode
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1138:1: DAR101 Missing parameter(s) in Docstring: - processing_region
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1138:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1200:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1200:1: DAR101 Missing parameter(s) in Docstring: - fsp_id_in_processing_region
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1200:1: DAR101 Missing parameter(s) in Docstring: - fsp_mode
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1200:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1200:1: DAR101 Missing parameter(s) in Docstring: - supported_function_mode_fsp_ids
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1259:1: DAR101 Missing parameter(s) in Docstring: - processing_region
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1259:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1296:1: DAR101 Missing parameter(s) in Docstring: - channel_count
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1296:1: DAR101 Missing parameter(s) in Docstring: - output_host_map
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1296:1: DAR101 Missing parameter(s) in Docstring: - output_port_map
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1296:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1296:1: DAR101 Missing parameter(s) in Docstring: - sdp_start_channel_id
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1345:1: DAR101 Missing parameter(s) in Docstring: - channel_count
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1345:1: DAR101 Missing parameter(s) in Docstring: - channel_width
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1345:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1345:1: DAR101 Missing parameter(s) in Docstring: - start_freq
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1414:1: DAR101 Missing parameter(s) in Docstring: - channel_count
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1414:1: DAR101 Missing parameter(s) in Docstring: - channel_width
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1414:1: DAR101 Missing parameter(s) in Docstring: - fsp_given
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1414:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1414:1: DAR101 Missing parameter(s) in Docstring: - start_freq
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1458:1: DAR101 Missing parameter(s) in Docstring: - processing_region
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1458:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1501:1: DAR101 Missing parameter(s) in Docstring: - channel_count
    ):
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1501:1: DAR101 Missing parameter(s) in Docstring: - fsp_mode
    ):
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1501:1: DAR101 Missing parameter(s) in Docstring: - map_pairs
    ):
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1501:1: DAR101 Missing parameter(s) in Docstring: - map_type
    ):
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1501:1: DAR201 Missing "Returns" in Docstring: - return
    ):
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1501:1: DAR101 Missing parameter(s) in Docstring: - sdp_start_channel_id
    ):
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1618:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1618:1: DAR101 Missing parameter(s) in Docstring: - function_mode
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1618:1: DAR101 Missing parameter(s) in Docstring: - function_mode_value
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1618:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1742:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1742:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1783:1: DAR101 Missing parameter(s) in Docstring: - full_configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1783:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/scan_configuration_validator/validator.py:1826:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:41:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: any,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:41:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: any,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:41:1: DAR101 Missing parameter(s) in Docstring: - link_fqdns
        *args: any,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:68:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:68:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:107:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:107:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:126:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns the configurations string used to configure the SLIM.

        :return: the SLIM configuration string
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:135:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns a list of SLIM Link FQDNs.

        :return: the SLIM links assosiated with the mesh.
        :rtype: list[str]
        """
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:148:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns a list of SLIM Link names, formatted 'tx_device_name->rx_device_name'.

        :return: the names of SLIM links assosiated with the mesh.
        :rtype: list[str]
        """
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:161:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns a list of HealthState enums describing the status of each link.

        :return: the health state of each SLIM link in the mesh.
        :rtype: list[HealthState]
        """
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:174:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns a list containing the bit-error rates for each link.

        :return: the bit-error rate (BER) of each SLIM link in the mesh.
        :rtype: list[float]
        """
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:192:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[str, str]:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:192:1: DAR101 Missing parameter(s) in Docstring: - rx_idle_error_count
    ) -> tuple[str, str]:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:192:1: DAR101 Missing parameter(s) in Docstring: - rx_idle_word_count
    ) -> tuple[str, str]:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:220:1: DAR101 Missing parameter(s) in Docstring: - counters
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:220:1: DAR101 Missing parameter(s) in Docstring: - names
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:220:1: DAR101 Missing parameter(s) in Docstring: - rx_error_rate_and_status
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:254:1: DAR101 Missing parameter(s) in Docstring: - counters
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:254:1: DAR101 Missing parameter(s) in Docstring: - debug_flags
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:254:1: DAR101 Missing parameter(s) in Docstring: - names
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:254:1: DAR101 Missing parameter(s) in Docstring: - occupancy
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:254:1: DAR101 Missing parameter(s) in Docstring: - rx_error_rate_and_status
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:329:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Examines various attributes from active SLIM Links and logs the metrics in a summary table.

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: tuple[ResultCode,str]
        """
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:400:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:400:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:400:1: DAR101 Missing parameter(s) in Docstring: - task_callback
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:443:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:443:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:548:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:548:1: DAR101 Missing parameter(s) in Docstring: - config_str
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:548:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:548:1: DAR101 Missing parameter(s) in Docstring: - task_callback
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:659:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:659:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:734:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:734:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_component_manager.py:734:1: DAR101 Missing parameter(s) in Docstring: - task_callback
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_config.py:10:1: DAR101 Missing parameter(s) in Docstring: - logger
        """
        Constructor

        :param yaml_str: the string defining the mesh links
        :param logger: the logger to use for logging
        :raise Tango exception: if the configuration is not valid yaml.
        """
^
src/ska_mid_cbf_mcs/slim/slim_config.py:10:1: DAR101 Missing parameter(s) in Docstring: - yaml_str
        """
        Constructor

        :param yaml_str: the string defining the mesh links
        :param logger: the logger to use for logging
        :raise Tango exception: if the configuration is not valid yaml.
        """
^
src/ska_mid_cbf_mcs/slim/slim_config.py:21:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns the active links defined in the yaml file.

        :return: a list of HPS tx and rx device pairs as [Tx FQDN, Rx FQDN]
        :rtype: list[list[str]]
        """
^
src/ska_mid_cbf_mcs/slim/slim_config.py:30:1: DAR101 Missing parameter(s) in Docstring: - link
        """
        Each link is in the format of "tx_fqdn -> rx_fqdn". If the
        link is disabled, then the text ends with [x].

        :param link: a string describing a singular SLIM link.

        :return: the pair of HPS tx and rx device FQDNs that make up a link.
        :rtype: list[str]
        """
^
src/ska_mid_cbf_mcs/slim/slim_config.py:30:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Each link is in the format of "tx_fqdn -> rx_fqdn". If the
        link is disabled, then the text ends with [x].

        :param link: a string describing a singular SLIM link.

        :return: the pair of HPS tx and rx device FQDNs that make up a link.
        :rtype: list[str]
        """
^
src/ska_mid_cbf_mcs/slim/slim_config.py:51:1: DAR101 Missing parameter(s) in Docstring: - links
        """
        Checks if the requested SLIM configuration is valid.

        :param links: a list of HPS tx and rx device pairs to be configured as SLIM links.
        :raise Tango exception: if SLIM configuration is not valid.
        """
^
src/ska_mid_cbf_mcs/slim/slim_config.py:70:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Parse a yaml string containing the mesh links.

        :param yaml_str: the string defining the mesh links
        :raise Tango exception: if the configuration is not valid yaml.
        :return: a list of HPS tx and rx device pairs as [Tx FQDN, Rx FQDN]
        :rtype: list[list[str]]
        """
^
src/ska_mid_cbf_mcs/slim/slim_config.py:70:1: DAR101 Missing parameter(s) in Docstring: - yaml_str
        """
        Parse a yaml string containing the mesh links.

        :param yaml_str: the string defining the mesh links
        :raise Tango exception: if the configuration is not valid yaml.
        :return: a list of HPS tx and rx device pairs as [Tx FQDN, Rx FQDN]
        :rtype: list[list[str]]
        """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:49:10: N802 function name 'meshConfiguration' should be lowercase
    def meshConfiguration(self: Slim) -> str:
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:51:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns the Mesh configuration in a YAML string. This is the string provided in Configure. Returns empty string if not already configured.

        :return: the Mesh configuration in a YAML string.
        """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:63:10: N802 function name 'linkFQDNs' should be lowercase
    def linkFQDNs(self: Slim) -> list[str]:
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:65:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns the Tango device FQDN of the active links.

        :return: a list of FQDNs.
        """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:77:10: N802 function name 'linkNames' should be lowercase
    def linkNames(self: Slim) -> list[str]:
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:79:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns the names of the active links.

        :return: a list of link names.
        """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:91:10: N802 function name 'healthSummary' should be lowercase
    def healthSummary(self: Slim) -> list[HealthState]:
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:93:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns a list with the health state of each link.

        :return: a list of health states.
        """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:105:10: N802 function name 'bitErrorRate' should be lowercase
    def bitErrorRate(self: Slim) -> list[float]:
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:107:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns the bit-error rate of each link in a list.

        :return: the bit-error rate as a list of floats.
        """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:114:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: Slim) -> SimulationMode:
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:116:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the Simulation Mode of the device.

        :return: Simulation Mode of the device.
        """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:123:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: Slim, value: SimulationMode) -> None:
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:125:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Set the simulation mode of the device.

        :param value: SimulationMode
        """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:138:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Create and return a component manager for this device.

        :return: a component manager for this device.
        :rtype: SlimComponentManager
        """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:188:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Determine if SlimTest command is allowed.

            :return: True if command is allowed, otherwise False
            """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:206:1: DAR201 Missing "Returns" in Docstring: - return
            """
            SLIM Test Command. Checks the BER and health status of the mesh's configured links.

            :return: A tuple containing a return code and a string
                message contaiing a report on the health of the Mesh or error message
                if exception is caught.
            :rtype: (ResultCode, str)
            """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:222:10: N802 function name 'SlimTest' should be lowercase
    def SlimTest(self: Slim) -> None:
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:231:10: N802 function name 'is_On_allowed' should be lowercase
    def is_On_allowed(
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:233:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/slim/slim_device.py:243:10: N802 function name 'On' should be lowercase
    def On(
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:247:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Turn on SLIM.

        :return: A tuple containing a return code and a string message indicating status.
            The message is for information purpose only.
        :rtype: DevVarLongStringArrayType
        """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:257:10: N802 function name 'is_Off_allowed' should be lowercase
    def is_Off_allowed(
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:259:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/slim/slim_device.py:269:10: N802 function name 'Off' should be lowercase
    def Off(
         ^
src/ska_mid_cbf_mcs/slim/slim_device.py:273:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Turn off SLIM.

        :return: A tuple containing a return code and a string message indicating status.
            The message is for information purpose only.
        :rtype: DevVarLongStringArrayType
        """
^
src/ska_mid_cbf_mcs/slim/slim_device.py:290:10: N802 function name 'Configure' should be lowercase
    def Configure(self: Slim, argin: str) -> None:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:37:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: any,
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:37:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: any,
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:64:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The name of the HPS tx device that the link is associated with.

        :return: the tx device name.
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:77:1: DAR101 Missing parameter(s) in Docstring: - tx_device_name
        """
        Sets the tx device name value.

        :param tx_device_name: The tx device name.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:89:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The name of the HPS rx device that the link is associated with.

        :return: the rx device name.
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:102:1: DAR101 Missing parameter(s) in Docstring: - rx_device_name
        """
        Sets the rx device name value.

        :param rx_device_name: The rx device name.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:114:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The name of the SLIM link.

        :return: the link name.
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:126:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The idle control word set in the tx device. Initially generated
        in the HPS by hashing the tx device's FQDN.

        :return: the tx idle control word.
        :raise Tango exception: if the tx device is not set.
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:147:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The last idle control word received in the datastream by the HPS rx device.

        :return: the rx idle control word.
        :raise Tango exception: if the rx device is not set.
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:167:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The bit-error rate in 66b-word-errors per second.

        :return: The bit error rate.
        :raise Tango exception: if the rx device is not set.
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:189:1: DAR201 Missing "Returns" in Docstring: - return
        """
        An array holding the debug flag values from the HPS rx device, in the order:
        [0] 66b block alignment lost
        [1] 66b block aligned
        [2] Clock data recovery lock lost
        [3] Clock data recovery locked

        Empty if rx_device_proxy is not connected or tango.DevFailed is caught when accessing rx_debug_alignment_and_lock_status

        :return: Debug Alignment and Lock Status flags of the rx HPS Device
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:223:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Retrieves and return the link occupancy of the rx device

        :return: Link Occupancy of the rx Device, defaults to -1.0 if not possible
        :raise Tango exception: if the rx device is not set.
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:249:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Retrieves and return the link occupancy of the tx device

        :return: Link Occupancy of the tx Device, defaults to -1.0 if not possible
        :raise Tango exception: if the tx device is not set.
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:278:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:278:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:292:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:292:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:307:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> list[int]:
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:387:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Determine the Tx device name for serial loopback.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:401:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:467:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:526:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:526:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:526:1: DAR101 Missing parameter(s) in Docstring: - task_callback
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:651:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:651:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_link_component_manager.py:651:1: DAR101 Missing parameter(s) in Docstring: - task_callback
        **kwargs,
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:48:10: N802 function name 'txDeviceName' should be lowercase
    def txDeviceName(self: SlimLink) -> str:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:50:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the txDeviceName of the device.

        :return: txDeviceName of the device.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:57:10: N802 function name 'txDeviceName' should be lowercase
    def txDeviceName(self: SlimLink, value: str) -> None:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:59:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Set the txDeviceName of the device.

        :param value: str
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:67:10: N802 function name 'rxDeviceName' should be lowercase
    def rxDeviceName(self: SlimLink) -> str:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:69:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the rxDeviceName of the device.

        :return: rxDeviceName of the device.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:76:10: N802 function name 'rxDeviceName' should be lowercase
    def rxDeviceName(self: SlimLink, value: str) -> None:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:78:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Set the rxDeviceName of the device.

        :param value: str
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:86:10: N802 function name 'linkName' should be lowercase
    def linkName(self: SlimLink) -> str:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:88:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the linkName of the device.

        :return: linkName of the device.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:95:10: N802 function name 'txIdleCtrlWord' should be lowercase
    def txIdleCtrlWord(self: SlimLink) -> int:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:97:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the txIdleCtrlWord of the device.

        :return: txIdleCtrlWord of the device.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:104:10: N802 function name 'rxIdleCtrlWord' should be lowercase
    def rxIdleCtrlWord(self: SlimLink) -> int:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:106:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the rxIdleCtrlWord of the device.

        :return: rxIdleCtrlWord of the device.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:113:10: N802 function name 'bitErrorRate' should be lowercase
    def bitErrorRate(self: SlimLink) -> float:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:115:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the bitErrorRate of the device.

        :return: bitErrorRate of the device.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:124:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the counters attribute.

        :return: the counters array.
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:132:10: N802 function name 'healthState' should be lowercase
    def healthState(self: SlimLink) -> HealthState:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:134:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the Health State of the device. This overrides the ska-tango-base
        implementation.

        :return: Health State of the device.
        :rtype: HealthState
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:143:10: N802 function name 'rxDebugAlignmentAndLockStatus' should be lowercase
    def rxDebugAlignmentAndLockStatus(self: SlimLink) -> list[bool]:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:145:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Alignment and lock status rollup attribute for debug

        [0]: 66b block alignment lost. Read '1' = alignment lost. Write '1' to clear.
        [1]: 66b block aligned. Read '1' = aligned. Read only.
        [2]: Clock data recovery lock lost. Read '1' = CDR lock lost. Write '1' to clear.
        [3]: Clock data recovery locked. Read '1' = CDR locked. Read only.

        :return Alignment and lock status rollup attribute of the Rx Device
        :rtype list[bool]
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:158:10: N802 function name 'rxLinkOccupancy' should be lowercase
    def rxLinkOccupancy(self: SlimLink) -> float:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:160:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the Link Occupancy of the Rx Device

        :return: The Rx Link Occupancy as a percentage (0-1)
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:168:10: N802 function name 'txLinkOccupancy' should be lowercase
    def txLinkOccupancy(self: SlimLink) -> float:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:170:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the Link Occupancy of the Tx Device

        :return: The Tx Link Occupancy as a percentage (0-1)
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:178:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: SlimLink) -> SimulationMode:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:180:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the Simulation Mode of the device.

        :return: Simulation Mode of the device.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:187:10: N802 function name 'simulationMode' should be lowercase
    def simulationMode(self: SlimLink, value: SimulationMode) -> None:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:189:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Set the simulation mode of the device.

        :param value: SimulationMode
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:202:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Create and return a component manager for this device.

        :return: a component manager for this device
        :rtype: SlimLinkComponentManager
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:275:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:295:10: N802 function name 'VerifyConnection' should be lowercase
    def VerifyConnection(self: SlimLink) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:313:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Implement ClearCounters command functionality.

            :return: A tuple containing a return code and a string
                message indicating status. The message is for
                information purpose only.
            :rtype: (ResultCode, str)
            """
^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:334:10: N802 function name 'ClearCounters' should be lowercase
    def ClearCounters(self: SlimLink) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:348:10: N802 function name 'ConnectTxRx' should be lowercase
    def ConnectTxRx(self: SlimLink) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_device.py:358:10: N802 function name 'DisconnectTxRx' should be lowercase
    def DisconnectTxRx(self: SlimLink) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:37:1: DAR101 Missing parameter(s) in Docstring: - health_state_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:37:1: DAR101 Missing parameter(s) in Docstring: - logger
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:65:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The name of the link.

        :return: the SLIM link's name.
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:75:1: DAR101 Missing parameter(s) in Docstring: - link_name
        """
        Set the link name value.

        :param link_name: The link's name.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:84:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The name of the link's tx device.

        :return: the tx device name.
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:94:1: DAR101 Missing parameter(s) in Docstring: - tx_device_name
        """
        Set the tx device name value.

        :param tx_device_name: The tx device name.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:103:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The name of the link's rx device.

        :return: the rx device name.
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:113:1: DAR101 Missing parameter(s) in Docstring: - rx_device_name
        """
        Set the rx device name value.

        :param rx_device_name: The rx device name.
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:122:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The idle control word generated by hashing the tx device's FQDN.

        :return: the tx idle control word.
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:132:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The last idle control word received in the datastream

        :return: the rx idle control word.
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:142:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The bit error rate in 66b-word-errors per second.

        :return: A passing bit error rate.
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:153:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns the Debug Alignment and Lock Status flags of the rx HPS device

        :return: Debug Alignment and Lock Status flags of the rx HPS Device
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:164:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Retrieves and return the link occupancy of the rx device

        :return: Link Occupancy of the rx Device
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:174:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Retrieves and return the link occupancy of the tx device

        :return: Link Occupancy of the tx Device
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:184:1: DAR201 Missing "Returns" in Docstring: - return
        """
        An array holding the counter values from the tx and rx devices in the order:
        [0] rx_word_count
        [1] rx_packet_count
        [2] rx_idle_word_count
        [3] rx_idle_error_count
        [4] rx_block_lost_count
        [5] rx_cdr_lost_count
        [6] tx_word_count
        [7] tx_packet_count
        [8] tx_idle_word_count

        :return: The read_counters array.
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:207:1: DAR101 Missing parameter(s) in Docstring: - health_state
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:227:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> None:
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:246:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/slim/slim_link_simulator.py:285:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:40:1: DAR101 Missing parameter(s) in Docstring: - dish_utils
    ):
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:40:1: DAR101 Missing parameter(s) in Docstring: - frequency_band
    ):
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:40:1: DAR101 Missing parameter(s) in Docstring: - function_configuration
    ):
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:40:1: DAR101 Missing parameter(s) in Docstring: - function_mode
    ):
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:40:1: DAR101 Missing parameter(s) in Docstring: - subarray_dish_ids
    ):
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:40:1: DAR101 Missing parameter(s) in Docstring: - wideband_shift
    ):
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:40:1: DAR401 Missing exception(s) in Raises section: -r ValueError
    ):
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:66:1: DAR101 Missing parameter(s) in Docstring: - processing_regions
    ) -> list[dict]:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:66:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> list[dict]:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:66:1: DAR401 Missing exception(s) in Raises section: -r ValueError
    ) -> list[dict]:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:106:1: DAR101 Missing parameter(s) in Docstring: - processing_region_config
    ) -> list[dict]:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:106:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> list[dict]:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:106:1: DAR401 Missing exception(s) in Raises section: -r ValueError
    ) -> list[dict]:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/builder.py:431:1: DAR201 Missing "Returns" in Docstring: - return
        """Builds the individual FSP configurations based on the provided
        processing region configuration and other necessary config values
        provided in the initialization of this class.

        :raises ValueError: if values in the configuration are invalid
        :return: a list of FSP configurations
        """
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:31:1: DAR101 Missing parameter(s) in Docstring: - channel_width
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:31:1: DAR101 Missing parameter(s) in Docstring: - fs
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:31:1: DAR201 Missing "Returns" in Docstring: - return
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:31:1: DAR101 Missing parameter(s) in Docstring: - target_center_freq
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:31:1: DAR101 Missing parameter(s) in Docstring: - wideband_shift
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:31:1: DAR401 Missing exception(s) in Raises section: -r ValueError
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:69:1: DAR101 Missing parameter(s) in Docstring: - fs_id
    """
    Find the nomninal center frequency slice for a given frequency slice

    :param id: coarse frequency slice id
    :return: center frequency in digitized bandwidth of the frequency slice
    """
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:69:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Find the nomninal center frequency slice for a given frequency slice

    :param id: coarse frequency slice id
    :return: center frequency in digitized bandwidth of the frequency slice
    """
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:85:1: DAR101 Missing parameter(s) in Docstring: - dish_sample_rate
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:85:1: DAR101 Missing parameter(s) in Docstring: - fs_id
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:85:1: DAR201 Missing "Returns" in Docstring: - return
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:85:1: DAR101 Missing parameter(s) in Docstring: - total_num_fs_for_band
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:99:1: DAR101 Missing parameter(s) in Docstring: - fs_infos
    """
    Calculate the sum of existing channels

    :param fs_info: Calculated frequency slice information (output of
                    calculate_fs_info function)
    :return: the sum of channels assigned to the fsps
    """
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:99:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Calculate the sum of existing channels

    :param fs_info: Calculated frequency slice information (output of
                    calculate_fs_info function)
    :return: the sum of channels assigned to the fsps
    """
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:113:1: DAR101 Missing parameter(s) in Docstring: - end
    """
    Determine the nearest end channel that will result in the number of
    channels being a multiple of the const.NUM_CHANNELS_PER_SPEAD_STREAM.

    :param start: the starting channel id
    :param end: the last channel
    :return: the new end channel that results in the channel count being a
             multiple of the const.NUM_CHANNELS_PER_SPEAD_STREAM
    """
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:113:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Determine the nearest end channel that will result in the number of
    channels being a multiple of the const.NUM_CHANNELS_PER_SPEAD_STREAM.

    :param start: the starting channel id
    :param end: the last channel
    :return: the new end channel that results in the channel count being a
             multiple of the const.NUM_CHANNELS_PER_SPEAD_STREAM
    """
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:113:1: DAR101 Missing parameter(s) in Docstring: - start
    """
    Determine the nearest end channel that will result in the number of
    channels being a multiple of the const.NUM_CHANNELS_PER_SPEAD_STREAM.

    :param start: the starting channel id
    :param end: the last channel
    :return: the new end channel that results in the channel count being a
             multiple of the const.NUM_CHANNELS_PER_SPEAD_STREAM
    """
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:133:1: DAR101 Missing parameter(s) in Docstring: - nearest
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:133:1: DAR201 Missing "Returns" in Docstring: - return
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:133:1: DAR101 Missing parameter(s) in Docstring: - value
) -> int:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:154:1: DAR101 Missing parameter(s) in Docstring: - band_name
) -> dict:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:154:1: DAR101 Missing parameter(s) in Docstring: - channel_count
) -> dict:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:154:1: DAR101 Missing parameter(s) in Docstring: - channel_width
) -> dict:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:154:1: DAR101 Missing parameter(s) in Docstring: - fsp_ids
) -> dict:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:154:1: DAR101 Missing parameter(s) in Docstring: - k_value
) -> dict:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:154:1: DAR201 Missing "Returns" in Docstring: - return
) -> dict:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:154:1: DAR101 Missing parameter(s) in Docstring: - start_freq
) -> dict:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:154:1: DAR101 Missing parameter(s) in Docstring: - wideband_shift
) -> dict:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:154:1: DAR401 Missing exception(s) in Raises section: -r ValueError
) -> dict:
^
src/ska_mid_cbf_mcs/subarray/fsp_scan_configuration_builder/fine_channel_partitioner.py:363:10: N806 variable 'fs_info_Keys' in function should be lowercase
        fs_info_Keys = list(fsp_info.keys())
         ^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:46:1: DAR101 Missing parameter(s) in Docstring: - count_fsp
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:46:1: DAR101 Missing parameter(s) in Docstring: - dish_ids
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:46:1: DAR101 Missing parameter(s) in Docstring: - logger
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:46:1: DAR101 Missing parameter(s) in Docstring: - scan_configuration
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:46:1: DAR101 Missing parameter(s) in Docstring: - subarray_id
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:72:1: DAR101 Missing parameter(s) in Docstring: - processing_region
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:72:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:113:1: DAR101 Missing parameter(s) in Docstring: - processing_region
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:113:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:147:1: DAR101 Missing parameter(s) in Docstring: - output_link_map
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:147:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:177:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:177:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:218:1: DAR101 Missing parameter(s) in Docstring: - pss
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:218:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:240:1: DAR101 Missing parameter(s) in Docstring: - pst
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:240:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:260:1: DAR101 Missing parameter(s) in Docstring: - common_configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:260:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:317:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:317:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:432:1: DAR101 Missing parameter(s) in Docstring: - fsp_mode
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:432:1: DAR101 Missing parameter(s) in Docstring: - processing_region
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:432:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:494:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:494:1: DAR101 Missing parameter(s) in Docstring: - fsp_id_in_processing_region
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:494:1: DAR101 Missing parameter(s) in Docstring: - fsp_mode
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:494:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:494:1: DAR101 Missing parameter(s) in Docstring: - supported_function_mode_fsp_ids
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:553:1: DAR101 Missing parameter(s) in Docstring: - processing_region
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:553:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:590:1: DAR101 Missing parameter(s) in Docstring: - channel_count
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:590:1: DAR101 Missing parameter(s) in Docstring: - output_host_map
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:590:1: DAR101 Missing parameter(s) in Docstring: - output_port_map
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:590:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:590:1: DAR101 Missing parameter(s) in Docstring: - sdp_start_channel_id
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:639:1: DAR101 Missing parameter(s) in Docstring: - channel_count
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:639:1: DAR101 Missing parameter(s) in Docstring: - channel_width
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:639:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:639:1: DAR101 Missing parameter(s) in Docstring: - start_freq
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:708:1: DAR101 Missing parameter(s) in Docstring: - channel_count
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:708:1: DAR101 Missing parameter(s) in Docstring: - channel_width
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:708:1: DAR101 Missing parameter(s) in Docstring: - fsp_given
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:708:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:708:1: DAR101 Missing parameter(s) in Docstring: - start_freq
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:752:1: DAR101 Missing parameter(s) in Docstring: - processing_region
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:752:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:795:1: DAR101 Missing parameter(s) in Docstring: - channel_count
    ):
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:795:1: DAR101 Missing parameter(s) in Docstring: - fsp_mode
    ):
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:795:1: DAR101 Missing parameter(s) in Docstring: - map_pairs
    ):
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:795:1: DAR101 Missing parameter(s) in Docstring: - map_type
    ):
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:795:1: DAR201 Missing "Returns" in Docstring: - return
    ):
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:795:1: DAR101 Missing parameter(s) in Docstring: - sdp_start_channel_id
    ):
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:916:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:916:1: DAR101 Missing parameter(s) in Docstring: - function_mode
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:916:1: DAR101 Missing parameter(s) in Docstring: - function_mode_value
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:916:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:1040:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:1040:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:1081:1: DAR101 Missing parameter(s) in Docstring: - full_configuration
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:1081:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[bool, str]:
^
src/ska_mid_cbf_mcs/subarray/scan_configuration_validator/validator.py:1124:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:68:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:68:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:68:1: DAR101 Missing parameter(s) in Docstring: - controller
        *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:68:1: DAR101 Missing parameter(s) in Docstring: - fsp
        *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:68:1: DAR101 Missing parameter(s) in Docstring: - fsp_corr_sub
        *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:68:1: DAR101 Missing parameter(s) in Docstring: - subarray_id
        *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:68:1: DAR101 Missing parameter(s) in Docstring: - talon_board
        *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:68:1: DAR101 Missing parameter(s) in Docstring: - vcc
        *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:68:1: DAR101 Missing parameter(s) in Docstring: - vis_slim
        *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:160:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return the list of assigned VCC IDs

        :return: list of assigned VCC IDs
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:177:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return the list of assigned FSP IDs

        :return: list of assigned VCC IDs
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:188:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Initialize proxy to controller device, read MaxCapabilities property

        :return: True if max capabilities initialization succeeded, otherwise False
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:223:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Initialize proxies to FSP and VCC subelements

        :return: True if proxy initialization succeed, otherwise False
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:261:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:261:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:292:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:292:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:292:1: DAR101 Missing parameter(s) in Docstring: - sys_param_str
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:309:1: DAR101 Missing parameter(s) in Docstring: - sys_param_str
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:332:1: DAR101 Missing parameter(s) in Docstring: - event_data
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:417:1: DAR101 Missing parameter(s) in Docstring: - event_data
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:436:1: DAR101 Missing parameter(s) in Docstring: - dish_id
    ) -> context.DeviceProxy:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:436:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> context.DeviceProxy:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:457:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if AddReceptors command is allowed in current state

        :return: True if command is allowed, otherwise False
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:476:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:476:1: DAR101 Missing parameter(s) in Docstring: - talon_proxy
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:476:1: DAR101 Missing parameter(s) in Docstring: - vcc_proxy
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:521:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:521:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:521:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:630:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:630:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:630:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:657:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if RemoveReceptors command is allowed in current state

        :return: True if command is allowed, otherwise False
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:676:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:676:1: DAR101 Missing parameter(s) in Docstring: - talon_proxy
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:676:1: DAR101 Missing parameter(s) in Docstring: - vcc_proxy
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:705:1: DAR101 Missing parameter(s) in Docstring: - dish_ids
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:705:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:771:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:771:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:771:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:820:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:820:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:820:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:845:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if RemoveAllReceptors command is allowed in current state

        :return: True if command is allowed, otherwise False
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:864:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:864:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:905:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:905:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:938:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> TaskStatus:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:938:1: DAR101 Missing parameter(s) in Docstring: - command_name
    ) -> TaskStatus:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:938:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> TaskStatus:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:938:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> TaskStatus:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:988:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:988:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1024:10: N806 variable 'controller_validateSupportedConfiguration' in function should be lowercase
        controller_validateSupportedConfiguration = (
         ^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1051:1: DAR101 Missing parameter(s) in Docstring: - dish
    ) -> dict:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1051:1: DAR101 Missing parameter(s) in Docstring: - freq_band
    ) -> dict:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1051:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> dict:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1093:1: DAR101 Missing parameter(s) in Docstring: - freq_band
    ) -> list[dict]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1093:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> list[dict]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1111:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1111:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1178:1: DAR101 Missing parameter(s) in Docstring: - common_configuration
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1178:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1178:1: DAR101 Missing parameter(s) in Docstring: - fsp_configurations
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1178:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1287:1: DAR101 Missing parameter(s) in Docstring: - common_configuration
    ) -> list[dict[any]]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1287:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> list[dict[any]]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1287:1: DAR101 Missing parameter(s) in Docstring: - pst_config
    ) -> list[dict[any]]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1287:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> list[dict[any]]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1287:1: DAR401 Missing exception(s) in Raises section: -r ValueError
    ) -> list[dict[any]]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1353:1: DAR101 Missing parameter(s) in Docstring: - common_configuration
    ) -> dict[any]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1353:1: DAR101 Missing parameter(s) in Docstring: - fsp_config
    ) -> dict[any]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1353:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> dict[any]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1402:1: DAR101 Missing parameter(s) in Docstring: - fsp_proxy
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1402:1: DAR101 Missing parameter(s) in Docstring: - function_mode
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1402:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1467:1: DAR101 Missing parameter(s) in Docstring: - common_configuration
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1467:1: DAR101 Missing parameter(s) in Docstring: - configuration
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1467:1: DAR101 Missing parameter(s) in Docstring: - fsp_configurations
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1467:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1589:1: DAR101 Missing parameter(s) in Docstring: - callback
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1589:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1589:1: DAR101 Missing parameter(s) in Docstring: - subscription_point
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1624:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Remove subarray membership and return FSP to IDLE state if possible

        :return: False if failed to release FSP device, True otherwise
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1677:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1714:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1714:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1714:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1917:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1917:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:1917:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2012:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2012:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2069:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2069:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2139:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2139:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2192:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2192:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2285:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if Restart command is allowed in current state

        :return: True if command is allowed, otherwise False
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2304:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2304:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2414:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/subarray/subarray_component_manager.py:2414:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:62:10: N802 function name 'frequencyBand' should be lowercase
    def frequencyBand(self: CbfSubarray) -> int:
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:64:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return frequency band assigned to this subarray.
        One of ["1", "2", "3", "4", "5a", "5b", ]

        :return: the frequency band
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:79:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return list of receptors assigned to subarray

        :return: the list of receptor IDs
        :rtype: list[str]
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:93:10: N802 function name 'assignedVCCs' should be lowercase
    def assignedVCCs(self: CbfSubarray) -> list[int]:
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:95:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return list of VCCs assigned to subarray

        :return: the list of VCC IDs
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:107:10: N802 function name 'assignedFSPs' should be lowercase
    def assignedFSPs(self: CbfSubarray) -> list[int]:
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:109:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return list of FSPs assigned to subarray

        :return: the list of FSP IDs
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:121:10: N802 function name 'frequencyOffsetK' should be lowercase
    def frequencyOffsetK(self: CbfSubarray) -> list[int]:
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:123:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return frequencyOffsetK attribute

        :return: array of integers reporting frequencyOffsetK of receptors in subarray
        :rtype: list[int]
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:131:10: N802 function name 'frequencyOffsetK' should be lowercase
    def frequencyOffsetK(self: CbfSubarray, value: list[int]) -> None:
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:133:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Set frequencyOffsetK attribute

        :param value: list of frequencyOffsetK values
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:145:10: N802 function name 'sysParam' should be lowercase
    def sysParam(self: CbfSubarray) -> str:
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:147:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Return the sys param string in json format

        :return: the sys param string in json format
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:155:10: N802 function name 'sysParam' should be lowercase
    def sysParam(self: CbfSubarray, value: str) -> None:
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:157:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Set the sys param string in json format
        Should not be used by components external to Mid.CBF.
        To set the system parameters, refer to the CbfController Tango Commands:
        https://developer.skao.int/projects/ska-mid-cbf-mcs/en/latest/guide/interfaces/lmc_mcs_interface.html#cbfcontroller-tango-commands or the CbfController api docs at https://developer.skao.int/projects/ska-mid-cbf-mcs/en/latest/api/CbfController/index.html

        :param value: the sys param string in json format
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:169:10: N802 function name 'lastDelayModel' should be lowercase
    def lastDelayModel(self: CbfSubarray) -> str:
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:171:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the last valid delay model received.

        :return: the current last_received_delay_model value
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:219:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns the number of resources currently assigned. Note that
        this also functions as a boolean method for whether there are
        any assigned resources: ``if len()``.

        :return: number of resources assigned
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:231:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> CbfSubarrayComponentManager:
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:268:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:268:1: DAR101 Missing parameter(s) in Docstring: - *args
            *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:268:1: DAR201 Missing "Returns" in Docstring: - return
            *args: any,
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:308:10: N802 function name 'AddReceptors' should be lowercase
    def AddReceptors(
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:312:1: DAR101 Missing parameter(s) in Docstring: - argin
        """
        Assign input receptors to this subarray.
        Set subarray to ObsState.IDLE if no receptors were previously assigned,
        i.e. subarray was previously in ObsState.EMPTY.

        :param argin: list[str] of DISH IDs to add
        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:312:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Assign input receptors to this subarray.
        Set subarray to ObsState.IDLE if no receptors were previously assigned,
        i.e. subarray was previously in ObsState.EMPTY.

        :param argin: list[str] of DISH IDs to add
        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:333:10: N802 function name 'RemoveReceptors' should be lowercase
    def RemoveReceptors(
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:337:1: DAR101 Missing parameter(s) in Docstring: - argin
        """
        Remove input from list of assigned receptors.
        Set subarray to ObsState.EMPTY if no receptors assigned.

        :param argin: list of DISH/receptor IDs to remove
        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:337:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Remove input from list of assigned receptors.
        Set subarray to ObsState.EMPTY if no receptors assigned.

        :param argin: list of DISH/receptor IDs to remove
        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:355:10: N802 function name 'RemoveAllReceptors' should be lowercase
    def RemoveAllReceptors(self: CbfSubarray) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:358:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Remove all assigned receptors.
        Set subarray to ObsState.EMPTY if no receptors assigned.

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: (ResultCode, str)
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:382:10: N802 function name 'Scan' should be lowercase
    def Scan(self: CbfSubarray, argin: str) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:385:1: DAR101 Missing parameter(s) in Docstring: - argin
        """
        Start an observing scan.
        Overrides CbfObsDevice as subarray's scan input is a JSON string

        :param argin: JSON formatted string with the scan ID.

        :return: A tuple containing a return code and a string message
            indicating status. The message is for information purpose
            only.
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:385:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Start an observing scan.
        Overrides CbfObsDevice as subarray's scan input is a JSON string

        :param argin: JSON formatted string with the scan ID.

        :return: A tuple containing a return code and a string message
            indicating status. The message is for information purpose
            only.
        """
^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:406:10: N802 function name 'Restart' should be lowercase
    def Restart(self: CbfSubarray) -> DevVarLongStringArrayType:
         ^
src/ska_mid_cbf_mcs/subarray/subarray_device.py:409:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Restart the observing device from a FAULT/ABORTED obsState to EMPTY.

        :return: A tuple containing a return code and a string message
            indicating status. The message is for information purpose
            only.
        """
^
src/ska_mid_cbf_mcs/talon_board/influxdb_query_client.py:26:1: DAR101 Missing parameter(s) in Docstring: - hostname
    ):
^
src/ska_mid_cbf_mcs/talon_board/influxdb_query_client.py:26:1: DAR101 Missing parameter(s) in Docstring: - influx_auth_token
    ):
^
src/ska_mid_cbf_mcs/talon_board/influxdb_query_client.py:26:1: DAR101 Missing parameter(s) in Docstring: - influx_bucket
    ):
^
src/ska_mid_cbf_mcs/talon_board/influxdb_query_client.py:26:1: DAR101 Missing parameter(s) in Docstring: - influx_org
    ):
^
src/ska_mid_cbf_mcs/talon_board/influxdb_query_client.py:26:1: DAR101 Missing parameter(s) in Docstring: - influx_port
    ):
^
src/ska_mid_cbf_mcs/talon_board/influxdb_query_client.py:26:1: DAR101 Missing parameter(s) in Docstring: - logger
    ):
^
src/ska_mid_cbf_mcs/talon_board/influxdb_query_client.py:49:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check readiness of the InfluxDB via the /ping endpoint

        :return: boolean value. True if ping is successful. False otherwise.
        """
^
src/ska_mid_cbf_mcs/talon_board/influxdb_query_client.py:94:1: DAR101 Missing parameter(s) in Docstring: - client
    ) -> list[tuple[str, datetime, float]]:
^
src/ska_mid_cbf_mcs/talon_board/influxdb_query_client.py:94:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> list[tuple[str, datetime, float]]:
^
src/ska_mid_cbf_mcs/talon_board/influxdb_query_client.py:182:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The main query function that asynchronously queries
        the Influxdb for all the monitored devices. The results
        are saved to in the dict self._telemetry.

        :return: 2D array of tuples of (field, time, value)
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:95:1: DAR201 Missing "Returns" in Docstring: - return
        """
        returns true if the board is receiving data at 100g ethernet input
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:110:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns a list of data counters
        [0]: number of transmitted frames between 1519 to max bytes
        [1]: number of transmitted bytes in frames with no FCS, undersized, oversized, or payload length errors
        [2]: number of received frames between 1519 to max bytes
        [3]: number of received bytes in frames with no FCS, undersized, oversized, or payload length errors
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:131:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns a list of error counters:
        [0]: number of transmitted frames less than 64 bytes
        [1]: number of transmitted oversized frames
        [2]: number of transmitted CRC errors
        [3]: number of received frames less than 64 bytes
        [4]: number of received oversized frames
        [5]: number of received CRC errors
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:152:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns the full list of Tx stats from 100g eth device's
        get_tx_stats() command.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:160:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns the full list of Rx stats from 100g eth device's
        get_rx_stats() command.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:184:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: any,
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:184:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: any,
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:184:1: DAR101 Missing parameter(s) in Docstring: - eth_100g_address
        *args: any,
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:184:1: DAR101 Missing parameter(s) in Docstring: - hostname
        *args: any,
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:184:1: DAR101 Missing parameter(s) in Docstring: - hps_master_address
        *args: any,
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:184:1: DAR101 Missing parameter(s) in Docstring: - influx_auth_token
        *args: any,
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:184:1: DAR101 Missing parameter(s) in Docstring: - influx_bucket
        *args: any,
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:184:1: DAR101 Missing parameter(s) in Docstring: - influx_org
        *args: any,
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:184:1: DAR101 Missing parameter(s) in Docstring: - influx_port
        *args: any,
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:184:1: DAR101 Missing parameter(s) in Docstring: - talon_status_address
        *args: any,
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:184:1: DAR101 Missing parameter(s) in Docstring: - talon_sysid_address
        *args: any,
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:252:1: DAR101 Missing parameter(s) in Docstring: - fqdn
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:252:1: DAR101 Missing parameter(s) in Docstring: - name
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:252:1: DAR101 Missing parameter(s) in Docstring: - quality
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:252:1: DAR101 Missing parameter(s) in Docstring: - value
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:320:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:320:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:397:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:397:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:463:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the bitstream version string"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:482:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the least 32 bits of md5 checksum of the bitstream name"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:501:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the iopll_locked_fault"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:520:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the fs_iopll_locked_fault"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:539:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the comms_iopll_locked_fault"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:558:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the system_clk_fault"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:577:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the emif_bl_fault"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:596:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the emif_br_fault"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:615:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the emif_tr_fault"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:634:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the e100g_0_pll_fault"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:653:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the e100g_1_pll_fault"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:672:1: DAR201 Missing "Returns" in Docstring: - return
        """Returns the slim_pll_fault"""
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:742:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Gets the FPGA Die Voltage [0] Sensor Value from the Talon Board

        :return: The Sensor Reading in Volts
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:759:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Gets the FPGA Die Voltage [1] Sensor Value from the Talon Board

        :return: The Sensor Reading in Volts
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:776:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Gets the FPGA Die Voltage [2] Sensor Value from the Talon Board

        :return: The Sensor Reading in Volts
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:793:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Gets the FPGA Die Voltage [3] Sensor Value from the Talon Board

        :return: The Sensor Reading in Volts
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:810:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Gets the FPGA Die Voltage [4] Sensor Value from the Talon Board

        :return: The Sensor Reading in Volts
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:827:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Gets the FPGA Die Voltage [5] Sensor Value from the Talon Board

        :return: The Sensor Reading in Volts
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:844:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Gets the FPGA Die Voltage [6] Sensor Value from the Talon Board

        :return: The Sensor Reading in Volts
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:1281:1: DAR101 Missing parameter(s) in Docstring: - field
        """
        Checks if the query result is too old. When this happens, it means
        Influxdb hasn't received a new entry in the time series recently.

        :param record: a record from Influxdb query result
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_component_manager.py:1281:1: DAR101 Missing parameter(s) in Docstring: - t
        """
        Checks if the query result is too old. When this happens, it means
        Influxdb hasn't received a new entry in the time series recently.

        :param record: a record from Influxdb query result
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:79:10: N802 function name 'subarrayID' should be lowercase
    def subarrayID(self: TalonBoard) -> str:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:81:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the subarrayID attribute.

        :return: the vcc ID
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:89:10: N802 function name 'subarrayID' should be lowercase
    def subarrayID(self: TalonBoard, value: str) -> None:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:91:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Write the subarrayID attribute.

        :param value: the vcc ID
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:104:10: N802 function name 'dishID' should be lowercase
    def dishID(self: TalonBoard) -> str:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:106:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the dishID attribute.

        :return: the Dish ID
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:114:10: N802 function name 'dishID' should be lowercase
    def dishID(self: TalonBoard, value: str) -> None:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:116:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Write the dishID attribute.

        :param value: the Dish ID
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:131:10: N802 function name 'vccID' should be lowercase
    def vccID(self: TalonBoard) -> str:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:133:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the vccID attribute.

        :return: the VCC ID
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:141:10: N802 function name 'vccID' should be lowercase
    def vccID(self: TalonBoard, value: str) -> None:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:143:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Write the vccID attribute.

        :param value: the VCC ID
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:150:10: N802 function name 'ipAddr' should be lowercase
    def ipAddr(self: TalonBoard) -> str:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:152:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The IP Address assigned to this talon board. This is a device
        property. This attribute is a workaround to expose it
        to Taranta dashboards.

        :return: the IP address
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:164:10: N802 function name 'bitstreamVersion' should be lowercase
    def bitstreamVersion(self: TalonBoard) -> str:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:166:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the FPGA bitstream version of the Talon-DX board.

        :return: the FPGA bitstream version
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:177:10: N802 function name 'bitstreamChecksum' should be lowercase
    def bitstreamChecksum(self: TalonBoard) -> int:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:179:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the least 32 bits of md5 checksum of the bitstream name

        :return: a 32 bit unique identifier for the bitstream
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:189:10: N802 function name 'iopllLockedFault' should be lowercase
    def iopllLockedFault(self: TalonBoard) -> bool:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:191:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the iopll_locked_fault status

        :return: the iopll_locked_fault status
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:201:10: N802 function name 'fsIopllLockedFault' should be lowercase
    def fsIopllLockedFault(self: TalonBoard) -> bool:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:203:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the fs_iopll_locked_fault status

        :return: the fs_iopll_locked_fault status
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:215:10: N802 function name 'commsIopllLockedFault' should be lowercase
    def commsIopllLockedFault(self: TalonBoard) -> bool:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:217:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the comms_iopll_locked_fault status

        :return: the comms_iopll_locked_fault status
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:225:10: N802 function name 'systemClkFault' should be lowercase
    def systemClkFault(self: TalonBoard) -> bool:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:227:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the system_clk_fault status

        :return: the system_clk_fault status
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:235:10: N802 function name 'emifBlFault' should be lowercase
    def emifBlFault(self: TalonBoard) -> bool:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:237:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the emif_bl_fault status

        :return: the emif_bl_fault status
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:245:10: N802 function name 'emifBrFault' should be lowercase
    def emifBrFault(self: TalonBoard) -> bool:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:247:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the emif_br_fault status

        :return: the emif_br_fault status
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:255:10: N802 function name 'emifTrFault' should be lowercase
    def emifTrFault(self: TalonBoard) -> bool:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:257:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the emif_tr_fault status

        :return: the emif_tr_fault status
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:265:10: N802 function name 'ethernet0PllFault' should be lowercase
    def ethernet0PllFault(self: TalonBoard) -> bool:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:267:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the e100g_0_pll_fault status

        :return: the e100g_0_pll_fault status
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:275:10: N802 function name 'ethernet1PllFault' should be lowercase
    def ethernet1PllFault(self: TalonBoard) -> bool:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:277:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the e100g_1_pll_fault status

        :return: the e100g_1_pll_fault status
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:285:10: N802 function name 'slimPllFault' should be lowercase
    def slimPllFault(self: TalonBoard) -> bool:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:287:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the slim_pll_fault status

        :return: the slim_pll_fault status
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:300:10: N802 function name 'fpgaDieTemperature' should be lowercase
    def fpgaDieTemperature(self: TalonBoard) -> float:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:302:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the FPGA die temperature of the Talon-DX board.

        :return: the FPGA die temperature in deg Celcius
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:329:10: N802 function name 'fpgaDieVoltage0' should be lowercase
    def fpgaDieVoltage0(self: TalonBoard) -> float:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:331:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Reads the 12V FPGA Die Voltage Sensor of the Talon-DX board in Volts (V)
        This value gets polled every 10 seconds to prevent overhead with Alarm checking

        ATTR_WARNING is trigger when the value is <= 11.2V or >= 12.8V
        ATTR_ALARM  is trigger when the value is <= 11.0V or >= 13.0V

        :return: 12V FPGA Die Voltage
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:355:10: N802 function name 'fpgaDieVoltage1' should be lowercase
    def fpgaDieVoltage1(self: TalonBoard) -> float:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:357:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Reads the 2.5V FPGA Die Voltage Sensor of the Talon-DX board in Volts (V)
        This value gets polled every 10 seconds to prevent overhead with Alarm checking

        ATTR_WARNING is trigger when the value is <= 2.404V or >= 2.596V
        ATTR_ALARM  is trigger when the value is <= 2.38V or >= 2.62V

        :return: 2.5V FPGA Die Voltage
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:381:10: N802 function name 'fpgaDieVoltage2' should be lowercase
    def fpgaDieVoltage2(self: TalonBoard) -> float:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:383:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Reads the 0.8V VCC FPGA Die Voltage Sensor of the Talon-DX board in Volts (V)
        This value gets polled every 10 seconds to prevent overhead with Alarm checking

        :return: 0.8V VCC FPGA Die Voltage
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:404:10: N802 function name 'fpgaDieVoltage3' should be lowercase
    def fpgaDieVoltage3(self: TalonBoard) -> float:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:406:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Reads the 1.8V VCCIO FPGA Die Voltage Sensor of the Talon-DX board in Volts (V)
        This value gets polled every 10 seconds to prevent overhead with Alarm checking

        :return: The FPGA Die VCCIO Voltage
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:427:10: N802 function name 'fpgaDieVoltage4' should be lowercase
    def fpgaDieVoltage4(self: TalonBoard) -> list[float]:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:429:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Reads the 1.8V VCCPT FPGA Die Voltage Sensor of the Talon-DX board in Volts (V)
        This value gets polled every 10 seconds to prevent overhead with Alarm checking

        :return: The FPGA Die VCCPT Voltage
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:450:10: N802 function name 'fpgaDieVoltage5' should be lowercase
    def fpgaDieVoltage5(self: TalonBoard) -> list[float]:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:452:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Reads the 0.9V VCCERAM FPGA Die Voltage Sensor of the Talon-DX board in Volts (V)
        This value gets polled every 10 seconds to prevent overhead with Alarm checking

        :return: The PGA Die VCCERAM Voltage
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:473:10: N802 function name 'fpgaDieVoltage6' should be lowercase
    def fpgaDieVoltage6(self: TalonBoard) -> list[float]:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:475:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Reads the 1.8V VCCADC FPGA Die Voltage Sensor of the Talon-DX board in Volts (V)
        This value gets polled every 10 seconds to prevent overhead with Alarm checking

        :return: The FPGA Die VCCADC Voltage
        :rtype: float
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:490:10: N802 function name 'humiditySensorTemperature' should be lowercase
    def humiditySensorTemperature(self: TalonBoard) -> float:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:492:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the humidity sensor temperature of the Talon-DX board.

        :return: the humidity sensor temperature in deg Celcius
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:505:10: N802 function name 'dimmTemperatures' should be lowercase
    def dimmTemperatures(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:507:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the DIMM temperatures of the Talon-DX board.

        :return: the DIMM temperatures in deg Celcius
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:520:10: N802 function name 'mboTxTemperatures' should be lowercase
    def mboTxTemperatures(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:522:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the MBO Tx temperatures of the Talon-DX board. Not all
        MBO i2c addresses can be read, in which case a 0 will be
        returned for the MBO.

        :return: the MBO Tx temperatures in deg Celcius.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:537:10: N802 function name 'mboTxVccVoltages' should be lowercase
    def mboTxVccVoltages(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:539:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the MBO Tx VCC 3.3V voltages of the Talon-DX board. Not all
        MBO i2c addresses can be read, in which case a 0 will be
        returned for the MBO.

        :return: the MBO Tx VCC voltages.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:553:10: N802 function name 'mboTxFaultStatus' should be lowercase
    def mboTxFaultStatus(self: TalonBoard) -> DevVarBooleanArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:555:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the MBO Tx fault status register of the Talon-DX board. Not all
        MBO i2c addresses can be read, in which case false will be
        returned for the MBO.

        :return: the MBO Tx Fault Status Flag.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:569:10: N802 function name 'mboTxLolStatus' should be lowercase
    def mboTxLolStatus(self: TalonBoard) -> DevVarBooleanArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:571:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the MBO Tx loss of lock status register of the Talon-DX board.
        Not all MBO i2c addresses can be read, in which case false will be
        returned for the MBO.

        :return: the MBO Tx Loss of Lock Status Flag.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:585:10: N802 function name 'mboTxLosStatus' should be lowercase
    def mboTxLosStatus(self: TalonBoard) -> DevVarBooleanArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:587:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the MBO Tx loss of signal status register of the Talon-DX board.
        Not all MBO i2c addresses can be read, in which case false will be
        returned for the MBO.

        :return: the MBO Tx Loss of Signal Status Flag.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:602:10: N802 function name 'mboRxVccVoltages' should be lowercase
    def mboRxVccVoltages(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:604:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the MBO Rx VCC 3.3V voltages of the Talon-DX board. Not all
        MBO i2c addresses can be read, in which case a 0 will be
        returned for the MBO.

        :return: the MBO Rx VCC voltages.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:618:10: N802 function name 'mboRxLolStatus' should be lowercase
    def mboRxLolStatus(self: TalonBoard) -> DevVarBooleanArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:620:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the MBO Rx loss of lock status register of the Talon-DX board.
        Not all MBO i2c addresses can be read, in which case false will be
        returned for the MBO.

        :return: the MBO Rx Loss of Lock Status Flag.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:634:10: N802 function name 'mboRxLosStatus' should be lowercase
    def mboRxLosStatus(self: TalonBoard) -> DevVarBooleanArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:636:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the MBO Rx loss of signal status register of the Talon-DX board.
        Not all MBO i2c addresses can be read, in which case false will be
        returned for the MBO.

        :return: the MBO Rx Loss of Signal Status Flag.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:649:10: N802 function name 'hasFanControl' should be lowercase
    def hasFanControl(self: TalonBoard) -> DevBoolean:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:651:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Indicates whether this board has control over the fans.
        If false, the board cannot correctly read fan speed and fault.

        return: True if the board has control over fans. False otherwise.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:664:10: N802 function name 'fansPwm' should be lowercase
    def fansPwm(self: TalonBoard) -> DevVarShortArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:666:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the PWM value of the fans. Valid values are
        0 to 255.

        :return: the PWM value of the fans
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:686:10: N802 function name 'fansPwmEnable' should be lowercase
    def fansPwmEnable(self: TalonBoard) -> DevVarShortArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:688:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the PWM value of the fans. Valid values are 0 to 2.

        :return: the PWM enable value of the fans
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:701:10: N802 function name 'fansRpm' should be lowercase
    def fansRpm(self: TalonBoard) -> DevVarShortArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:703:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the RPM values of the fans

        :return: the RPM value of the fans
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:722:10: N802 function name 'fansFault' should be lowercase
    def fansFault(self: TalonBoard) -> DevVarBooleanArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:724:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the fault status of the fans.

        :return: true if fan fault register is set
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:744:10: N802 function name 'ltmInputVoltage' should be lowercase
    def ltmInputVoltage(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:746:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the input voltage to LTMs

        :return: the input voltage to LTMs
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:759:10: N802 function name 'ltmOutputVoltage1' should be lowercase
    def ltmOutputVoltage1(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:761:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the output voltage 1 to LTMs

        :return: the output voltage 1 to LTMs
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:774:10: N802 function name 'ltmOutputVoltage2' should be lowercase
    def ltmOutputVoltage2(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:776:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the output voltage 2 to LTMs

        :return: the output voltage 2 to LTMs
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:789:10: N802 function name 'ltmInputCurrent' should be lowercase
    def ltmInputCurrent(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:791:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the input current to LTMs

        :return: the input current to LTMs
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:804:10: N802 function name 'ltmOutputCurrent1' should be lowercase
    def ltmOutputCurrent1(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:806:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the output current 1 to LTMs

        :return: the output current 1 to LTMs
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:819:10: N802 function name 'ltmOutputCurrent2' should be lowercase
    def ltmOutputCurrent2(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:821:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the output current 2 to LTMs

        :return: the output current 2 to LTMs
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:834:10: N802 function name 'ltmTemperature1' should be lowercase
    def ltmTemperature1(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:836:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the temperature 1 of LTMs

        :return: the temperature 1 of LTMs
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:849:10: N802 function name 'ltmTemperature2' should be lowercase
    def ltmTemperature2(self: TalonBoard) -> DevVarFloatArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:851:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the temperature 2 of LTMs

        :return: the temperature 2 of LTMs
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:863:10: N802 function name 'ltmVoltageWarning' should be lowercase
    def ltmVoltageWarning(self: TalonBoard) -> DevVarBooleanArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:865:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns True if any input or output voltage warning is set. One entry per LTM

        :return: True if any input or output voltage warning is set
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:877:10: N802 function name 'ltmCurrentWarning' should be lowercase
    def ltmCurrentWarning(self: TalonBoard) -> DevVarBooleanArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:879:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns True if any input or output current warning is set. One entry per LTM

        :return: True if any input or output current warning is set
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:891:10: N802 function name 'ltmTemperatureWarning' should be lowercase
    def ltmTemperatureWarning(self: TalonBoard) -> DevVarBooleanArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:893:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns True if any temperature warning is set. One entry per LTM

        :return: True if any temperature warning is set
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:912:10: N802 function name 'eth100g0Counters' should be lowercase
    def eth100g0Counters(self: TalonBoard) -> DevVarULongArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:930:10: N802 function name 'eth100g0ErrorCounters' should be lowercase
    def eth100g0ErrorCounters(self: TalonBoard) -> DevVarULongArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:938:10: N802 function name 'eth100g0DataFlowActive' should be lowercase
    def eth100g0DataFlowActive(self: TalonBoard) -> DevBoolean:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:948:10: N802 function name 'eth100g0HasDataError' should be lowercase
    def eth100g0HasDataError(self: TalonBoard) -> DevBoolean:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:957:10: N802 function name 'eth100g0AllTxCounters' should be lowercase
    def eth100g0AllTxCounters(self: TalonBoard) -> DevVarULongArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:966:10: N802 function name 'eth100g0AllRxCounters' should be lowercase
    def eth100g0AllRxCounters(self: TalonBoard) -> DevVarULongArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:982:10: N802 function name 'eth100g1Counters' should be lowercase
    def eth100g1Counters(self: TalonBoard) -> DevVarULongArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:1000:10: N802 function name 'eth100g1ErrorCounters' should be lowercase
    def eth100g1ErrorCounters(self: TalonBoard) -> DevVarULongArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:1008:10: N802 function name 'eth100g1DataFlowActive' should be lowercase
    def eth100g1DataFlowActive(self: TalonBoard) -> DevBoolean:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:1010:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns True if there is data flowing at the 100g ethernet
        output.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:1020:10: N802 function name 'eth100g1HasDataError' should be lowercase
    def eth100g1HasDataError(self: TalonBoard) -> DevBoolean:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:1022:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Returns True if any error counter is non-zero at the 100g
        ethernet input. Error counters include CRC error,
        oversized packets, and fragmented packets.
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:1034:10: N802 function name 'eth100g1AllTxCounters' should be lowercase
    def eth100g1AllTxCounters(self: TalonBoard) -> DevVarULongArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:1043:10: N802 function name 'eth100g1AllRxCounters' should be lowercase
    def eth100g1AllRxCounters(self: TalonBoard) -> DevVarULongArray:
         ^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:1052:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> TalonBoardComponentManager:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:1088:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:1088:1: DAR101 Missing parameter(s) in Docstring: - *args
        ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_device.py:1088:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:24:1: DAR101 Missing parameter(s) in Docstring: - logger
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:58:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Simulates value for fpga_die_temperature in degrees celcius

        :return : a float value representing the temperature reading from the sensor
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:67:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Simulates value for fpga_die_voltage in volts

        :return : a list of float values representing the various voltage readings from the sensor
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:76:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The bitsream version as a string.

        :return: the bitsream version.
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:86:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The bitsream checksum as a string.

        :return: the bitsream checksum.
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:96:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The iopll locked fault status.

        :return: iopll locked fault status.
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:106:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The fs iopll locked fault status.

        :return: fs iopll locked fault status.
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:116:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The comms iopll locked fault status.

        :return: comms iopll locked fault status.
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:126:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The system clock fault status.

        :return: system clock fault status.
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:136:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The emif bl fault status.

        :return: emif bl fault status.
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:146:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The emif br fault status.

        :return: emif br fault status.
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:156:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The emif tr fault status.

        :return: emif tr fault status.
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:166:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The ethernet100g_0 pll fault status.

        :return: e100g_0 pll fault status.
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:176:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The ethernet100g_1 pll fault status.

        :return: e100g_1 pll fault status.
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/talon_board/talon_board_simulator.py:186:1: DAR201 Missing "Returns" in Docstring: - return
        """
        The slim pll fault status.

        :return: slim pll fault status.
        :rtype: bool
        """
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:34:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: Any,
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:34:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: Any,
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:34:1: DAR101 Missing parameter(s) in Docstring: - pdu_cmd_timeout
        *args: Any,
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:34:1: DAR101 Missing parameter(s) in Docstring: - pdu_outlets
        *args: Any,
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:34:1: DAR101 Missing parameter(s) in Docstring: - pdus
        *args: Any,
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:34:1: DAR101 Missing parameter(s) in Docstring: - talons
        *args: Any,
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:70:1: DAR101 Missing parameter(s) in Docstring: - fqdn
    ) -> context.DeviceProxy | None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:70:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> context.DeviceProxy | None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:86:1: DAR101 Missing parameter(s) in Docstring: - pdu
    ) -> context.DeviceProxy | None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:86:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> context.DeviceProxy | None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:108:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get and initialize the 2 Power Switch proxies

        :return: True if both proxies were successfully initialized, False otherwise
        """
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:151:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:151:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:187:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:187:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:206:1: DAR101 Missing parameter(s) in Docstring: - outlet
    ) -> PowerState:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:206:1: DAR101 Missing parameter(s) in Docstring: - proxy_power_switch
    ) -> PowerState:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:206:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> PowerState:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:244:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Get the current PowerState of the TalonLRU based on the power mode of the PDUs.
        Also update the current LRU PowerState state to match.

        :return: the current TalonLRU PowerState
        """
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:278:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, ResultCode]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:278:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> tuple[ResultCode, ResultCode]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:361:1: DAR101 Missing parameter(s) in Docstring: - result1
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:361:1: DAR101 Missing parameter(s) in Docstring: - result2
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:361:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:402:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if On operation is allowed.

        :return: True if allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:415:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:415:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:444:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:444:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:466:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, ResultCode]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:466:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> tuple[ResultCode, ResultCode]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:542:1: DAR101 Missing parameter(s) in Docstring: - result1
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:542:1: DAR101 Missing parameter(s) in Docstring: - result2
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:542:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:579:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if Off operation is allowed.

        :return: True if allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:592:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:592:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:622:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_component_manager.py:622:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[ResultCode, str]:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:66:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Create and return a component manager for this device.

        :return: a component manager for this device.
        """
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:93:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            *args: Any,
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:93:1: DAR101 Missing parameter(s) in Docstring: - *args
            *args: Any,
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:93:1: DAR201 Missing "Returns" in Docstring: - return
            *args: Any,
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:114:10: N802 function name 'is_On_allowed' should be lowercase
    def is_On_allowed(
         ^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:116:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:126:10: N802 function name 'On' should be lowercase
    def On(
         ^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:130:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Turn on the Talon LRU.

        :return: A tuple containing a return code and a string message indicating status.
            The message is for information purpose only.
        :rtype: DevVarLongStringArrayType
        """
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:140:10: N802 function name 'is_Off_allowed' should be lowercase
    def is_Off_allowed(
         ^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:142:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:152:10: N802 function name 'Off' should be lowercase
    def Off(
         ^
src/ska_mid_cbf_mcs/talon_lru/talon_lru_device.py:156:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Turn off the Talon LRU.

        :return: A tuple containing a return code and a string message indicating status.
            The message is for information purpose only.
        :rtype: DevVarLongStringArrayType
        """
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:35:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: any,
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:35:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: any,
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:35:1: DAR101 Missing parameter(s) in Docstring: - logger
        *args: any,
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:57:26: N806 variable 'funcName' in function should be lowercase
                        source, funcName = record.src_funcName.split(" ", 1)
                         ^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:60:26: N806 variable 'funcName' in function should be lowercase
                        funcName = record.src_funcName
                         ^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:83:1: DAR101 Missing parameter(s) in Docstring: - message
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:83:1: DAR101 Missing parameter(s) in Docstring: - tango_device
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:83:1: DAR101 Missing parameter(s) in Docstring: - tango_log_level
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:83:1: DAR101 Missing parameter(s) in Docstring: - timestamp
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:83:1: DAR401 Missing exception(s) in Raises section: -r BaseException
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:83:1: DAR401 Missing exception(s) in Raises section: -r KeyError
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:122:1: DAR101 Missing parameter(s) in Docstring: - device_name
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:122:1: DAR101 Missing parameter(s) in Docstring: - target
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:134:1: DAR101 Missing parameter(s) in Docstring: - device_name
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_component_manager.py:134:1: DAR101 Missing parameter(s) in Docstring: - target
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:74:1: DAR201 Missing "Returns" in Docstring: - return
        """Create the component manager LogComponentManager

        :return: Instance of LogComponentManager
        :rtype: LogComponentManager
        """
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:89:1: DAR101 Missing parameter(s) in Docstring: - value
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:89:1: DAR401 Missing exception(s) in Raises section: -r LoggingLevelError
    ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:113:1: DAR101 Missing parameter(s) in Docstring: - device_name
            ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:113:1: DAR101 Missing parameter(s) in Docstring: - log_level
            ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:126:1: DAR101 Missing parameter(s) in Docstring: - record
            ) -> bool:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:126:1: DAR201 Missing "Returns" in Docstring: - return
            ) -> bool:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:186:1: DAR101 Missing parameter(s) in Docstring: - log_message
        ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:205:10: N802 function name 'Log' should be lowercase
    def Log(self, log_message: list[str]) -> None:
         ^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:207:1: DAR101 Missing parameter(s) in Docstring: - log_message
        """
        Write the log to stdout as received from TLS

        Sample log:
        ['1650964795495', 'ERROR', 'ska001/elt/master',
        'TangoUtils::DeviceAttributeToCorbaAny() - A Message',
        '', '@7f48dcc80700 [7]']

        Details of the list items here:
        https://tango-controls.readthedocs.io/projects/rfc/
        en/latest/14/Logging.html#log-consumer

        :param log_message: Parts of the TLS log message
        :type log_message: list[str]
        """
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:232:1: DAR101 Missing parameter(s) in Docstring: - device_name
        ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:245:10: N802 function name 'SetTalonDxLogConsumerTarget' should be lowercase
    def SetTalonDxLogConsumerTarget(self, device_name: str) -> None:
         ^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:247:1: DAR101 Missing parameter(s) in Docstring: - device_name
        """
        Add TalonDxLogConsumer as a logging target destination on device

        :param device_name: FQDN of target device
        """
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:264:1: DAR101 Missing parameter(s) in Docstring: - device_name
        ) -> None:
^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:277:10: N802 function name 'RemoveTalonDxLogConsumerTarget' should be lowercase
    def RemoveTalonDxLogConsumerTarget(self, device_name: str) -> None:
         ^
src/ska_mid_cbf_mcs/talondx_log_consumer/talondx_log_consumer_device.py:279:1: DAR101 Missing parameter(s) in Docstring: - device_name
        """
        Remove TalonDxLogConsumer as a logging target destination on device

        :param device_name: FQDN of target device
        """
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:102:1: DAR101 Missing parameter(s) in Docstring: - attribute_name
) -> str:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:102:1: DAR101 Missing parameter(s) in Docstring: - attribute_value
) -> str:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:102:1: DAR101 Missing parameter(s) in Docstring: - device_name
) -> str:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:102:1: DAR101 Missing parameter(s) in Docstring: - previous_value
) -> str:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:102:1: DAR201 Missing "Returns" in Docstring: - return
) -> str:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:102:1: DAR101 Missing parameter(s) in Docstring: - target_n_events
) -> str:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:137:1: DAR101 Missing parameter(s) in Docstring: - assertpy_context
    """Add a timeout to an event-based assertion function.

    :py:class:`~ska_tango_testing.integration.TangoEventTracer`
    allows to query events within a timeout. In other words, you can
    make assertions about events that will occur in the future within
    a certain time frame and "await" for them (if they didn't occur yet).
    This method when called inside an assertion context permits
    you to specify that timeout.

    **NOTE**: this assertion always passes, its only purpose is to
    set the timeout for the following assertions.

    Usage example:

    .. code-block:: python

        # (given a subscribed tracer)

        # non-blocking long operation that triggers an event at the end
        sut.long_operation_that_triggers_an_event()

        # Check that the operation is done within 30 seconds
        assert_that(tracer).within_timeout(30).has_change_event_occurred(
            attribute_name="operation_state",
            attribute_value="DONE",
        )

    **NOTE**: Using a (small) timeout is a good practice even in not so long
    operations, because it makes the test more robust and less prone to
    flakiness and false positives.

    .. code-block:: python

        # (given a subscribed tracer)

        # non-blocking long operation that triggers an event at the end
        sut.quick_operation()

        # Check that the operation is done within 5 seconds
        assert_that(tracer).within_timeout(5).has_change_event_occurred(
            attribute_name="operation_state",
            attribute_value="DONE",
        )

    :param assertpy_context: The `assertpy` context object
        (It is passed automatically)
    :param timeout: The time in seconds to wait for the event to occur.

    :return: The decorated assertion context.

    :raises ValueError: If the
        :py:class:`~ska_tango_testing.integration.TangoEventTracer`
        instance is not found (i.e., the method is called outside
        an ``assert_that(tracer)`` context).
    """  # noqa: DAR402
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:137:1: DAR201 Missing "Returns" in Docstring: - return
    """Add a timeout to an event-based assertion function.

    :py:class:`~ska_tango_testing.integration.TangoEventTracer`
    allows to query events within a timeout. In other words, you can
    make assertions about events that will occur in the future within
    a certain time frame and "await" for them (if they didn't occur yet).
    This method when called inside an assertion context permits
    you to specify that timeout.

    **NOTE**: this assertion always passes, its only purpose is to
    set the timeout for the following assertions.

    Usage example:

    .. code-block:: python

        # (given a subscribed tracer)

        # non-blocking long operation that triggers an event at the end
        sut.long_operation_that_triggers_an_event()

        # Check that the operation is done within 30 seconds
        assert_that(tracer).within_timeout(30).has_change_event_occurred(
            attribute_name="operation_state",
            attribute_value="DONE",
        )

    **NOTE**: Using a (small) timeout is a good practice even in not so long
    operations, because it makes the test more robust and less prone to
    flakiness and false positives.

    .. code-block:: python

        # (given a subscribed tracer)

        # non-blocking long operation that triggers an event at the end
        sut.quick_operation()

        # Check that the operation is done within 5 seconds
        assert_that(tracer).within_timeout(5).has_change_event_occurred(
            attribute_name="operation_state",
            attribute_value="DONE",
        )

    :param assertpy_context: The `assertpy` context object
        (It is passed automatically)
    :param timeout: The time in seconds to wait for the event to occur.

    :return: The decorated assertion context.

    :raises ValueError: If the
        :py:class:`~ska_tango_testing.integration.TangoEventTracer`
        instance is not found (i.e., the method is called outside
        an ``assert_that(tracer)`` context).
    """  # noqa: DAR402
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:137:1: DAR101 Missing parameter(s) in Docstring: - timeout
    """Add a timeout to an event-based assertion function.

    :py:class:`~ska_tango_testing.integration.TangoEventTracer`
    allows to query events within a timeout. In other words, you can
    make assertions about events that will occur in the future within
    a certain time frame and "await" for them (if they didn't occur yet).
    This method when called inside an assertion context permits
    you to specify that timeout.

    **NOTE**: this assertion always passes, its only purpose is to
    set the timeout for the following assertions.

    Usage example:

    .. code-block:: python

        # (given a subscribed tracer)

        # non-blocking long operation that triggers an event at the end
        sut.long_operation_that_triggers_an_event()

        # Check that the operation is done within 30 seconds
        assert_that(tracer).within_timeout(30).has_change_event_occurred(
            attribute_name="operation_state",
            attribute_value="DONE",
        )

    **NOTE**: Using a (small) timeout is a good practice even in not so long
    operations, because it makes the test more robust and less prone to
    flakiness and false positives.

    .. code-block:: python

        # (given a subscribed tracer)

        # non-blocking long operation that triggers an event at the end
        sut.quick_operation()

        # Check that the operation is done within 5 seconds
        assert_that(tracer).within_timeout(5).has_change_event_occurred(
            attribute_name="operation_state",
            attribute_value="DONE",
        )

    :param assertpy_context: The `assertpy` context object
        (It is passed automatically)
    :param timeout: The time in seconds to wait for the event to occur.

    :return: The decorated assertion context.

    :raises ValueError: If the
        :py:class:`~ska_tango_testing.integration.TangoEventTracer`
        instance is not found (i.e., the method is called outside
        an ``assert_that(tracer)`` context).
    """  # noqa: DAR402
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:208:1: DAR101 Missing parameter(s) in Docstring: - assertpy_context
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:208:1: DAR101 Missing parameter(s) in Docstring: - attribute_name
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:208:1: DAR101 Missing parameter(s) in Docstring: - attribute_value
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:208:1: DAR101 Missing parameter(s) in Docstring: - device_name
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:208:1: DAR101 Missing parameter(s) in Docstring: - previous_value
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:208:1: DAR201 Missing "Returns" in Docstring: - return
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:208:1: DAR101 Missing parameter(s) in Docstring: - target_n_events
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:332:1: DAR101 Missing parameter(s) in Docstring: - assertpy_context
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:332:1: DAR101 Missing parameter(s) in Docstring: - attribute_name
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:332:1: DAR101 Missing parameter(s) in Docstring: - attribute_value
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:332:1: DAR101 Missing parameter(s) in Docstring: - device_name
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:332:1: DAR101 Missing parameter(s) in Docstring: - previous_value
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:332:1: DAR201 Missing "Returns" in Docstring: - return
) -> Any:
^
src/ska_mid_cbf_mcs/testing/cbf_assertions.py:332:1: DAR101 Missing parameter(s) in Docstring: - target_n_events
) -> Any:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:71:1: DAR101 Missing parameter(s) in Docstring: - called_timeout
    ):
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:71:1: DAR101 Missing parameter(s) in Docstring: - not_called_timeout
    ):
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:71:1: DAR101 Missing parameter(s) in Docstring: - return_value
    ):
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:95:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        """
        Handle a callback call.

        Create a standard mock, call it, and put it on the queue. (This
        approach lets us take advantange of the mock's assertion
        functionality later.)

        :param args: positional args in the call
        :param kwargs: keyword args in the call

        :return: the object's return calue
        """
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:95:1: DAR101 Missing parameter(s) in Docstring: - *args
        """
        Handle a callback call.

        Create a standard mock, call it, and put it on the queue. (This
        approach lets us take advantange of the mock's assertion
        functionality later.)

        :param args: positional args in the call
        :param kwargs: keyword args in the call

        :return: the object's return calue
        """
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:95:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Handle a callback call.

        Create a standard mock, call it, and put it on the queue. (This
        approach lets us take advantange of the mock's assertion
        functionality later.)

        :param args: positional args in the call
        :param kwargs: keyword args in the call

        :return: the object's return calue
        """
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:114:1: DAR101 Missing parameter(s) in Docstring: - timeout
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:136:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:136:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:136:1: DAR401 Missing exception(s) in Raises section: -r AssertionError
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:156:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> Tuple[Sequence[Any], Sequence[Any]]:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:156:1: DAR401 Missing exception(s) in Raises section: -r AssertionError
    ) -> Tuple[Sequence[Any], Sequence[Any]]:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:187:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:187:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:187:1: DAR401 Missing exception(s) in Raises section: -r AssertionError
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:232:1: DAR101 Missing parameter(s) in Docstring: - called_timeout
    ):
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:232:1: DAR101 Missing parameter(s) in Docstring: - event_name
    ):
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:232:1: DAR101 Missing parameter(s) in Docstring: - not_called_timeout
    ):
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:258:1: DAR101 Missing parameter(s) in Docstring: - quality
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:258:1: DAR101 Missing parameter(s) in Docstring: - value
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:287:1: DAR101 Missing parameter(s) in Docstring: - quality
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:287:1: DAR101 Missing parameter(s) in Docstring: - value
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_callable.py:287:1: DAR401 Missing exception(s) in Raises section: -r AssertionError
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_dependency.py:28:14: N806 variable 'errorIndication' in function should be lowercase
            errorIndication = None
             ^
src/ska_mid_cbf_mcs/testing/mock/mock_dependency.py:29:14: N806 variable 'errorStatus' in function should be lowercase
            errorStatus = None
             ^
src/ska_mid_cbf_mcs/testing/mock/mock_dependency.py:30:14: N806 variable 'errorIndex' in function should be lowercase
            errorIndex = None
             ^
src/ska_mid_cbf_mcs/testing/mock/mock_dependency.py:32:14: N806 variable 'varBinds' in function should be lowercase
            varBinds = [(1, state)]
             ^
src/ska_mid_cbf_mcs/testing/mock/mock_dependency.py:44:1: DAR101 Missing parameter(s) in Docstring: - sim_state
        ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_dependency.py:44:1: DAR101 Missing parameter(s) in Docstring: - simulate_response_error
        ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_dependency.py:44:1: DAR101 Missing parameter(s) in Docstring: - url
        ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_dependency.py:89:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Replace the patched :py:meth:`request.Response.json` with mock.

            This implementation always returns the same key-value pairs.

            :return: representative JSON reponse as the power switch when
                        querying the outlets page
            """
^
src/ska_mid_cbf_mcs/testing/mock/mock_dependency.py:117:1: DAR101 Missing parameter(s) in Docstring: - sim_ping_fault
        ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:33:1: DAR101 Missing parameter(s) in Docstring: - from_factory
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:47:1: DAR101 Missing parameter(s) in Docstring: - name
        """
        Tell this builder to build mocks with a given attribute.

        TODO: distinguish between read-only and read-write attributes

        :param name: name of the attribute
        :param value: the value of the attribute
        """
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:47:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Tell this builder to build mocks with a given attribute.

        TODO: distinguish between read-only and read-write attributes

        :param name: name of the attribute
        :param value: the value of the attribute
        """
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:58:1: DAR101 Missing parameter(s) in Docstring: - name
        """
        Tell this builder to build mocks with a given device property.

        :param name: name of the device property
        :param value: the value of the device property
        """
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:58:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Tell this builder to build mocks with a given device property.

        :param name: name of the device property
        :param value: the value of the device property
        """
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:68:1: DAR101 Missing parameter(s) in Docstring: - name
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:68:1: DAR101 Missing parameter(s) in Docstring: - return_value
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:83:1: DAR101 Missing parameter(s) in Docstring: - name
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:83:1: DAR101 Missing parameter(s) in Docstring: - result_code
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:83:1: DAR101 Missing parameter(s) in Docstring: - status
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:99:1: DAR101 Missing parameter(s) in Docstring: - state
        """
        Tell this builder to build mocks with the state set as specified.

        :param state: the state of the mock
        """
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:109:1: DAR101 Missing parameter(s) in Docstring: - mock_device
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:122:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        ) -> tango.DeviceAttribute:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:122:1: DAR101 Missing parameter(s) in Docstring: - *args
        ) -> tango.DeviceAttribute:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:122:1: DAR101 Missing parameter(s) in Docstring: - name
        ) -> tango.DeviceAttribute:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:122:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> tango.DeviceAttribute:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:149:1: DAR101 Missing parameter(s) in Docstring: - mock_device
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:158:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        ) -> tango.DbData:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:158:1: DAR101 Missing parameter(s) in Docstring: - *args
        ) -> tango.DbData:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:158:1: DAR101 Missing parameter(s) in Docstring: - name
        ) -> tango.DbData:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:158:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> tango.DbData:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:178:1: DAR101 Missing parameter(s) in Docstring: - mock_device
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:194:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            """
            Mock side-effect for command_inout method.

            :param name: the name of the command
            :param args: positional args to ``command_inout``
            :param kwargs: keyword args to ``command_inout``

            :return: the specified return value for the command
            """
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:194:1: DAR101 Missing parameter(s) in Docstring: - *args
            """
            Mock side-effect for command_inout method.

            :param name: the name of the command
            :param args: positional args to ``command_inout``
            :param kwargs: keyword args to ``command_inout``

            :return: the specified return value for the command
            """
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:194:1: DAR101 Missing parameter(s) in Docstring: - name
            """
            Mock side-effect for command_inout method.

            :param name: the name of the command
            :param args: positional args to ``command_inout``
            :param kwargs: keyword args to ``command_inout``

            :return: the specified return value for the command
            """
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:194:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Mock side-effect for command_inout method.

            :param name: the name of the command
            :param args: positional args to ``command_inout``
            :param kwargs: keyword args to ``command_inout``

            :return: the specified return value for the command
            """
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:209:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        ) -> str:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:209:1: DAR101 Missing parameter(s) in Docstring: - *args
        ) -> str:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:209:1: DAR101 Missing parameter(s) in Docstring: - name
        ) -> str:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:209:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> str:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:233:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        ) -> Any:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:233:1: DAR101 Missing parameter(s) in Docstring: - *args
        ) -> Any:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:233:1: DAR101 Missing parameter(s) in Docstring: - asynch_id
        ) -> Any:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:233:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> Any:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:254:1: DAR101 Missing parameter(s) in Docstring: - mock_device
    ) -> None:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:269:1: DAR101 Missing parameter(s) in Docstring: - attr_name
        ) -> int:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:269:1: DAR101 Missing parameter(s) in Docstring: - cb_or_queuesize
        ) -> int:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:269:1: DAR101 Missing parameter(s) in Docstring: - event_type
        ) -> int:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:269:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> int:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:269:1: DAR101 Missing parameter(s) in Docstring: - stateless
        ) -> int:
^
src/ska_mid_cbf_mcs/testing/mock/mock_device.py:311:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Call method for this builder: builds and returns a mock object.

        :return: a mock object
        """
^
src/ska_mid_cbf_mcs/tm_leaf_node.py:34:10: N802 function name 'delayModel' should be lowercase
    def delayModel(self: TmCspSubarrayLeafNodeTest) -> str:
         ^
src/ska_mid_cbf_mcs/tm_leaf_node.py:36:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the delayModel attribute.

        :return: current delayModel value
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/tm_leaf_node.py:44:10: N802 function name 'delayModel' should be lowercase
    def delayModel(self: TmCspSubarrayLeafNodeTest, value: str) -> None:
         ^
src/ska_mid_cbf_mcs/tm_leaf_node.py:46:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Read the delayModel attribute.

        :param value: the delay model value
        """
^
src/ska_mid_cbf_mcs/tm_leaf_node.py:71:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> BaseComponentManager:
^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:56:10: N802 function name 'obsState' should be lowercase
    def obsState(self) -> list[float]:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:58:1: DAR201 Missing "Returns" in Docstring: - return
        return self._obs_state
^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:61:10: N802 function name 'vccGain' should be lowercase
    def vccGain(self) -> list[float]:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:63:1: DAR201 Missing "Returns" in Docstring: - return
        return self._vcc_gain
^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:66:10: N802 function name 'configID' should be lowercase
    def configID(self) -> str:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:68:1: DAR201 Missing "Returns" in Docstring: - return
        return self._config_id
^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:71:10: N802 function name 'frequencyBand' should be lowercase
    def frequencyBand(self) -> int:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:73:1: DAR201 Missing "Returns" in Docstring: - return
        return self._frequency_band
^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:76:10: N802 function name 'frequencyBandOffset' should be lowercase
    def frequencyBandOffset(self) -> list[int]:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:78:1: DAR201 Missing "Returns" in Docstring: - return
        return self._frequency_band_offset
^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:81:10: N802 function name 'scanID' should be lowercase
    def scanID(self) -> int:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:83:1: DAR201 Missing "Returns" in Docstring: - return
        return self._scan_id
^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:86:10: N802 function name 'On' should be lowercase
    def On(self: VccBandSimulator) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:90:10: N802 function name 'Disable' should be lowercase
    def Disable(self: VccBandSimulator) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:94:10: N802 function name 'State' should be lowercase
    def State(self: VccBandSimulator) -> DevState:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:95:1: DAR201 Missing "Returns" in Docstring: - return
        """Get the current state of the device"""
^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:98:10: N802 function name 'SetInternalParameters' should be lowercase
    def SetInternalParameters(self: VccBandSimulator, json_str: str) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:99:1: DAR101 Missing parameter(s) in Docstring: - json_str
        """
        Set the internal parameters of this VCC device. These parameters are
        unique per receptor per band. Currently the parameters just consist
        of the VCC gain values.

        :param json_str: JSON-formatted string containing the parameters
        """
^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:109:10: N802 function name 'ConfigureScan' should be lowercase
    def ConfigureScan(self: VccBandSimulator, json_str: str) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:110:1: DAR101 Missing parameter(s) in Docstring: - json_str
        """
        Execute a configure scan operation.

        :param json_str: JSON-formatted string containing the scan configuration
                         parameters
        """
^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:133:10: N802 function name 'Scan' should be lowercase
    def Scan(self: VccBandSimulator, scan_id: int) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:134:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Execute a scan operation.

        :param scan_id: Scan identifier
        """
^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:142:10: N802 function name 'EndScan' should be lowercase
    def EndScan(self: VccBandSimulator) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:146:10: N802 function name 'Abort' should be lowercase
    def Abort(self: VccBandSimulator) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:150:10: N802 function name 'ObsReset' should be lowercase
    def ObsReset(self: VccBandSimulator) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_band_simulator.py:155:10: N802 function name 'Unconfigure' should be lowercase
    def Unconfigure(self: VccBandSimulator) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:48:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        *args: any,
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:48:1: DAR101 Missing parameter(s) in Docstring: - *args
        *args: any,
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:48:1: DAR101 Missing parameter(s) in Docstring: - talon_lru
        *args: any,
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:48:1: DAR101 Missing parameter(s) in Docstring: - vcc_band
        *args: any,
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:48:1: DAR101 Missing parameter(s) in Docstring: - vcc_controller
        *args: any,
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:106:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:106:1: DAR101 Missing parameter(s) in Docstring: - *args
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:106:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:155:1: DAR101 Missing parameter(s) in Docstring: - dish_sample_rate
    ) -> str:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:155:1: DAR101 Missing parameter(s) in Docstring: - freq_band_name
    ) -> str:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:155:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> str:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:155:1: DAR101 Missing parameter(s) in Docstring: - samples_per_frame
    ) -> str:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:210:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Check if ConfigureBand is allowed.

        :return: True if ConfigureBand is allowed, False otherwise
        """
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:229:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:229:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:229:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:323:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:323:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:323:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> tuple[TaskStatus, str]:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:349:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:349:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:349:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:429:1: DAR101 Missing parameter(s) in Docstring: - argin
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:429:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:429:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:480:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:480:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:528:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:528:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:578:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:578:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:634:1: DAR101 Missing parameter(s) in Docstring: - task_abort_event
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_component_manager.py:634:1: DAR101 Missing parameter(s) in Docstring: - task_callback
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_controller_simulator.py:63:10: N802 function name 'frequencyBand' should be lowercase
    def frequencyBand(self) -> int:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_controller_simulator.py:65:1: DAR201 Missing "Returns" in Docstring: - return
        return self._frequency_band
^
src/ska_mid_cbf_mcs/vcc/vcc_controller_simulator.py:68:10: N802 function name 'State' should be lowercase
    def State(self: VccControllerSimulator) -> tango.DevState:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_controller_simulator.py:69:1: DAR201 Missing "Returns" in Docstring: - return
        """Get the current state of the device"""
^
src/ska_mid_cbf_mcs/vcc/vcc_controller_simulator.py:72:10: N802 function name 'ConfigureBand' should be lowercase
    def ConfigureBand(
         ^
src/ska_mid_cbf_mcs/vcc/vcc_controller_simulator.py:74:1: DAR101 Missing parameter(s) in Docstring: - frequency_band
    ) -> None:
^
src/ska_mid_cbf_mcs/vcc/vcc_controller_simulator.py:92:10: N802 function name 'Unconfigure' should be lowercase
    def Unconfigure(self: VccControllerSimulator) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:57:10: N802 function name 'dishID' should be lowercase
    def dishID(self: Vcc) -> str:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:59:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the dishID attribute.

        :return: the Vcc's DISH ID.
        :rtype: str
        """
^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:67:10: N802 function name 'dishID' should be lowercase
    def dishID(self: Vcc, value: str) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:69:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Write the dishID attribute.

        :param value: the dishID value.
        """
^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:86:10: N802 function name 'subarrayMembership' should be lowercase
    def subarrayMembership(self: Vcc) -> int:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:88:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the subarrayMembership attribute.

        :return: the subarray membership (0 = no affiliation).
        :rtype: int
        """
^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:96:10: N802 function name 'subarrayMembership' should be lowercase
    def subarrayMembership(self: Vcc, value: int) -> None:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:98:1: DAR101 Missing parameter(s) in Docstring: - value
        """
        Write the subarrayMembership attribute.

        :param value: the subarray membership value (0 = no affiliation).
        """
^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:117:10: N802 function name 'frequencyBand' should be lowercase
    def frequencyBand(self: Vcc) -> tango.DevEnum:
         ^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:119:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Read the frequencyBand attribute.

        :return: the frequency band (being observed by the current scan, one of
            ["1", "2", "3", "4", "5a", "5b"]).
        :rtype: tango.DevEnum
        """
^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:178:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            *args: any,
^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:178:1: DAR101 Missing parameter(s) in Docstring: - *args
            *args: any,
^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:178:1: DAR201 Missing "Returns" in Docstring: - return
            *args: any,
^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:213:10: N802 function name 'ConfigureBand' should be lowercase
    def ConfigureBand(
         ^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:217:1: DAR101 Missing parameter(s) in Docstring: - band_config
        """
        Turn on the corresponding band device and disable all the others.

        :param band_config: json string containing: the frequency band name,
                            dish sample rate, and number of samples per frame

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: DevVarLongStringArrayType
        """
^
src/ska_mid_cbf_mcs/vcc/vcc_device.py:217:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Turn on the corresponding band device and disable all the others.

        :param band_config: json string containing: the frequency band name,
                            dish sample rate, and number of samples per frame

        :return: A tuple containing a return code and a string
            message indicating status. The message is for
            information purpose only.
        :rtype: DevVarLongStringArrayType
        """
^
src/ska_mid_cbf_mcs/visibility_transport/visibility_transport.py:22:1: DAR101 Missing parameter(s) in Docstring: - logger
        """
        Constructor

        :param logger: the logger object
        """
^
src/ska_mid_cbf_mcs/visibility_transport/visibility_transport.py:42:1: DAR101 Missing parameter(s) in Docstring: - fsp_config
    ) -> None:
^
src/ska_mid_cbf_mcs/visibility_transport/visibility_transport.py:42:1: DAR101 Missing parameter(s) in Docstring: - subarray_id
    ) -> None:
^
src/ska_mid_cbf_mcs/visibility_transport/visibility_transport.py:42:1: DAR101 Missing parameter(s) in Docstring: - vis_slim_yaml
    ) -> None:
^
src/ska_mid_cbf_mcs/visibility_transport/visibility_transport.py:110:1: DAR101 Missing parameter(s) in Docstring: - subarray_id
    ) -> None:
^
src/ska_mid_cbf_mcs/visibility_transport/visibility_transport.py:160:1: DAR101 Missing parameter(s) in Docstring: - fsp_config
    ):
^
src/ska_mid_cbf_mcs/visibility_transport/visibility_transport.py:160:1: DAR201 Missing "Returns" in Docstring: - return
    ):
^
src/ska_mid_cbf_mcs/visibility_transport/visibility_transport.py:160:1: DAR101 Missing parameter(s) in Docstring: - subarray_id
    ):
^
src/ska_mid_cbf_mcs/visibility_transport/visibility_transport.py:213:1: DAR101 Missing parameter(s) in Docstring: - vis_out_map
        """
        Create Tango device proxies for the HPS device servers
        used for outputting data for this subarray

        :param vis_out_map: dict mapping fsp_id to the board responsible
                            for sending visibilities to SDP
        """
^
src/ska_mid_cbf_mcs/visibility_transport/visibility_transport.py:260:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Determine which board does each FSP output route to.

        :return: a dict with fsp_id as key. The value is the TalonDX board
                 ("talondx-00x") that will output visibilities.
        :raise TangoException: if configuration is not valid
        """
^
src/ska_mid_cbf_mcs/visibility_transport/visibility_transport.py:260:1: DAR101 Missing parameter(s) in Docstring: - vis_slim_yaml
        """
        Determine which board does each FSP output route to.

        :return: a dict with fsp_id as key. The value is the TalonDX board
                 ("talondx-00x") that will output visibilities.
        :raise TangoException: if configuration is not valid
        """
^
tests/conftest.py:35:1: DAR101 Missing parameter(s) in Docstring: - session
    """
    Pytest hook; prints info about tango version.

    :param session: a pytest Session object
    """
^
tests/conftest.py:46:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a delay model test object.

    :return: a DelayModelTest object, with a method for creating
    the delay model input used for tests
    """
^
tests/integration/controller/CbfController_test.py:46:10: N802 function name 'test_Online' should be lowercase
    def test_Online(
         ^
tests/integration/controller/CbfController_test.py:57:1: DAR101 Missing parameter(s) in Docstring: - controller
        """
        Test the initial states and verify the component manager
        can start communicating.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:57:1: DAR101 Missing parameter(s) in Docstring: - controller_params
        """
        Test the initial states and verify the component manager
        can start communicating.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:57:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the initial states and verify the component manager
        can start communicating.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:57:1: DAR101 Missing parameter(s) in Docstring: - power_switch
        """
        Test the initial states and verify the component manager
        can start communicating.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:57:1: DAR101 Missing parameter(s) in Docstring: - slim_fs
        """
        Test the initial states and verify the component manager
        can start communicating.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:57:1: DAR101 Missing parameter(s) in Docstring: - slim_vis
        """
        Test the initial states and verify the component manager
        can start communicating.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:57:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test the initial states and verify the component manager
        can start communicating.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:57:1: DAR101 Missing parameter(s) in Docstring: - talon_lru
        """
        Test the initial states and verify the component manager
        can start communicating.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:110:10: N802 function name 'test_InitSysParam' should be lowercase
    def test_InitSysParam(
         ^
tests/integration/controller/CbfController_test.py:117:1: DAR101 Missing parameter(s) in Docstring: - controller
        """
        Test the "InitSysParam" command.

        This test is dependent on the test_Online and its state changes.
        Send the InitSysParam command with the sys_param_file.

        :param controller: The controller device proxy
        :param vcc: The list of VCC device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:117:1: DAR101 Missing parameter(s) in Docstring: - controller_params
        """
        Test the "InitSysParam" command.

        This test is dependent on the test_Online and its state changes.
        Send the InitSysParam command with the sys_param_file.

        :param controller: The controller device proxy
        :param vcc: The list of VCC device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:117:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the "InitSysParam" command.

        This test is dependent on the test_Online and its state changes.
        Send the InitSysParam command with the sys_param_file.

        :param controller: The controller device proxy
        :param vcc: The list of VCC device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:117:1: DAR101 Missing parameter(s) in Docstring: - vcc
        """
        Test the "InitSysParam" command.

        This test is dependent on the test_Online and its state changes.
        Send the InitSysParam command with the sys_param_file.

        :param controller: The controller device proxy
        :param vcc: The list of VCC device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:163:10: N802 function name 'test_On' should be lowercase
    def test_On(
         ^
tests/integration/controller/CbfController_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - controller
        """
        Test the "On" command.

        This test is dependent on the test_InitSysParam and its ability
        to initialize dishIDs and SysParams. Send the On command and expect
        the controller and its subelements to transition to the ON state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param talon_board: The list of talon_board device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - controller_params
        """
        Test the "On" command.

        This test is dependent on the test_InitSysParam and its ability
        to initialize dishIDs and SysParams. Send the On command and expect
        the controller and its subelements to transition to the ON state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param talon_board: The list of talon_board device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the "On" command.

        This test is dependent on the test_InitSysParam and its ability
        to initialize dishIDs and SysParams. Send the On command and expect
        the controller and its subelements to transition to the ON state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param talon_board: The list of talon_board device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - slim_fs
        """
        Test the "On" command.

        This test is dependent on the test_InitSysParam and its ability
        to initialize dishIDs and SysParams. Send the On command and expect
        the controller and its subelements to transition to the ON state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param talon_board: The list of talon_board device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - slim_vis
        """
        Test the "On" command.

        This test is dependent on the test_InitSysParam and its ability
        to initialize dishIDs and SysParams. Send the On command and expect
        the controller and its subelements to transition to the ON state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param talon_board: The list of talon_board device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - talon_board
        """
        Test the "On" command.

        This test is dependent on the test_InitSysParam and its ability
        to initialize dishIDs and SysParams. Send the On command and expect
        the controller and its subelements to transition to the ON state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param talon_board: The list of talon_board device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - talon_lru
        """
        Test the "On" command.

        This test is dependent on the test_InitSysParam and its ability
        to initialize dishIDs and SysParams. Send the On command and expect
        the controller and its subelements to transition to the ON state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param talon_board: The list of talon_board device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:256:10: N802 function name 'test_OnState_InitSysParam_NotAllowed' should be lowercase
    def test_OnState_InitSysParam_NotAllowed(
         ^
tests/integration/controller/CbfController_test.py:262:1: DAR101 Missing parameter(s) in Docstring: - controller
        """
        Test that InitSysParam command is not allowed when the controller is in ON state.

        Expects the controller to already be in the ON state, and attempts to
        send the InitSysParam command.

        :param controller: The controller device proxy
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:262:1: DAR101 Missing parameter(s) in Docstring: - controller_params
        """
        Test that InitSysParam command is not allowed when the controller is in ON state.

        Expects the controller to already be in the ON state, and attempts to
        send the InitSysParam command.

        :param controller: The controller device proxy
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:262:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test that InitSysParam command is not allowed when the controller is in ON state.

        Expects the controller to already be in the ON state, and attempts to
        send the InitSysParam command.

        :param controller: The controller device proxy
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:296:10: N802 function name 'test_Off' should be lowercase
    def test_Off(
         ^
tests/integration/controller/CbfController_test.py:306:1: DAR101 Missing parameter(s) in Docstring: - controller
        """
        Test the "Off" command.

        This test is dependent on the test_On and its ability to turn on the controller and its subelements.
        Send the Off command and expect the controller and its subelements to transition to the expected states.

        :param controller: The controller device proxy
        :param talon_board: The list of talon_board device proxies
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:306:1: DAR101 Missing parameter(s) in Docstring: - controller_params
        """
        Test the "Off" command.

        This test is dependent on the test_On and its ability to turn on the controller and its subelements.
        Send the Off command and expect the controller and its subelements to transition to the expected states.

        :param controller: The controller device proxy
        :param talon_board: The list of talon_board device proxies
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:306:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the "Off" command.

        This test is dependent on the test_On and its ability to turn on the controller and its subelements.
        Send the Off command and expect the controller and its subelements to transition to the expected states.

        :param controller: The controller device proxy
        :param talon_board: The list of talon_board device proxies
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:306:1: DAR101 Missing parameter(s) in Docstring: - slim_fs
        """
        Test the "Off" command.

        This test is dependent on the test_On and its ability to turn on the controller and its subelements.
        Send the Off command and expect the controller and its subelements to transition to the expected states.

        :param controller: The controller device proxy
        :param talon_board: The list of talon_board device proxies
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:306:1: DAR101 Missing parameter(s) in Docstring: - slim_vis
        """
        Test the "Off" command.

        This test is dependent on the test_On and its ability to turn on the controller and its subelements.
        Send the Off command and expect the controller and its subelements to transition to the expected states.

        :param controller: The controller device proxy
        :param talon_board: The list of talon_board device proxies
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:306:1: DAR101 Missing parameter(s) in Docstring: - talon_board
        """
        Test the "Off" command.

        This test is dependent on the test_On and its ability to turn on the controller and its subelements.
        Send the Off command and expect the controller and its subelements to transition to the expected states.

        :param controller: The controller device proxy
        :param talon_board: The list of talon_board device proxies
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:306:1: DAR101 Missing parameter(s) in Docstring: - talon_lru
        """
        Test the "Off" command.

        This test is dependent on the test_On and its ability to turn on the controller and its subelements.
        Send the Off command and expect the controller and its subelements to transition to the expected states.

        :param controller: The controller device proxy
        :param talon_board: The list of talon_board device proxies
        :param talon_lru: The list of talon_lru device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:529:10: N802 function name 'test_Offline' should be lowercase
    def test_Offline(
         ^
tests/integration/controller/CbfController_test.py:540:1: DAR101 Missing parameter(s) in Docstring: - controller
        """
        Verify that the component manager can stop communication.

        Set the AdminMode to OFFLINE and expect the controller and its subelements to transition to the DISABLE state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:540:1: DAR101 Missing parameter(s) in Docstring: - controller_params
        """
        Verify that the component manager can stop communication.

        Set the AdminMode to OFFLINE and expect the controller and its subelements to transition to the DISABLE state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:540:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Verify that the component manager can stop communication.

        Set the AdminMode to OFFLINE and expect the controller and its subelements to transition to the DISABLE state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:540:1: DAR101 Missing parameter(s) in Docstring: - power_switch
        """
        Verify that the component manager can stop communication.

        Set the AdminMode to OFFLINE and expect the controller and its subelements to transition to the DISABLE state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:540:1: DAR101 Missing parameter(s) in Docstring: - slim_fs
        """
        Verify that the component manager can stop communication.

        Set the AdminMode to OFFLINE and expect the controller and its subelements to transition to the DISABLE state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:540:1: DAR101 Missing parameter(s) in Docstring: - slim_vis
        """
        Verify that the component manager can stop communication.

        Set the AdminMode to OFFLINE and expect the controller and its subelements to transition to the DISABLE state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:540:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Verify that the component manager can stop communication.

        Set the AdminMode to OFFLINE and expect the controller and its subelements to transition to the DISABLE state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/CbfController_test.py:540:1: DAR101 Missing parameter(s) in Docstring: - talon_lru
        """
        Verify that the component manager can stop communication.

        Set the AdminMode to OFFLINE and expect the controller and its subelements to transition to the DISABLE state.

        :param controller: The controller device proxy
        :param talon_lru: The list of talon_lru device proxies
        :param power_switch: The list of power_switch device proxies
        :param slim_fs: The slim_fs device proxy
        :param slim_vis: The slim_vis device proxy
        :param subarray: The list of subarray device proxies
        :param event_tracer: The event tracer for the controller
        :param controller_params: Input parameters for running different instances of the suite.
        """
^
tests/integration/controller/conftest.py:49:1: DAR101 Missing parameter(s) in Docstring: - request
    """
    Fixture that controller test input parameters.

    :return: A dictionary containing all the test input parameters for the controller.
             This includes the system parameter file path, a flag indicating whether to retrieve
             the system parameters from the file, and the hardware configuration file path.
             Format follows {"sys_param_file": str, "sys_param_from_file": bool, "hw_config_file": str}.
    """
^
tests/integration/controller/conftest.py:49:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that controller test input parameters.

    :return: A dictionary containing all the test input parameters for the controller.
             This includes the system parameter file path, a flag indicating whether to retrieve
             the system parameters from the file, and the hardware configuration file path.
             Format follows {"sys_param_file": str, "sys_param_from_file": bool, "hw_config_file": str}.
    """
^
tests/integration/controller/conftest.py:67:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a proxy to the controller device.

    :return: DeviceProxy to CbfController device
    """
^
tests/integration/controller/conftest.py:77:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a list of proxies to subarray devices.

    :return: list of DeviceProxy to CbfSubarray devices
    """
^
tests/integration/controller/conftest.py:90:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a list of proxies to VCC devices.

    :return: list of DeviceProxy to Vcc devices
    """
^
tests/integration/controller/conftest.py:104:1: DAR101 Missing parameter(s) in Docstring: - controller_params
    """
    Fixture that returns a list of proxies to Talon LRU devices.

    :param controller_params: Input parameters for running different instances of the suite.
    :return: list of DeviceProxy to TalonLRU devices
    """
^
tests/integration/controller/conftest.py:104:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a list of proxies to Talon LRU devices.

    :param controller_params: Input parameters for running different instances of the suite.
    :return: list of DeviceProxy to TalonLRU devices
    """
^
tests/integration/controller/conftest.py:120:1: DAR101 Missing parameter(s) in Docstring: - controller_params
    """
    Fixture that returns a list of proxies to Talon board devices.

    :param controller_params: Input parameters for running different instances of the suite.
    :return: list of DeviceProxy to TalonBoard devices
    """
^
tests/integration/controller/conftest.py:120:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a list of proxies to Talon board devices.

    :param controller_params: Input parameters for running different instances of the suite.
    :return: list of DeviceProxy to TalonBoard devices
    """
^
tests/integration/controller/conftest.py:136:1: DAR101 Missing parameter(s) in Docstring: - controller_params
    """
    Fixture that returns a list of proxies to power switch devices.

    :param controller_params: Input parameters for running different instances of the suite.
    :return: list of DeviceProxy to PowerSwitch devices
    """
^
tests/integration/controller/conftest.py:136:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a list of proxies to power switch devices.

    :param controller_params: Input parameters for running different instances of the suite.
    :return: list of DeviceProxy to PowerSwitch devices
    """
^
tests/integration/controller/conftest.py:151:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a proxy to the frequency slice SLIM device.

    :return: DeviceProxy to Slim device
    """
^
tests/integration/controller/conftest.py:161:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a proxy to the visibility SLIM device.

    :return: DeviceProxy to Slim device
    """
^
tests/integration/controller/conftest.py:171:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a list of proxies to frequency slice SLIM link devices.

    :return: list of DeviceProxy to SlimLink devices
    """
^
tests/integration/controller/conftest.py:184:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a list of proxies to visibility SLIM link devices.

    :return: list of DeviceProxy to SlimLink devices
    """
^
tests/integration/controller/conftest.py:205:1: DAR101 Missing parameter(s) in Docstring: - controller
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/controller/conftest.py:205:1: DAR101 Missing parameter(s) in Docstring: - power_switch
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/controller/conftest.py:205:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/controller/conftest.py:205:1: DAR101 Missing parameter(s) in Docstring: - slim_fs
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/controller/conftest.py:205:1: DAR101 Missing parameter(s) in Docstring: - slim_vis
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/controller/conftest.py:205:1: DAR101 Missing parameter(s) in Docstring: - subarray
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/controller/conftest.py:205:1: DAR101 Missing parameter(s) in Docstring: - talon_board
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/controller/conftest.py:205:1: DAR101 Missing parameter(s) in Docstring: - talon_lru
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/controller/conftest.py:205:1: DAR101 Missing parameter(s) in Docstring: - vcc
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/fsp/FspCorrSubarray_test.py:37:10: N802 function name 'test_Connect' should be lowercase
    def test_Connect(
         ^
tests/integration/fsp/FspCorrSubarray_test.py:43:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Test the initial states and verify the component manager
        can start communicating

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:43:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Test the initial states and verify the component manager
        can start communicating

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:43:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Test the initial states and verify the component manager
        can start communicating

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:72:10: N802 function name 'test_On' should be lowercase
    def test_On(
         ^
tests/integration/fsp/FspCorrSubarray_test.py:78:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Test the "On" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:78:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Test the "On" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:78:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Test the "On" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:102:10: N802 function name 'test_Off' should be lowercase
    def test_Off(
         ^
tests/integration/fsp/FspCorrSubarray_test.py:108:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Test the "Off" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:108:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Test the "Off" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:108:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Test the "Off" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:133:10: N802 function name 'test_Standby' should be lowercase
    def test_Standby(
         ^
tests/integration/fsp/FspCorrSubarray_test.py:139:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Test the "Standby" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:139:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Test the "Standby" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:139:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Test the "Standby" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:165:10: N802 function name 'test_ConfigureScan' should be lowercase
    def test_ConfigureScan(
         ^
tests/integration/fsp/FspCorrSubarray_test.py:172:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:172:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:172:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:172:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:258:10: N802 function name 'test_Scan' should be lowercase
    def test_Scan(
         ^
tests/integration/fsp/FspCorrSubarray_test.py:264:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Test the "Scan" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:264:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Test the "Scan" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:264:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Test the "Scan" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:301:10: N802 function name 'test_EndScan' should be lowercase
    def test_EndScan(
         ^
tests/integration/fsp/FspCorrSubarray_test.py:307:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Test the "EndScan" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:307:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Test the "EndScan" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:307:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Test the "EndScan" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:337:10: N802 function name 'test_GoToIdle' should be lowercase
    def test_GoToIdle(
         ^
tests/integration/fsp/FspCorrSubarray_test.py:343:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Test the "GoToIdle" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:343:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Test the "GoToIdle" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:343:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Test the "GoToIdle" command

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:375:10: N802 function name 'test_Abort_ObsReset' should be lowercase
    def test_Abort_ObsReset(
         ^
tests/integration/fsp/FspCorrSubarray_test.py:382:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:382:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:382:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:382:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:434:10: N802 function name 'test_Disconnect' should be lowercase
    def test_Disconnect(
         ^
tests/integration/fsp/FspCorrSubarray_test.py:440:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Verify the component manager can stop communicating

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:440:1: DAR101 Missing parameter(s) in Docstring: - sub_id
        """
        Verify the component manager can stop communicating

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/FspCorrSubarray_test.py:440:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Verify the component manager can stop communicating

        :param test_proxies: the proxies test fixture
        :param fsp_id: the fsp id
        :param sub_id: the subarray id
        """
^
tests/integration/fsp/Fsp_test.py:38:10: N802 function name 'test_Connect' should be lowercase
    def test_Connect(
         ^
tests/integration/fsp/Fsp_test.py:41:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Test the initial states and verify the component manager
        can start communicating
        """
^
tests/integration/fsp/Fsp_test.py:41:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Test the initial states and verify the component manager
        can start communicating
        """
^
tests/integration/fsp/Fsp_test.py:62:10: N802 function name 'test_SetFunctionMode' should be lowercase
    def test_SetFunctionMode(
         ^
tests/integration/fsp/Fsp_test.py:65:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Test SetFunctionMode command state changes.
        """
^
tests/integration/fsp/Fsp_test.py:65:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Test SetFunctionMode command state changes.
        """
^
tests/integration/fsp/Fsp_test.py:100:10: N802 function name 'test_AddRemoveSubarrayMembership' should be lowercase
    def test_AddRemoveSubarrayMembership(
         ^
tests/integration/fsp/Fsp_test.py:129:10: N802 function name 'test_Disconnect' should be lowercase
    def test_Disconnect(
         ^
tests/integration/fsp/Fsp_test.py:132:1: DAR101 Missing parameter(s) in Docstring: - fsp_id
        """
        Verify the component manager can stop communicating
        """
^
tests/integration/fsp/Fsp_test.py:132:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
        """
        Verify the component manager can stop communicating
        """
^
tests/integration/slim/Slim_test.py:39:10: N802 function name 'test_Online' should be lowercase
    def test_Online(
         ^
tests/integration/slim/Slim_test.py:46:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/slim/Slim_test.py:46:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim/Slim_test.py:46:1: DAR101 Missing parameter(s) in Docstring: - lru_change_event_callbacks
    ) -> None:
^
tests/integration/slim/Slim_test.py:46:1: DAR101 Missing parameter(s) in Docstring: - ps_change_event_callbacks
    ) -> None:
^
tests/integration/slim/Slim_test.py:46:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
    ) -> None:
^
tests/integration/slim/Slim_test.py:82:10: N802 function name 'test_On' should be lowercase
    def test_On(
         ^
tests/integration/slim/Slim_test.py:88:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/slim/Slim_test.py:88:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim/Slim_test.py:88:1: DAR101 Missing parameter(s) in Docstring: - lru_change_event_callbacks
    ) -> None:
^
tests/integration/slim/Slim_test.py:88:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
    ) -> None:
^
tests/integration/slim/Slim_test.py:118:10: N802 function name 'test_SlimTest_Before_Configure' should be lowercase
    def test_SlimTest_Before_Configure(
         ^
tests/integration/slim/Slim_test.py:121:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim/Slim_test.py:134:10: N802 function name 'test_Configure' should be lowercase
    def test_Configure(
         ^
tests/integration/slim/Slim_test.py:138:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/slim/Slim_test.py:138:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim/Slim_test.py:157:10: N802 function name 'test_SlimTest_After_Configure' should be lowercase
    def test_SlimTest_After_Configure(
         ^
tests/integration/slim/Slim_test.py:159:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim/Slim_test.py:169:10: N802 function name 'test_Off' should be lowercase
    def test_Off(
         ^
tests/integration/slim/Slim_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/slim/Slim_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim/Slim_test.py:191:10: N802 function name 'test_Offline' should be lowercase
    def test_Offline(
         ^
tests/integration/slim/Slim_test.py:198:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/slim/Slim_test.py:198:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim/Slim_test.py:198:1: DAR101 Missing parameter(s) in Docstring: - lru_change_event_callbacks
    ) -> None:
^
tests/integration/slim/Slim_test.py:198:1: DAR101 Missing parameter(s) in Docstring: - ps_change_event_callbacks
    ) -> None:
^
tests/integration/slim/Slim_test.py:198:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
    ) -> None:
^
tests/integration/slim/conftest.py:27:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :return: the device under test
    """
^
tests/integration/slim/conftest.py:37:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device proxies required for this scope.

    :return: a TestProxies object containing device proxies to all devices required in this module's scope of integration testing
    """
^
tests/integration/slim/conftest.py:91:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns the device under test's change event callback group.

    :param device_under_test: the device whose change events will be subscribed to.
    :return: the change event callback object
    """
^
tests/integration/slim/conftest.py:91:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test's change event callback group.

    :param device_under_test: the device whose change events will be subscribed to.
    :return: the change event callback object
    """
^
tests/integration/slim/conftest.py:111:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the TalonLru's change event callback group.

    :param test_proxies: the device proxies used in this scope.
    :return: the change event callback object for TalonLru devices
    """
^
tests/integration/slim/conftest.py:111:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
    """
    Fixture that returns the TalonLru's change event callback group.

    :param test_proxies: the device proxies used in this scope.
    :return: the change event callback object for TalonLru devices
    """
^
tests/integration/slim/conftest.py:132:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the PowerSwitch's change event callback group.

    :param test_proxies: the device proxies used in this scope.
    :return: the change event callback object for PowerSwitch devices
    """
^
tests/integration/slim/conftest.py:132:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
    """
    Fixture that returns the PowerSwitch's change event callback group.

    :param test_proxies: the device proxies used in this scope.
    :return: the change event callback object for PowerSwitch devices
    """
^
tests/integration/slim_link/SlimLink_test.py:38:10: N802 function name 'test_Online' should be lowercase
    def test_Online(
         ^
tests/integration/slim_link/SlimLink_test.py:42:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/slim_link/SlimLink_test.py:42:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim_link/SlimLink_test.py:66:10: N802 function name 'test_ConnectTxRx' should be lowercase
    def test_ConnectTxRx(
         ^
tests/integration/slim_link/SlimLink_test.py:70:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/slim_link/SlimLink_test.py:70:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim_link/SlimLink_test.py:89:10: N802 function name 'test_VerifyConnection' should be lowercase
    def test_VerifyConnection(
         ^
tests/integration/slim_link/SlimLink_test.py:93:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/slim_link/SlimLink_test.py:93:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim_link/SlimLink_test.py:114:10: N802 function name 'test_DisconnectTxRx' should be lowercase
    def test_DisconnectTxRx(
         ^
tests/integration/slim_link/SlimLink_test.py:118:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/slim_link/SlimLink_test.py:118:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim_link/SlimLink_test.py:137:10: N802 function name 'test_Offline' should be lowercase
    def test_Offline(
         ^
tests/integration/slim_link/SlimLink_test.py:141:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/slim_link/SlimLink_test.py:141:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/slim_link/conftest.py:26:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :return: the device under test
    """
^
tests/integration/slim_link/conftest.py:37:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns the device under test's change event callback group.

    :param device_under_test: the device whose change events will be subscribed to.
    :return: the change event callback object
    """
^
tests/integration/slim_link/conftest.py:37:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test's change event callback group.

    :param device_under_test: the device whose change events will be subscribed to.
    :return: the change event callback object
    """
^
tests/integration/subarray/CbfSubarray_test.py:35:10: N802 function name 'test_Online' should be lowercase
    def test_Online(
         ^
tests/integration/subarray/CbfSubarray_test.py:41:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the initial states and verify the component manager
        can start communicating.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:41:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test the initial states and verify the component manager
        can start communicating.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:41:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test the initial states and verify the component manager
        can start communicating.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:74:10: N802 function name 'test_sysParam' should be lowercase
    def test_sysParam(
         ^
tests/integration/subarray/CbfSubarray_test.py:80:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test writing the sysParam attribute.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:80:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test writing the sysParam attribute.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:80:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test writing the sysParam attribute.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:108:10: N802 function name 'test_AddReceptors' should be lowercase
    def test_AddReceptors(
         ^
tests/integration/subarray/CbfSubarray_test.py:115:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test CbfSubarrays's AddReceptors command.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:115:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test CbfSubarrays's AddReceptors command.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:115:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test CbfSubarrays's AddReceptors command.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:115:1: DAR101 Missing parameter(s) in Docstring: - vcc
        """
        Test CbfSubarrays's AddReceptors command.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:180:10: N802 function name 'test_ConfigureScan' should be lowercase
    def test_ConfigureScan(
         ^
tests/integration/subarray/CbfSubarray_test.py:190:1: DAR101 Missing parameter(s) in Docstring: - controller
        """
        Test CbfSubarrays's ConfigureScan command.

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:190:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test CbfSubarrays's ConfigureScan command.

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:190:1: DAR101 Missing parameter(s) in Docstring: - fsp
        """
        Test CbfSubarrays's ConfigureScan command.

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:190:1: DAR101 Missing parameter(s) in Docstring: - fsp_corr
        """
        Test CbfSubarrays's ConfigureScan command.

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:190:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test CbfSubarrays's ConfigureScan command.

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:190:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test CbfSubarrays's ConfigureScan command.

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:190:1: DAR101 Missing parameter(s) in Docstring: - vcc
        """
        Test CbfSubarrays's ConfigureScan command.

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:324:10: N802 function name 'test_delay_model_READY' should be lowercase
    def test_delay_model_READY(
         ^
tests/integration/subarray/CbfSubarray_test.py:331:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test sending CbfSubarray delay model JSON in ObsState.READY.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray_params: dict containing all test input parameters
        :tm: DeviceProxy to TmCspSubarrayLeafNodeTest device
        """
^
tests/integration/subarray/CbfSubarray_test.py:331:1: DAR101 Missing parameter(s) in Docstring: - fsp_corr
        """
        Test sending CbfSubarray delay model JSON in ObsState.READY.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray_params: dict containing all test input parameters
        :tm: DeviceProxy to TmCspSubarrayLeafNodeTest device
        """
^
tests/integration/subarray/CbfSubarray_test.py:331:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test sending CbfSubarray delay model JSON in ObsState.READY.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray_params: dict containing all test input parameters
        :tm: DeviceProxy to TmCspSubarrayLeafNodeTest device
        """
^
tests/integration/subarray/CbfSubarray_test.py:331:1: DAR101 Missing parameter(s) in Docstring: - tm
        """
        Test sending CbfSubarray delay model JSON in ObsState.READY.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray_params: dict containing all test input parameters
        :tm: DeviceProxy to TmCspSubarrayLeafNodeTest device
        """
^
tests/integration/subarray/CbfSubarray_test.py:376:10: N802 function name 'test_Scan' should be lowercase
    def test_Scan(
         ^
tests/integration/subarray/CbfSubarray_test.py:384:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test CbfSubarrays's Scan command.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:384:1: DAR101 Missing parameter(s) in Docstring: - fsp_corr
        """
        Test CbfSubarrays's Scan command.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:384:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test CbfSubarrays's Scan command.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:384:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test CbfSubarrays's Scan command.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:384:1: DAR101 Missing parameter(s) in Docstring: - vcc
        """
        Test CbfSubarrays's Scan command.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:458:10: N802 function name 'test_delay_model_SCANNING' should be lowercase
    def test_delay_model_SCANNING(
         ^
tests/integration/subarray/CbfSubarray_test.py:465:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test sending CbfSubarray delay model JSON in ObsState.SCANNING.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray_params: dict containing all test input parameters
        :tm: DeviceProxy to TmCspSubarrayLeafNodeTest device
        """
^
tests/integration/subarray/CbfSubarray_test.py:465:1: DAR101 Missing parameter(s) in Docstring: - fsp_corr
        """
        Test sending CbfSubarray delay model JSON in ObsState.SCANNING.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray_params: dict containing all test input parameters
        :tm: DeviceProxy to TmCspSubarrayLeafNodeTest device
        """
^
tests/integration/subarray/CbfSubarray_test.py:465:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test sending CbfSubarray delay model JSON in ObsState.SCANNING.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray_params: dict containing all test input parameters
        :tm: DeviceProxy to TmCspSubarrayLeafNodeTest device
        """
^
tests/integration/subarray/CbfSubarray_test.py:465:1: DAR101 Missing parameter(s) in Docstring: - tm
        """
        Test sending CbfSubarray delay model JSON in ObsState.SCANNING.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray_params: dict containing all test input parameters
        :tm: DeviceProxy to TmCspSubarrayLeafNodeTest device
        """
^
tests/integration/subarray/CbfSubarray_test.py:515:10: N802 function name 'test_EndScan' should be lowercase
    def test_EndScan(
         ^
tests/integration/subarray/CbfSubarray_test.py:523:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test CbfSubarrays's EndScan command.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:523:1: DAR101 Missing parameter(s) in Docstring: - fsp_corr
        """
        Test CbfSubarrays's EndScan command.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:523:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test CbfSubarrays's EndScan command.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:523:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test CbfSubarrays's EndScan command.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:523:1: DAR101 Missing parameter(s) in Docstring: - vcc
        """
        Test CbfSubarrays's EndScan command.

        :param event_tracer: TangoEventTracer
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:593:10: N802 function name 'test_GoToIdle' should be lowercase
    def test_GoToIdle(
         ^
tests/integration/subarray/CbfSubarray_test.py:602:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test CbfSubarrays's GoToIdle command.

        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:602:1: DAR101 Missing parameter(s) in Docstring: - fsp
        """
        Test CbfSubarrays's GoToIdle command.

        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:602:1: DAR101 Missing parameter(s) in Docstring: - fsp_corr
        """
        Test CbfSubarrays's GoToIdle command.

        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:602:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test CbfSubarrays's GoToIdle command.

        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:602:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test CbfSubarrays's GoToIdle command.

        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:602:1: DAR101 Missing parameter(s) in Docstring: - vcc
        """
        Test CbfSubarrays's GoToIdle command.

        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:711:10: N802 function name 'test_validateSupportedConfiguration' should be lowercase
    def test_validateSupportedConfiguration(
         ^
tests/integration/subarray/CbfSubarray_test.py:720:1: DAR101 Missing parameter(s) in Docstring: - controller
        """
        Test setting the controller's validateSupportedConfiguration attribute
        and validate its effects on CbfSubarray ConfigureScan

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param invalid_configure_scan_file: ConfigureScan input JSON that should
            fail validation
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:720:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test setting the controller's validateSupportedConfiguration attribute
        and validate its effects on CbfSubarray ConfigureScan

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param invalid_configure_scan_file: ConfigureScan input JSON that should
            fail validation
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:720:1: DAR101 Missing parameter(s) in Docstring: - invalid_configure_scan_file
        """
        Test setting the controller's validateSupportedConfiguration attribute
        and validate its effects on CbfSubarray ConfigureScan

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param invalid_configure_scan_file: ConfigureScan input JSON that should
            fail validation
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:720:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test setting the controller's validateSupportedConfiguration attribute
        and validate its effects on CbfSubarray ConfigureScan

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param invalid_configure_scan_file: ConfigureScan input JSON that should
            fail validation
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:720:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test setting the controller's validateSupportedConfiguration attribute
        and validate its effects on CbfSubarray ConfigureScan

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param invalid_configure_scan_file: ConfigureScan input JSON that should
            fail validation
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:720:1: DAR401 Missing exception(s) in Raises section: -r AssertionError
        """
        Test setting the controller's validateSupportedConfiguration attribute
        and validate its effects on CbfSubarray ConfigureScan

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param invalid_configure_scan_file: ConfigureScan input JSON that should
            fail validation
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:834:10: N802 function name 'test_RemoveAllReceptors' should be lowercase
    def test_RemoveAllReceptors(
         ^
tests/integration/subarray/CbfSubarray_test.py:841:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test CbfSubarrays's RemoveAllReceptors command.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:841:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test CbfSubarrays's RemoveAllReceptors command.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:841:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test CbfSubarrays's RemoveAllReceptors command.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:841:1: DAR101 Missing parameter(s) in Docstring: - vcc
        """
        Test CbfSubarrays's RemoveAllReceptors command.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:905:10: N802 function name 'test_Offline' should be lowercase
    def test_Offline(
         ^
tests/integration/subarray/CbfSubarray_test.py:911:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Verify component manager can stop communication with the component.

        Set the AdminMode to OFFLINE and expect the subarray to transition to the DISABLE state.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:911:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Verify component manager can stop communication with the component.

        Set the AdminMode to OFFLINE and expect the subarray to transition to the DISABLE state.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:911:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Verify component manager can stop communication with the component.

        Set the AdminMode to OFFLINE and expect the subarray to transition to the DISABLE state.

        :param event_tracer: TangoEventTracer
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        """
^
tests/integration/subarray/CbfSubarray_test.py:944:10: N802 function name 'test_Abort_ObsReset' should be lowercase
    def test_Abort_ObsReset(
         ^
tests/integration/subarray/CbfSubarray_test.py:954:1: DAR101 Missing parameter(s) in Docstring: - controller
        """
        Test CbfSubarrays's Abort and ObsReset commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:954:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test CbfSubarrays's Abort and ObsReset commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:954:1: DAR101 Missing parameter(s) in Docstring: - fsp
        """
        Test CbfSubarrays's Abort and ObsReset commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:954:1: DAR101 Missing parameter(s) in Docstring: - fsp_corr
        """
        Test CbfSubarrays's Abort and ObsReset commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:954:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test CbfSubarrays's Abort and ObsReset commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:954:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test CbfSubarrays's Abort and ObsReset commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:954:1: DAR101 Missing parameter(s) in Docstring: - vcc
        """
        Test CbfSubarrays's Abort and ObsReset commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1282:10: N802 function name 'test_Abort_Restart' should be lowercase
    def test_Abort_Restart(
         ^
tests/integration/subarray/CbfSubarray_test.py:1292:1: DAR101 Missing parameter(s) in Docstring: - controller
        """
        Test CbfSubarrays's Abort and Restart commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1292:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test CbfSubarrays's Abort and Restart commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1292:1: DAR101 Missing parameter(s) in Docstring: - fsp
        """
        Test CbfSubarrays's Abort and Restart commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1292:1: DAR101 Missing parameter(s) in Docstring: - fsp_corr
        """
        Test CbfSubarrays's Abort and Restart commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1292:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test CbfSubarrays's Abort and Restart commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1292:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test CbfSubarrays's Abort and Restart commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1292:1: DAR101 Missing parameter(s) in Docstring: - vcc
        """
        Test CbfSubarrays's Abort and Restart commands

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1628:10: N802 function name 'test_ConfigureScan_from_ready' should be lowercase
    def test_ConfigureScan_from_ready(
         ^
tests/integration/subarray/CbfSubarray_test.py:1638:1: DAR101 Missing parameter(s) in Docstring: - controller
        """
        Test re-configuring CbfSubarray from READY

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1638:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test re-configuring CbfSubarray from READY

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1638:1: DAR101 Missing parameter(s) in Docstring: - fsp
        """
        Test re-configuring CbfSubarray from READY

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1638:1: DAR101 Missing parameter(s) in Docstring: - fsp_corr
        """
        Test re-configuring CbfSubarray from READY

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1638:1: DAR101 Missing parameter(s) in Docstring: - subarray
        """
        Test re-configuring CbfSubarray from READY

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1638:1: DAR101 Missing parameter(s) in Docstring: - subarray_params
        """
        Test re-configuring CbfSubarray from READY

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/CbfSubarray_test.py:1638:1: DAR101 Missing parameter(s) in Docstring: - vcc
        """
        Test re-configuring CbfSubarray from READY

        :param controller: DeviceProxy to CbfController device
        :param event_tracer: TangoEventTracer
        :param fsp: dict of DeviceProxy to Fsp devices
        :param fsp_corr: dict of DeviceProxy to FspCorrSubarray devices
        :param subarray: list of proxies to subarray devices
        :param subarray_params: dict containing all test input parameters
        :param vcc: dict of DeviceProxy to Vcc devices
        """
^
tests/integration/subarray/conftest.py:93:1: DAR101 Missing parameter(s) in Docstring: - request
    """
    Fixture that subarray test input parameters.

    :return: dict containing all subarray test input parameters
    """
^
tests/integration/subarray/conftest.py:93:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that subarray test input parameters.

    :return: dict containing all subarray test input parameters
    """
^
tests/integration/subarray/conftest.py:103:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a dict of proxies to subarray devices.

    :return: dict of DeviceProxy to CbfSubarray devices
    """
^
tests/integration/subarray/conftest.py:118:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a proxy to the controller device.

    :return: DeviceProxy to CbfController device
    """
^
tests/integration/subarray/conftest.py:129:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a dict of proxies to FSP CORR subarray devices.

    :return: dict of DeviceProxy to FspCorrSubarray devices
    """
^
tests/integration/subarray/conftest.py:145:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a dict of proxies to FSP PST subarray devices.

    :return: dict of DeviceProxy to FspPstSubarray devices
    """
^
tests/integration/subarray/conftest.py:161:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a dict of proxies to FSP Mode subarray devices index by
    the repsective FSP Mode.

    Currently supported FSP Modes:
        - FspModes.CORR
        - FspModes.PST_BF

    :return: dict of DeviceProxy to FspPstSubarray devices indexed by FspModes
    """
^
tests/integration/subarray/conftest.py:179:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a dict of proxies to FSP devices.

    :return: dict of DeviceProxy to Fsp devices
    """
^
tests/integration/subarray/conftest.py:192:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a dict of proxies to VCC devices.

    :return: dict of DeviceProxy to Vcc devices
    """
^
tests/integration/subarray/conftest.py:205:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a proxy to the TM leaf node emulator device.

    :return: DeviceProxy to TmCspSubarrayLeafNodeTest device
    """
^
tests/integration/subarray/conftest.py:222:1: DAR101 Missing parameter(s) in Docstring: - fsp
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/subarray/conftest.py:222:1: DAR101 Missing parameter(s) in Docstring: - fsp_corr
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/subarray/conftest.py:222:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/subarray/conftest.py:222:1: DAR101 Missing parameter(s) in Docstring: - subarray
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/subarray/conftest.py:222:1: DAR101 Missing parameter(s) in Docstring: - vcc
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :return: TangoEventTracer
    """
^
tests/integration/talonboard/TalonBoard_test.py:28:10: N802 function name 'test_Online' should be lowercase
    def test_Online(
         ^
tests/integration/talonboard/TalonBoard_test.py:32:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/talonboard/TalonBoard_test.py:32:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/talonboard/TalonBoard_test.py:47:10: N802 function name 'test_On' should be lowercase
    def test_On(
         ^
tests/integration/talonboard/TalonBoard_test.py:51:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/talonboard/TalonBoard_test.py:51:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/talonboard/TalonBoard_test.py:68:10: N802 function name 'test_FPGA_Die_Temperature_Read' should be lowercase
    def test_FPGA_Die_Temperature_Read(
         ^
tests/integration/talonboard/TalonBoard_test.py:70:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/talonboard/TalonBoard_test.py:77:10: N802 function name 'test_FPGA_Die_Voltage_Read' should be lowercase
    def test_FPGA_Die_Voltage_Read(
         ^
tests/integration/talonboard/TalonBoard_test.py:79:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/talonboard/TalonBoard_test.py:92:10: N802 function name 'test_Off' should be lowercase
    def test_Off(
         ^
tests/integration/talonboard/TalonBoard_test.py:96:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/talonboard/TalonBoard_test.py:96:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/talonboard/TalonBoard_test.py:109:10: N802 function name 'test_Offline' should be lowercase
    def test_Offline(
         ^
tests/integration/talonboard/TalonBoard_test.py:113:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/talonboard/TalonBoard_test.py:113:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/talonboard/conftest.py:26:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the device under test
    """
^
tests/integration/vcc/Vcc_test.py:34:10: N802 function name 'test_Online' should be lowercase
    def test_Online(
         ^
tests/integration/vcc/Vcc_test.py:41:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:41:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:41:1: DAR101 Missing parameter(s) in Docstring: - lru_change_event_callbacks
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:41:1: DAR101 Missing parameter(s) in Docstring: - ps_change_event_callbacks
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:41:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:79:10: N802 function name 'test_On' should be lowercase
    def test_On(
         ^
tests/integration/vcc/Vcc_test.py:84:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:84:1: DAR101 Missing parameter(s) in Docstring: - lru_change_event_callbacks
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:84:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:114:10: N802 function name 'test_Off' should be lowercase
    def test_Off(
         ^
tests/integration/vcc/Vcc_test.py:118:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:118:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:167:10: N802 function name 'test_ConfigureScan' should be lowercase
    def test_ConfigureScan(
         ^
tests/integration/vcc/Vcc_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param vcc_id: the fsp id

        """
^
tests/integration/vcc/Vcc_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param vcc_id: the fsp id

        """
^
tests/integration/vcc/Vcc_test.py:173:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param vcc_id: the fsp id

        """
^
tests/integration/vcc/Vcc_test.py:230:10: N802 function name 'test_Scan' should be lowercase
    def test_Scan(
         ^
tests/integration/vcc/Vcc_test.py:236:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
        """
        Test the "Scan" command

        :param test_proxies: the proxies test fixture
        :param vcc_id: the fsp id

        """
^
tests/integration/vcc/Vcc_test.py:236:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the "Scan" command

        :param test_proxies: the proxies test fixture
        :param vcc_id: the fsp id

        """
^
tests/integration/vcc/Vcc_test.py:236:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test the "Scan" command

        :param test_proxies: the proxies test fixture
        :param vcc_id: the fsp id

        """
^
tests/integration/vcc/Vcc_test.py:260:10: N802 function name 'test_EndScan' should be lowercase
    def test_EndScan(
         ^
tests/integration/vcc/Vcc_test.py:264:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:264:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:285:10: N802 function name 'test_GoToIdle' should be lowercase
    def test_GoToIdle(
         ^
tests/integration/vcc/Vcc_test.py:289:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:289:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:316:10: N802 function name 'test_Abort_ObsReset' should be lowercase
    def test_Abort_ObsReset(
         ^
tests/integration/vcc/Vcc_test.py:323:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param vcc_id: the fsp id

        """
^
tests/integration/vcc/Vcc_test.py:323:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param vcc_id: the fsp id

        """
^
tests/integration/vcc/Vcc_test.py:323:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param vcc_id: the fsp id

        """
^
tests/integration/vcc/Vcc_test.py:323:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test the "ConfigureScan" command

        :param test_proxies: the proxies test fixture
        :param config_file_name: the name of the JSON file
            containing the configuration
        :param vcc_id: the fsp id

        """
^
tests/integration/vcc/Vcc_test.py:422:10: N802 function name 'test_Disconnect' should be lowercase
    def test_Disconnect(
         ^
tests/integration/vcc/Vcc_test.py:429:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:429:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:429:1: DAR101 Missing parameter(s) in Docstring: - lru_change_event_callbacks
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:429:1: DAR101 Missing parameter(s) in Docstring: - ps_change_event_callbacks
    ) -> None:
^
tests/integration/vcc/Vcc_test.py:429:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
    ) -> None:
^
tests/integration/vcc/conftest.py:27:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :return: the device under test
    """
^
tests/integration/vcc/conftest.py:37:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device proxies required for this scope.

    :return: a TestProxies object containing device proxies to all devices required in this module's scope of integration testing
    """
^
tests/integration/vcc/conftest.py:81:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns the device under test's change event callback group.

    :param device_under_test: the device whose change events will be subscribed to.
    :return: the change event callback object
    """
^
tests/integration/vcc/conftest.py:81:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test's change event callback group.

    :param device_under_test: the device whose change events will be subscribed to.
    :return: the change event callback object
    """
^
tests/integration/vcc/conftest.py:101:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the TalonLru's change event callback group.

    :param test_proxies: the device proxies used in this scope.
    :return: the change event callback object for TalonLru devices
    """
^
tests/integration/vcc/conftest.py:101:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
    """
    Fixture that returns the TalonLru's change event callback group.

    :param test_proxies: the device proxies used in this scope.
    :return: the change event callback object for TalonLru devices
    """
^
tests/integration/vcc/conftest.py:122:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the PowerSwitch's change event callback group.

    :param test_proxies: the device proxies used in this scope.
    :return: the change event callback object for PowerSwitch devices
    """
^
tests/integration/vcc/conftest.py:122:1: DAR101 Missing parameter(s) in Docstring: - test_proxies
    """
    Fixture that returns the PowerSwitch's change event callback group.

    :param test_proxies: the device proxies used in this scope.
    :return: the change event callback object for PowerSwitch devices
    """
^
tests/test_utils.py:14:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
) -> bool:
^
tests/test_utils.py:14:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
) -> bool:
^
tests/test_utils.py:14:1: DAR201 Missing "Returns" in Docstring: - return
) -> bool:
^
tests/unit/commons/interface_validator_test.py:114:10: N802 function name 'test_UnsupportedJSON' should be lowercase
    def test_UnsupportedJSON(
         ^
tests/unit/commons/interface_validator_test.py:125:10: N802 function name 'test_MissingInterfaceKey' should be lowercase
    def test_MissingInterfaceKey(
         ^
tests/unit/commons/interface_validator_test.py:136:10: N802 function name 'test_NonStringInterface' should be lowercase
    def test_NonStringInterface(
         ^
tests/unit/commons/interface_validator_test.py:147:10: N802 function name 'test_IncorrectCommand' should be lowercase
    def test_IncorrectCommand(
         ^
tests/unit/commons/interface_validator_test.py:158:10: N802 function name 'test_SupportedConfigureScan' should be lowercase
    def test_SupportedConfigureScan(
         ^
tests/unit/commons/interface_validator_test.py:168:10: N802 function name 'test_UnsupportedConfigureScan' should be lowercase
    def test_UnsupportedConfigureScan(
         ^
tests/unit/commons/interface_validator_test.py:181:10: N802 function name 'test_SupportedScan' should be lowercase
    def test_SupportedScan(
         ^
tests/unit/commons/interface_validator_test.py:189:10: N802 function name 'test_UnsupportedScan' should be lowercase
    def test_UnsupportedScan(
         ^
tests/unit/commons/interface_validator_test.py:200:10: N802 function name 'test_SupportedInitSysParam' should be lowercase
    def test_SupportedInitSysParam(
         ^
tests/unit/commons/interface_validator_test.py:210:10: N802 function name 'test_UnsupportedInitSysParam' should be lowercase
    def test_UnsupportedInitSysParam(
         ^
tests/unit/commons/interface_validator_test.py:223:10: N802 function name 'test_SupportedDelayModel' should be lowercase
    def test_SupportedDelayModel(
         ^
tests/unit/commons/interface_validator_test.py:233:10: N802 function name 'test_UnsupportedDelayModel' should be lowercase
    def test_UnsupportedDelayModel(
         ^
tests/unit/commons/interface_validator_test.py:246:10: N802 function name 'test_LowConfigScan' should be lowercase
    def test_LowConfigScan(
         ^
tests/unit/controller/CbfController_test.py:50:1: DAR101 Missing parameter(s) in Docstring: - initial_mocks
        """
        Fixture that creates a test context for the CbfController.

        :param initial_mocks: A dictionary of device mocks to be added to the test context.
        :return: A test context for the CbfController.
        """
^
tests/unit/controller/CbfController_test.py:50:1: DAR301 Missing "Yields" in Docstring: - yield
        """
        Fixture that creates a test context for the CbfController.

        :param initial_mocks: A dictionary of device mocks to be added to the test context.
        :return: A test context for the CbfController.
        """
^
tests/unit/controller/CbfController_test.py:113:10: N802 function name 'test_State' should be lowercase
    def test_State(
         ^
tests/unit/controller/CbfController_test.py:115:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/controller/CbfController_test.py:123:10: N802 function name 'test_Status' should be lowercase
    def test_Status(
         ^
tests/unit/controller/CbfController_test.py:125:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/controller/CbfController_test.py:133:10: N802 function name 'test_adminMode' should be lowercase
    def test_adminMode(
         ^
tests/unit/controller/CbfController_test.py:135:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/controller/CbfController_test.py:143:10: N802 function name 'test_Online' should be lowercase
    def test_Online(
         ^
tests/unit/controller/CbfController_test.py:147:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/controller/CbfController_test.py:147:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/controller/CbfController_test.py:187:10: N802 function name 'test_InitSysParam' should be lowercase
    def test_InitSysParam(
         ^
tests/unit/controller/CbfController_test.py:193:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test InitSysParam and failure cases.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param sys_param_file_path: The path to the sys_param file to be used
        """
^
tests/unit/controller/CbfController_test.py:193:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test InitSysParam and failure cases.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param sys_param_file_path: The path to the sys_param file to be used
        """
^
tests/unit/controller/CbfController_test.py:193:1: DAR101 Missing parameter(s) in Docstring: - sys_param_file_path
        """
        Test InitSysParam and failure cases.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param sys_param_file_path: The path to the sys_param file to be used
        """
^
tests/unit/controller/CbfController_test.py:272:10: N802 function name 'test_On_without_init_sys_param' should be lowercase
    def test_On_without_init_sys_param(
         ^
tests/unit/controller/CbfController_test.py:276:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/controller/CbfController_test.py:276:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/controller/CbfController_test.py:301:10: N802 function name 'test_Commands_all' should be lowercase
    def test_Commands_all(
         ^
tests/unit/controller/CbfController_test.py:306:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test all of CbfController's commands, expect success.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/controller/CbfController_test.py:306:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test all of CbfController's commands, expect success.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/controller/conftest.py:32:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/controller/conftest.py:32:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/controller/conftest.py:45:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/controller/conftest.py:45:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/controller/conftest.py:170:1: DAR101 Missing parameter(s) in Docstring: - mock_fsp
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_vcc: a mock Vcc that is powered off.
    :param mock_fsp: a mock Fsp that is powered off.
    :param mock_subarray: a mock CbfSubarray that is powered off.
    :param mock_talon_lru: a mock TalonLRU that is powered off.
    :param mock_slim_mesh: a mock SLIM Mesh that is powered off.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/controller/conftest.py:170:1: DAR101 Missing parameter(s) in Docstring: - mock_power_switch
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_vcc: a mock Vcc that is powered off.
    :param mock_fsp: a mock Fsp that is powered off.
    :param mock_subarray: a mock CbfSubarray that is powered off.
    :param mock_talon_lru: a mock TalonLRU that is powered off.
    :param mock_slim_mesh: a mock SLIM Mesh that is powered off.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/controller/conftest.py:170:1: DAR101 Missing parameter(s) in Docstring: - mock_slim_mesh
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_vcc: a mock Vcc that is powered off.
    :param mock_fsp: a mock Fsp that is powered off.
    :param mock_subarray: a mock CbfSubarray that is powered off.
    :param mock_talon_lru: a mock TalonLRU that is powered off.
    :param mock_slim_mesh: a mock SLIM Mesh that is powered off.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/controller/conftest.py:170:1: DAR101 Missing parameter(s) in Docstring: - mock_subarray
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_vcc: a mock Vcc that is powered off.
    :param mock_fsp: a mock Fsp that is powered off.
    :param mock_subarray: a mock CbfSubarray that is powered off.
    :param mock_talon_lru: a mock TalonLRU that is powered off.
    :param mock_slim_mesh: a mock SLIM Mesh that is powered off.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/controller/conftest.py:170:1: DAR101 Missing parameter(s) in Docstring: - mock_talon_board
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_vcc: a mock Vcc that is powered off.
    :param mock_fsp: a mock Fsp that is powered off.
    :param mock_subarray: a mock CbfSubarray that is powered off.
    :param mock_talon_lru: a mock TalonLRU that is powered off.
    :param mock_slim_mesh: a mock SLIM Mesh that is powered off.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/controller/conftest.py:170:1: DAR101 Missing parameter(s) in Docstring: - mock_talon_lru
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_vcc: a mock Vcc that is powered off.
    :param mock_fsp: a mock Fsp that is powered off.
    :param mock_subarray: a mock CbfSubarray that is powered off.
    :param mock_talon_lru: a mock TalonLRU that is powered off.
    :param mock_slim_mesh: a mock SLIM Mesh that is powered off.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/controller/conftest.py:170:1: DAR101 Missing parameter(s) in Docstring: - mock_vcc
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_vcc: a mock Vcc that is powered off.
    :param mock_fsp: a mock Fsp that is powered off.
    :param mock_subarray: a mock CbfSubarray that is powered off.
    :param mock_talon_lru: a mock TalonLRU that is powered off.
    :param mock_slim_mesh: a mock SLIM Mesh that is powered off.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/controller/conftest.py:170:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_vcc: a mock Vcc that is powered off.
    :param mock_fsp: a mock Fsp that is powered off.
    :param mock_subarray: a mock CbfSubarray that is powered off.
    :param mock_talon_lru: a mock TalonLRU that is powered off.
    :param mock_slim_mesh: a mock SLIM Mesh that is powered off.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/fsp/Fsp_test.py:43:1: DAR101 Missing parameter(s) in Docstring: - initial_mocks
        """
        A fixture that creates a test context for the Fsp.

        :param initial_mocks: A dictionary of initial mocks for the Fsp.
        :return: A test context for the Fsp.
        """
^
tests/unit/fsp/Fsp_test.py:43:1: DAR301 Missing "Yields" in Docstring: - yield
        """
        A fixture that creates a test context for the Fsp.

        :param initial_mocks: A dictionary of initial mocks for the Fsp.
        :return: A test context for the Fsp.
        """
^
tests/unit/fsp/Fsp_test.py:64:10: N802 function name 'test_State' should be lowercase
    def test_State(
         ^
tests/unit/fsp/Fsp_test.py:66:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/fsp/Fsp_test.py:74:10: N802 function name 'test_Status' should be lowercase
    def test_Status(
         ^
tests/unit/fsp/Fsp_test.py:76:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/fsp/Fsp_test.py:84:10: N802 function name 'test_adminMode' should be lowercase
    def test_adminMode(
         ^
tests/unit/fsp/Fsp_test.py:86:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/fsp/Fsp_test.py:98:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> bool:
^
tests/unit/fsp/Fsp_test.py:98:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> bool:
^
tests/unit/fsp/Fsp_test.py:98:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
tests/unit/fsp/Fsp_test.py:129:10: N802 function name 'test_SetFunctionMode' should be lowercase
    def test_SetFunctionMode(
         ^
tests/unit/fsp/Fsp_test.py:135:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the SetFunctionMode() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param function_mode: the function mode to be set
        """
^
tests/unit/fsp/Fsp_test.py:135:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the SetFunctionMode() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param function_mode: the function mode to be set
        """
^
tests/unit/fsp/Fsp_test.py:135:1: DAR101 Missing parameter(s) in Docstring: - function_mode
        """
        Test the SetFunctionMode() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param function_mode: the function mode to be set
        """
^
tests/unit/fsp/Fsp_test.py:179:10: N802 function name 'test_SetFunctionMode_not_allowed_from_off' should be lowercase
    def test_SetFunctionMode_not_allowed_from_off(
         ^
tests/unit/fsp/Fsp_test.py:185:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the SetFunctionMode() command before the DUT has been turned ON.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param function_mode: the function mode to be set
        """
^
tests/unit/fsp/Fsp_test.py:185:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the SetFunctionMode() command before the DUT has been turned ON.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param function_mode: the function mode to be set
        """
^
tests/unit/fsp/Fsp_test.py:185:1: DAR101 Missing parameter(s) in Docstring: - function_mode
        """
        Test the SetFunctionMode() command before the DUT has been turned ON.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param function_mode: the function mode to be set
        """
^
tests/unit/fsp/Fsp_test.py:213:10: N802 function name 'test_SetFunctionMode_not_allowed_already_set' should be lowercase
    def test_SetFunctionMode_not_allowed_already_set(
         ^
tests/unit/fsp/Fsp_test.py:219:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the SetFunctionMode() command when the DUT's functionMode has already been set.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param function_mode: the function mode to be set
        """
^
tests/unit/fsp/Fsp_test.py:219:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the SetFunctionMode() command when the DUT's functionMode has already been set.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param function_mode: the function mode to be set
        """
^
tests/unit/fsp/Fsp_test.py:219:1: DAR101 Missing parameter(s) in Docstring: - function_mode
        """
        Test the SetFunctionMode() command when the DUT's functionMode has already been set.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param function_mode: the function mode to be set
        """
^
tests/unit/fsp/Fsp_test.py:262:10: N802 function name 'test_AddSubarrayMembership' should be lowercase
    def test_AddSubarrayMembership(
         ^
tests/unit/fsp/Fsp_test.py:268:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the AddSubarrayMembership() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param sub_ids: list of subarray IDs to add
        """
^
tests/unit/fsp/Fsp_test.py:268:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the AddSubarrayMembership() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param sub_ids: list of subarray IDs to add
        """
^
tests/unit/fsp/Fsp_test.py:268:1: DAR101 Missing parameter(s) in Docstring: - sub_ids
        """
        Test the AddSubarrayMembership() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param sub_ids: list of subarray IDs to add
        """
^
tests/unit/fsp/Fsp_test.py:339:10: N802 function name 'test_AddSubarrayMembership_not_allowed_from_idle_mode' should be lowercase
    def test_AddSubarrayMembership_not_allowed_from_idle_mode(
         ^
tests/unit/fsp/Fsp_test.py:343:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/fsp/Fsp_test.py:343:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/fsp/Fsp_test.py:375:10: N802 function name 'test_RemoveSubarrayMembership' should be lowercase
    def test_RemoveSubarrayMembership(
         ^
tests/unit/fsp/Fsp_test.py:381:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the RemoveSubarryMembership() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param sub_ids: list of subarray IDs to remove
        """
^
tests/unit/fsp/Fsp_test.py:381:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the RemoveSubarryMembership() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param sub_ids: list of subarray IDs to remove
        """
^
tests/unit/fsp/Fsp_test.py:381:1: DAR101 Missing parameter(s) in Docstring: - sub_ids
        """
        Test the RemoveSubarryMembership() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param sub_ids: list of subarray IDs to remove
        """
^
tests/unit/fsp/conftest.py:30:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the DeviceProxy to device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/fsp/conftest.py:30:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the DeviceProxy to device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/fsp/conftest.py:43:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/fsp/conftest.py:43:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/fsp/conftest.py:78:1: DAR101 Missing parameter(s) in Docstring: - mock_fsp_corr_subarray_device
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_fsp_corr_subarray_device: a mock FspCorrSubarray.
    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/fsp/conftest.py:78:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_fsp_corr_subarray_device: a mock FspCorrSubarray.
    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:49:1: DAR101 Missing parameter(s) in Docstring: - initial_mocks
        """
        A fixture that creates a test context for the FspCorrSubarray tests.

        :param initial_mocks: A dictionary of initial mocks for the FspCorrSubarray.
        :return: A test context for the FspCorrSubarray.
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:49:1: DAR301 Missing "Yields" in Docstring: - yield
        """
        A fixture that creates a test context for the FspCorrSubarray tests.

        :param initial_mocks: A dictionary of initial mocks for the FspCorrSubarray.
        :return: A test context for the FspCorrSubarray.
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:68:10: N802 function name 'test_State' should be lowercase
    def test_State(
         ^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:70:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:78:10: N802 function name 'test_Status' should be lowercase
    def test_Status(
         ^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:80:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:88:10: N802 function name 'test_adminMode' should be lowercase
    def test_adminMode(
         ^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:90:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:102:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> bool:
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:102:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> bool:
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:102:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:135:10: N802 function name 'test_Scan' should be lowercase
    def test_Scan(
         ^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:142:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:142:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:142:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:142:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:208:10: N802 function name 'test_Scan_reconfigure' should be lowercase
    def test_Scan_reconfigure(
         ^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:215:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test FspCorrSubarray's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param scan_id: the scan id
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:215:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test FspCorrSubarray's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param scan_id: the scan id
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:215:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test FspCorrSubarray's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param scan_id: the scan id
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:215:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test FspCorrSubarray's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param scan_id: the scan id
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:311:10: N802 function name 'test_Abort_from_ready' should be lowercase
    def test_Abort_from_ready(
         ^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:317:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test a Abort from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:317:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test a Abort from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:317:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test a Abort from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:383:10: N802 function name 'test_Abort_from_scanning' should be lowercase
    def test_Abort_from_scanning(
         ^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:390:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test a Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:390:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test a Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:390:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test a Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:390:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test a Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:464:10: N802 function name 'test_UpdateDelayModel' should be lowercase
    def test_UpdateDelayModel(
         ^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:472:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test Fsp's UpdateDelayModel command

        :param device_under_test: A fixture that provides a
            :py:class: `CbfDeviceProxy` to the device under test, in a
            :py:class:`context.DeviceProxy`.
        :param event_tracer: A :py:class:`TangoEventTracer` used to
            recieve subscribed change events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param delay_model_file_name: JSON file for the delay model
        :param scan_id: scan command input ID
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:472:1: DAR101 Missing parameter(s) in Docstring: - delay_model_file_name
        """
        Test Fsp's UpdateDelayModel command

        :param device_under_test: A fixture that provides a
            :py:class: `CbfDeviceProxy` to the device under test, in a
            :py:class:`context.DeviceProxy`.
        :param event_tracer: A :py:class:`TangoEventTracer` used to
            recieve subscribed change events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param delay_model_file_name: JSON file for the delay model
        :param scan_id: scan command input ID
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:472:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test Fsp's UpdateDelayModel command

        :param device_under_test: A fixture that provides a
            :py:class: `CbfDeviceProxy` to the device under test, in a
            :py:class:`context.DeviceProxy`.
        :param event_tracer: A :py:class:`TangoEventTracer` used to
            recieve subscribed change events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param delay_model_file_name: JSON file for the delay model
        :param scan_id: scan command input ID
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:472:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test Fsp's UpdateDelayModel command

        :param device_under_test: A fixture that provides a
            :py:class: `CbfDeviceProxy` to the device under test, in a
            :py:class:`context.DeviceProxy`.
        :param event_tracer: A :py:class:`TangoEventTracer` used to
            recieve subscribed change events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param delay_model_file_name: JSON file for the delay model
        :param scan_id: scan command input ID
        """
^
tests/unit/fsp_corr_subarray/FspCorrSubarrayDevice_test.py:472:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test Fsp's UpdateDelayModel command

        :param device_under_test: A fixture that provides a
            :py:class: `CbfDeviceProxy` to the device under test, in a
            :py:class:`context.DeviceProxy`.
        :param event_tracer: A :py:class:`TangoEventTracer` used to
            recieve subscribed change events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param delay_model_file_name: JSON file for the delay model
        :param scan_id: scan command input ID
        """
^
tests/unit/fsp_corr_subarray/conftest.py:28:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the DeviceProxy to device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/fsp_corr_subarray/conftest.py:28:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the DeviceProxy to device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/fsp_corr_subarray/conftest.py:41:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/fsp_corr_subarray/conftest.py:41:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/fsp_corr_subarray/conftest.py:89:1: DAR101 Missing parameter(s) in Docstring: - mock_controller
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_controller: a mock CbfController.
    :param mock_vcc: a mock Vcc.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/fsp_corr_subarray/conftest.py:89:1: DAR101 Missing parameter(s) in Docstring: - mock_vcc
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_controller: a mock CbfController.
    :param mock_vcc: a mock Vcc.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/fsp_corr_subarray/conftest.py:89:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_controller: a mock CbfController.
    :param mock_vcc: a mock Vcc.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:15:1: F401 'json' imported but unused
import json
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:49:1: DAR101 Missing parameter(s) in Docstring: - initial_mocks
        """
        A fixture that creates a test context for the FspPstSubarray tests.

        :param initial_mocks: A dictionary of initial mocks for the FspPstSubarray.
        :return: A test context for the FspPstSubarray.
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:49:1: DAR301 Missing "Yields" in Docstring: - yield
        """
        A fixture that creates a test context for the FspPstSubarray tests.

        :param initial_mocks: A dictionary of initial mocks for the FspPstSubarray.
        :return: A test context for the FspPstSubarray.
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:68:10: N802 function name 'test_State' should be lowercase
    def test_State(
         ^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:70:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:78:10: N802 function name 'test_Status' should be lowercase
    def test_Status(
         ^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:80:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:88:10: N802 function name 'test_adminMode' should be lowercase
    def test_adminMode(
         ^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:90:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:102:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> bool:
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:102:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> bool:
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:102:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:135:10: N802 function name 'test_Scan' should be lowercase
    def test_Scan(
         ^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:142:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:142:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:142:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:142:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:208:10: N802 function name 'test_Scan_reconfigure' should be lowercase
    def test_Scan_reconfigure(
         ^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:215:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test FspPstSubarray's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param scan_id: the scan id
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:215:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test FspPstSubarray's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param scan_id: the scan id
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:215:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test FspPstSubarray's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param scan_id: the scan id
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:215:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test FspPstSubarray's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        :param scan_id: the scan id
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:311:10: N802 function name 'test_Abort_from_ready' should be lowercase
    def test_Abort_from_ready(
         ^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:317:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test a Abort from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:317:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test a Abort from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:317:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test a Abort from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:383:10: N802 function name 'test_Abort_from_scanning' should be lowercase
    def test_Abort_from_scanning(
         ^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:390:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test a Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:390:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test a Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:390:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test a Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_pst_subarray/FspPstSubarrayDevice_test.py:390:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test a Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: JSON file for the configuration
        """
^
tests/unit/fsp_pst_subarray/conftest.py:28:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the DeviceProxy to device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/fsp_pst_subarray/conftest.py:28:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the DeviceProxy to device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/fsp_pst_subarray/conftest.py:41:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/fsp_pst_subarray/conftest.py:41:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/fsp_pst_subarray/conftest.py:88:1: DAR101 Missing parameter(s) in Docstring: - mock_controller
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_controller: a mock CbfController.
    :param mock_vcc: a mock Vcc.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/fsp_pst_subarray/conftest.py:88:1: DAR101 Missing parameter(s) in Docstring: - mock_vcc
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_controller: a mock CbfController.
    :param mock_vcc: a mock Vcc.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/fsp_pst_subarray/conftest.py:88:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_controller: a mock CbfController.
    :param mock_vcc: a mock Vcc.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/power_switch/PowerSwitch_test.py:53:1: DAR101 Missing parameter(s) in Docstring: - monkeymodule
        """
        Fixture that provides a test context for the PowerSwitch device.

        :param request: the pytest request object
        :param power_switch_model: the power switch model
        :param monkeymodule: the monkeypatch fixture
        :return: a test context for the PowerSwitch device
        """
^
tests/unit/power_switch/PowerSwitch_test.py:53:1: DAR101 Missing parameter(s) in Docstring: - power_switch_model
        """
        Fixture that provides a test context for the PowerSwitch device.

        :param request: the pytest request object
        :param power_switch_model: the power switch model
        :param monkeymodule: the monkeypatch fixture
        :return: a test context for the PowerSwitch device
        """
^
tests/unit/power_switch/PowerSwitch_test.py:53:1: DAR101 Missing parameter(s) in Docstring: - request
        """
        Fixture that provides a test context for the PowerSwitch device.

        :param request: the pytest request object
        :param power_switch_model: the power switch model
        :param monkeymodule: the monkeypatch fixture
        :return: a test context for the PowerSwitch device
        """
^
tests/unit/power_switch/PowerSwitch_test.py:53:1: DAR301 Missing "Yields" in Docstring: - yield
        """
        Fixture that provides a test context for the PowerSwitch device.

        :param request: the pytest request object
        :param power_switch_model: the power switch model
        :param monkeymodule: the monkeypatch fixture
        :return: a test context for the PowerSwitch device
        """
^
tests/unit/power_switch/PowerSwitch_test.py:64:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            """
            Replace requests.request method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/power_switch/PowerSwitch_test.py:64:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Replace requests.request method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/power_switch/PowerSwitch_test.py:64:1: DAR101 Missing parameter(s) in Docstring: - url
            """
            Replace requests.request method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/power_switch/PowerSwitch_test.py:80:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        ) -> MockDependency.Response:
^
tests/unit/power_switch/PowerSwitch_test.py:80:1: DAR101 Missing parameter(s) in Docstring: - params
        ) -> MockDependency.Response:
^
tests/unit/power_switch/PowerSwitch_test.py:80:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> MockDependency.Response:
^
tests/unit/power_switch/PowerSwitch_test.py:80:1: DAR101 Missing parameter(s) in Docstring: - url
        ) -> MockDependency.Response:
^
tests/unit/power_switch/PowerSwitch_test.py:95:42: N803 argument name 'varNames' should be lowercase
            authData, transportTarget, *varNames, **kwargs
                                         ^
tests/unit/power_switch/PowerSwitch_test.py:96:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        ) -> tuple:
^
tests/unit/power_switch/PowerSwitch_test.py:96:1: DAR101 Missing parameter(s) in Docstring: - *varNames
        ) -> tuple:
^
tests/unit/power_switch/PowerSwitch_test.py:96:1: DAR101 Missing parameter(s) in Docstring: - authData
        ) -> tuple:
^
tests/unit/power_switch/PowerSwitch_test.py:96:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> tuple:
^
tests/unit/power_switch/PowerSwitch_test.py:96:1: DAR101 Missing parameter(s) in Docstring: - transportTarget
        ) -> tuple:
^
tests/unit/power_switch/PowerSwitch_test.py:112:42: N803 argument name 'varNames' should be lowercase
            authData, transportTarget, *varNames, **kwargs
                                         ^
tests/unit/power_switch/PowerSwitch_test.py:113:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
        ) -> tuple:
^
tests/unit/power_switch/PowerSwitch_test.py:113:1: DAR101 Missing parameter(s) in Docstring: - *varNames
        ) -> tuple:
^
tests/unit/power_switch/PowerSwitch_test.py:113:1: DAR101 Missing parameter(s) in Docstring: - authData
        ) -> tuple:
^
tests/unit/power_switch/PowerSwitch_test.py:113:1: DAR201 Missing "Returns" in Docstring: - return
        ) -> tuple:
^
tests/unit/power_switch/PowerSwitch_test.py:113:1: DAR101 Missing parameter(s) in Docstring: - transportTarget
        ) -> tuple:
^
tests/unit/power_switch/PowerSwitch_test.py:181:10: N802 function name 'test_State' should be lowercase
    def test_State(
         ^
tests/unit/power_switch/PowerSwitch_test.py:183:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/power_switch/PowerSwitch_test.py:191:10: N802 function name 'test_Status' should be lowercase
    def test_Status(
         ^
tests/unit/power_switch/PowerSwitch_test.py:193:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/power_switch/PowerSwitch_test.py:201:10: N802 function name 'test_adminMode' should be lowercase
    def test_adminMode(
         ^
tests/unit/power_switch/PowerSwitch_test.py:203:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/power_switch/PowerSwitch_test.py:222:10: N802 function name 'test_Online' should be lowercase
    def test_Online(
         ^
tests/unit/power_switch/PowerSwitch_test.py:227:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test that the device is in the proper state after startup,
        and that the power switch driver has been initialized
        (indicated by the numOutlets value).

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:227:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test that the device is in the proper state after startup,
        and that the power switch driver has been initialized
        (indicated by the numOutlets value).

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:227:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Test that the device is in the proper state after startup,
        and that the power switch driver has been initialized
        (indicated by the numOutlets value).

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:272:10: N802 function name 'test_isCommunicating' should be lowercase
    def test_isCommunicating(
         ^
tests/unit/power_switch/PowerSwitch_test.py:277:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests the PowerSwitch's isCommunicating attr, which
        makes an API call to the PDU to verify connection.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:277:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests the PowerSwitch's isCommunicating attr, which
        makes an API call to the PDU to verify connection.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:306:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests that a GET request failure is appropriately handled.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:306:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests that a GET request failure is appropriately handled.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:356:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests that a PATCH request failure is appropriately handled.

        :param power_switch_model: Informs the test for which driver's responses to expect.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:356:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests that a PATCH request failure is appropriately handled.

        :param power_switch_model: Informs the test for which driver's responses to expect.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:356:1: DAR101 Missing parameter(s) in Docstring: - power_switch_model
        """
        Tests that a PATCH request failure is appropriately handled.

        :param power_switch_model: Informs the test for which driver's responses to expect.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:410:10: N802 function name 'test_TurnOffOutlet' should be lowercase
    def test_TurnOffOutlet(
         ^
tests/unit/power_switch/PowerSwitch_test.py:415:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests the TurnOffOutlet() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:415:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests the TurnOffOutlet() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:454:10: N802 function name 'test_TurnOffOutlet_not_allowed' should be lowercase
    def test_TurnOffOutlet_not_allowed(
         ^
tests/unit/power_switch/PowerSwitch_test.py:459:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests the TurnOffOutlet() command when the power switch is not communicating.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:459:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests the TurnOffOutlet() command when the power switch is not communicating.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:503:10: N802 function name 'test_TurnOffOutlet_outlet_stays_on' should be lowercase
    def test_TurnOffOutlet_outlet_stays_on(
         ^
tests/unit/power_switch/PowerSwitch_test.py:508:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests the TurnOffOutlet() command when outlets do not turn off as instructed.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:508:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests the TurnOffOutlet() command when outlets do not turn off as instructed.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:547:10: N802 function name 'test_TurnOffOutlet_invalid_outlet' should be lowercase
    def test_TurnOffOutlet_invalid_outlet(
         ^
tests/unit/power_switch/PowerSwitch_test.py:552:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests the TurnOffOutlet() command when an invalid outlet is provided.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:552:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests the TurnOffOutlet() command when an invalid outlet is provided.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:591:10: N802 function name 'test_TurnOnOutlet' should be lowercase
    def test_TurnOnOutlet(
         ^
tests/unit/power_switch/PowerSwitch_test.py:596:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests the TurnOnOutlet() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:596:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests the TurnOnOutlet() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:635:10: N802 function name 'test_TurnOnOutlet_not_allowed' should be lowercase
    def test_TurnOnOutlet_not_allowed(
         ^
tests/unit/power_switch/PowerSwitch_test.py:640:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests the TurnOnOutlet() command when the power switch is not communicating.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:640:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests the TurnOnOutlet() command when the power switch is not communicating.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:686:10: N802 function name 'test_TurnOnOutlet_outlet_stays_off' should be lowercase
    def test_TurnOnOutlet_outlet_stays_off(
         ^
tests/unit/power_switch/PowerSwitch_test.py:691:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests the TurnOnOutlet() command when outlets do not turn on as instructed.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:691:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests the TurnOnOutlet() command when outlets do not turn on as instructed.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:730:10: N802 function name 'test_TurnOnOutlet_invalid_outlet' should be lowercase
    def test_TurnOnOutlet_invalid_outlet(
         ^
tests/unit/power_switch/PowerSwitch_test.py:735:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests the TurnOnOutlet() command when an invalid outlet is provided.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/PowerSwitch_test.py:735:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests the TurnOnOutlet() command when an invalid outlet is provided.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/power_switch/conftest.py:24:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/power_switch/conftest.py:24:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/power_switch/conftest.py:37:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/power_switch/conftest.py:37:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:39:1: DAR101 Missing parameter(s) in Docstring: - request
        """
        Before Each fixture, to setup the CbfSubarrayComponentManager and the Scan Configuration
        """
^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:39:1: DAR201 Missing "Returns" in Docstring: - return
        """
        Before Each fixture, to setup the CbfSubarrayComponentManager and the Scan Configuration
        """
^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:55:10: N802 function name 'test_Invalid_Configuration_Version' should be lowercase
    def test_Invalid_Configuration_Version(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:80:10: N802 function name 'test_Valid_Configuration_Version' should be lowercase
    def test_Valid_Configuration_Version(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:103:10: N802 function name 'test_Invalid_Subarray_ID' should be lowercase
    def test_Invalid_Subarray_ID(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:125:10: N802 function name 'test_Invalid_FSP_IDs' should be lowercase
    def test_Invalid_FSP_IDs(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:152:10: N802 function name 'test_Invalid_FSP_IDs_CORR_post_v4' should be lowercase
    def test_Invalid_FSP_IDs_CORR_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:177:10: N802 function name 'test_Invalid_Duplicate_FSP_IDs_in_single_subarray' should be lowercase
    def test_Invalid_Duplicate_FSP_IDs_in_single_subarray(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:222:10: N802 function name 'test_Invalid_Common_Keys_post_v4' should be lowercase
    def test_Invalid_Common_Keys_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:251:10: N802 function name 'test_Invalid_MidCBF_Keys_post_v4' should be lowercase
    def test_Invalid_MidCBF_Keys_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:277:10: N802 function name 'test_Invalid_start_freq_post_v4' should be lowercase
    def test_Invalid_start_freq_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:305:10: N802 function name 'test_Valid_start_freq_post_v4' should be lowercase
    def test_Valid_start_freq_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:347:10: N802 function name 'test_Invalid_fsp_ids_amount_for_requested_bandwidth_post_v4' should be lowercase
    def test_Invalid_fsp_ids_amount_for_requested_bandwidth_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:395:10: N802 function name 'test_Invalid_channel_width_post_v4' should be lowercase
    def test_Invalid_channel_width_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:421:10: N802 function name 'test_Invalid_channel_count_post_v4' should be lowercase
    def test_Invalid_channel_count_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:446:10: N802 function name 'test_Invalid_sdp_start_channel_id_post_v4' should be lowercase
    def test_Invalid_sdp_start_channel_id_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:530:10: N802 function name 'test_Invalid_output_host_non_multiple_20_post_v4' should be lowercase
    def test_Invalid_output_host_non_multiple_20_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:574:10: N802 function name 'test_Invalid_output_host_post_v4' should be lowercase
    def test_Invalid_output_host_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:608:10: N802 function name 'test_Invalid_output_port_increment_post_v4' should be lowercase
    def test_Invalid_output_port_increment_post_v4(
         ^
tests/unit/scan_configuration_validator/ScanConfigurationValidator_test.py:642:10: N802 function name 'test_Valid_channel_map_increment_post_v4' should be lowercase
    def test_Valid_channel_map_increment_post_v4(
         ^
tests/unit/slim/Slim_test.py:49:1: DAR101 Missing parameter(s) in Docstring: - initial_mocks
    ) -> Iterator[context.ThreadedTestTangoContextManager._TangoContext]:
^
tests/unit/slim/Slim_test.py:49:1: DAR301 Missing "Yields" in Docstring: - yield
    ) -> Iterator[context.ThreadedTestTangoContextManager._TangoContext]:
^
tests/unit/slim/Slim_test.py:87:10: N802 function name 'test_State' should be lowercase
    def test_State(
         ^
tests/unit/slim/Slim_test.py:89:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim/Slim_test.py:97:10: N802 function name 'test_Status' should be lowercase
    def test_Status(
         ^
tests/unit/slim/Slim_test.py:99:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim/Slim_test.py:107:10: N802 function name 'test_adminMode' should be lowercase
    def test_adminMode(
         ^
tests/unit/slim/Slim_test.py:109:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim/Slim_test.py:117:10: N802 function name 'test_On' should be lowercase
    def test_On(
         ^
tests/unit/slim/Slim_test.py:121:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim/Slim_test.py:121:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/slim/Slim_test.py:168:10: N802 function name 'test_Configure' should be lowercase
    def test_Configure(
         ^
tests/unit/slim/Slim_test.py:175:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the Configure() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:175:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the Configure() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:175:1: DAR101 Missing parameter(s) in Docstring: - mesh_config_filename
        """
        Test the Configure() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:206:10: N802 function name 'test_Configure_too_many_links' should be lowercase
    def test_Configure_too_many_links(
         ^
tests/unit/slim/Slim_test.py:213:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the Configure() command when the configuration contains more links than there are SlimLink mocks.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:213:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the Configure() command when the configuration contains more links than there are SlimLink mocks.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:213:1: DAR101 Missing parameter(s) in Docstring: - mesh_config_filename
        """
        Test the Configure() command when the configuration contains more links than there are SlimLink mocks.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:246:10: N802 function name 'test_Configure_slim_link_init_fails' should be lowercase
    def test_Configure_slim_link_init_fails(
         ^
tests/unit/slim/Slim_test.py:253:1: DAR101 Missing parameter(s) in Docstring: - device_under_test_fail
        """
        Test the Configure() command using SlimLink mocks set to reject the nested ConnectTxRx call.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:253:1: DAR101 Missing parameter(s) in Docstring: - event_tracer_fail
        """
        Test the Configure() command using SlimLink mocks set to reject the nested ConnectTxRx call.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:253:1: DAR101 Missing parameter(s) in Docstring: - mesh_config_filename
        """
        Test the Configure() command using SlimLink mocks set to reject the nested ConnectTxRx call.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:286:10: N802 function name 'test_Configure_not_allowed' should be lowercase
    def test_Configure_not_allowed(
         ^
tests/unit/slim/Slim_test.py:292:1: DAR101 Missing parameter(s) in Docstring: - device_under_test_fail
        """
        Test the Configure() command before Slim has started up.

        :param device_under_test_fail: DeviceProxy to the device under test for failure conditions.
        :param event_tracer_fail: A TangoEventTracer used to recieve subscribed change
                                  events from the device under test, for failure conditions.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:292:1: DAR101 Missing parameter(s) in Docstring: - event_tracer_fail
        """
        Test the Configure() command before Slim has started up.

        :param device_under_test_fail: DeviceProxy to the device under test for failure conditions.
        :param event_tracer_fail: A TangoEventTracer used to recieve subscribed change
                                  events from the device under test, for failure conditions.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:292:1: DAR101 Missing parameter(s) in Docstring: - mesh_config_filename
        """
        Test the Configure() command before Slim has started up.

        :param device_under_test_fail: DeviceProxy to the device under test for failure conditions.
        :param event_tracer_fail: A TangoEventTracer used to recieve subscribed change
                                  events from the device under test, for failure conditions.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:327:10: N802 function name 'test_Off' should be lowercase
    def test_Off(
         ^
tests/unit/slim/Slim_test.py:334:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the Off() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:334:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the Off() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:334:1: DAR101 Missing parameter(s) in Docstring: - mesh_config_filename
        """
        Test the Off() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:372:10: N802 function name 'test_Off_not_allowed' should be lowercase
    def test_Off_not_allowed(
         ^
tests/unit/slim/Slim_test.py:379:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the Off() command when Slim has gone offline after configuring.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:379:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the Off() command when Slim has gone offline after configuring.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:379:1: DAR101 Missing parameter(s) in Docstring: - mesh_config_filename
        """
        Test the Off() command when Slim has gone offline after configuring.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:402:10: N802 function name 'test_Off_already_off' should be lowercase
    def test_Off_already_off(
         ^
tests/unit/slim/Slim_test.py:409:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the Off() command when it is already off.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:409:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the Off() command when it is already off.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:409:1: DAR101 Missing parameter(s) in Docstring: - mesh_config_filename
        """
        Test the Off() command when it is already off.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:460:10: N802 function name 'test_SlimTest' should be lowercase
    def test_SlimTest(
         ^
tests/unit/slim/Slim_test.py:467:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the SlimTest() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:467:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the SlimTest() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:467:1: DAR101 Missing parameter(s) in Docstring: - mesh_config_filename
        """
        Test the SlimTest() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:487:10: N802 function name 'test_SlimTest_no_active_links' should be lowercase
    def test_SlimTest_no_active_links(
         ^
tests/unit/slim/Slim_test.py:494:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the SlimTest() command when the configuration does not activate any links.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:494:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the SlimTest() command when the configuration does not activate any links.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:494:1: DAR101 Missing parameter(s) in Docstring: - mesh_config_filename
        """
        Test the SlimTest() command when the configuration does not activate any links.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param mesh_config_filename: A JSON file for the configuration.
        """
^
tests/unit/slim/Slim_test.py:509:10: N802 function name 'test_SlimTest_links_unconfigured' should be lowercase
    def test_SlimTest_links_unconfigured(
         ^
tests/unit/slim/Slim_test.py:512:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim/conftest.py:34:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/slim/conftest.py:34:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/slim/conftest.py:47:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/slim/conftest.py:47:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/slim/conftest.py:71:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test. For testing failure conditions.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test for failure conditions
    """
^
tests/unit/slim/conftest.py:71:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the device under test. For testing failure conditions.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test for failure conditions
    """
^
tests/unit/slim/conftest.py:84:1: DAR101 Missing parameter(s) in Docstring: - device_under_test_fail
    """
    Fixture that returns a TangoEventTracer for the device used to test failure conditions.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test for failure conditions
    :return: TangoEventTracer
    """
^
tests/unit/slim/conftest.py:84:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for the device used to test failure conditions.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test for failure conditions
    :return: TangoEventTracer
    """
^
tests/unit/slim/conftest.py:204:1: DAR101 Missing parameter(s) in Docstring: - mock_fail_slim_link
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_slim_tx: a mock SlimTx device.
    :param mock_slim_rx: a mock SlimRx device.
    :param mock_slim_link: a mock SlimLink device.
    :param mock_fail_slim_link: a mock SlimLink device that rejects commands.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/slim/conftest.py:204:1: DAR101 Missing parameter(s) in Docstring: - mock_slim_link
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_slim_tx: a mock SlimTx device.
    :param mock_slim_rx: a mock SlimRx device.
    :param mock_slim_link: a mock SlimLink device.
    :param mock_fail_slim_link: a mock SlimLink device that rejects commands.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/slim/conftest.py:204:1: DAR101 Missing parameter(s) in Docstring: - mock_slim_rx
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_slim_tx: a mock SlimTx device.
    :param mock_slim_rx: a mock SlimRx device.
    :param mock_slim_link: a mock SlimLink device.
    :param mock_fail_slim_link: a mock SlimLink device that rejects commands.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/slim/conftest.py:204:1: DAR101 Missing parameter(s) in Docstring: - mock_slim_tx
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_slim_tx: a mock SlimTx device.
    :param mock_slim_rx: a mock SlimRx device.
    :param mock_slim_link: a mock SlimLink device.
    :param mock_fail_slim_link: a mock SlimLink device that rejects commands.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/slim/conftest.py:204:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_slim_tx: a mock SlimTx device.
    :param mock_slim_rx: a mock SlimRx device.
    :param mock_slim_link: a mock SlimLink device.
    :param mock_fail_slim_link: a mock SlimLink device that rejects commands.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/slim_link/SlimLink_test.py:47:1: DAR101 Missing parameter(s) in Docstring: - initial_mocks
        """
        A fixture that provides a test context for the SlimLink device.

        :param initial_mocks: A dictionary of initial mocks to be added to the test context.
        :return: A test context for the SlimLink device.
        """
^
tests/unit/slim_link/SlimLink_test.py:47:1: DAR301 Missing "Yields" in Docstring: - yield
        """
        A fixture that provides a test context for the SlimLink device.

        :param initial_mocks: A dictionary of initial mocks to be added to the test context.
        :return: A test context for the SlimLink device.
        """
^
tests/unit/slim_link/SlimLink_test.py:64:10: N802 function name 'test_State' should be lowercase
    def test_State(
         ^
tests/unit/slim_link/SlimLink_test.py:66:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:74:10: N802 function name 'test_Status' should be lowercase
    def test_Status(
         ^
tests/unit/slim_link/SlimLink_test.py:76:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:84:10: N802 function name 'test_adminMode' should be lowercase
    def test_adminMode(
         ^
tests/unit/slim_link/SlimLink_test.py:86:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:94:10: N802 function name 'test_Online' should be lowercase
    def test_Online(
         ^
tests/unit/slim_link/SlimLink_test.py:98:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:98:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:132:10: N802 function name 'test_ConnectTxRx' should be lowercase
    def test_ConnectTxRx(
         ^
tests/unit/slim_link/SlimLink_test.py:139:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the ConnectTxRx() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:139:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the ConnectTxRx() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:139:1: DAR101 Missing parameter(s) in Docstring: - rx_device_name
        """
        Test the ConnectTxRx() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:139:1: DAR101 Missing parameter(s) in Docstring: - tx_device_name
        """
        Test the ConnectTxRx() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:182:10: N802 function name 'test_ConnectTxRx_not_allowed' should be lowercase
    def test_ConnectTxRx_not_allowed(
         ^
tests/unit/slim_link/SlimLink_test.py:189:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the ConnectTxRx() command before the device has been started up.

        :param tx_device_name: FQDN used to create a proxy to a (mocked) SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a (mocked) SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:189:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the ConnectTxRx() command before the device has been started up.

        :param tx_device_name: FQDN used to create a proxy to a (mocked) SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a (mocked) SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:189:1: DAR101 Missing parameter(s) in Docstring: - rx_device_name
        """
        Test the ConnectTxRx() command before the device has been started up.

        :param tx_device_name: FQDN used to create a proxy to a (mocked) SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a (mocked) SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:189:1: DAR101 Missing parameter(s) in Docstring: - tx_device_name
        """
        Test the ConnectTxRx() command before the device has been started up.

        :param tx_device_name: FQDN used to create a proxy to a (mocked) SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a (mocked) SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:216:10: N802 function name 'test_ConnectTxRx_empty_device_names' should be lowercase
    def test_ConnectTxRx_empty_device_names(
         ^
tests/unit/slim_link/SlimLink_test.py:220:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:220:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:253:10: N802 function name 'test_ConnectTxRx_regenerate_idle_ctrl_word' should be lowercase
    def test_ConnectTxRx_regenerate_idle_ctrl_word(
         ^
tests/unit/slim_link/SlimLink_test.py:260:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the ConnectTxRx() command using a Tx mock that ommits the idle_ctrl_word
        attr to trigger ICW regeneration in the DUT.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:260:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the ConnectTxRx() command using a Tx mock that ommits the idle_ctrl_word
        attr to trigger ICW regeneration in the DUT.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:260:1: DAR101 Missing parameter(s) in Docstring: - rx_device_name
        """
        Test the ConnectTxRx() command using a Tx mock that ommits the idle_ctrl_word
        attr to trigger ICW regeneration in the DUT.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:260:1: DAR101 Missing parameter(s) in Docstring: - tx_device_name
        """
        Test the ConnectTxRx() command using a Tx mock that ommits the idle_ctrl_word
        attr to trigger ICW regeneration in the DUT.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:306:10: N802 function name 'test_AttrReadWrite' should be lowercase
    def test_AttrReadWrite(
         ^
tests/unit/slim_link/SlimLink_test.py:313:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test all attributes in the tango interface for readability/writability.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:313:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test all attributes in the tango interface for readability/writability.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:313:1: DAR101 Missing parameter(s) in Docstring: - rx_device_name
        """
        Test all attributes in the tango interface for readability/writability.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:313:1: DAR101 Missing parameter(s) in Docstring: - tx_device_name
        """
        Test all attributes in the tango interface for readability/writability.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:355:10: N802 function name 'test_VerifyConnection' should be lowercase
    def test_VerifyConnection(
         ^
tests/unit/slim_link/SlimLink_test.py:362:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the VerifyConnection() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:362:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the VerifyConnection() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:362:1: DAR101 Missing parameter(s) in Docstring: - rx_device_name
        """
        Test the VerifyConnection() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:362:1: DAR101 Missing parameter(s) in Docstring: - tx_device_name
        """
        Test the VerifyConnection() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:391:10: N802 function name 'test_VerifyConnection_empty_device_names' should be lowercase
    def test_VerifyConnection_empty_device_names(
         ^
tests/unit/slim_link/SlimLink_test.py:395:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:395:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:431:10: N802 function name 'test_VerifyConnection_unhealthy_link' should be lowercase
    def test_VerifyConnection_unhealthy_link(
         ^
tests/unit/slim_link/SlimLink_test.py:438:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the VerifyConnection() command with a mock that is set to fail health checks.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:438:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the VerifyConnection() command with a mock that is set to fail health checks.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:438:1: DAR101 Missing parameter(s) in Docstring: - rx_device_name
        """
        Test the VerifyConnection() command with a mock that is set to fail health checks.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:438:1: DAR101 Missing parameter(s) in Docstring: - tx_device_name
        """
        Test the VerifyConnection() command with a mock that is set to fail health checks.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:476:10: N802 function name 'test_DisconnectTxRx' should be lowercase
    def test_DisconnectTxRx(
         ^
tests/unit/slim_link/SlimLink_test.py:483:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the DisconnectTxRx() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:483:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the DisconnectTxRx() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:483:1: DAR101 Missing parameter(s) in Docstring: - rx_device_name
        """
        Test the DisconnectTxRx() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:483:1: DAR101 Missing parameter(s) in Docstring: - tx_device_name
        """
        Test the DisconnectTxRx() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:523:10: N802 function name 'test_DisconnectTxRx_not_allowed' should be lowercase
    def test_DisconnectTxRx_not_allowed(
         ^
tests/unit/slim_link/SlimLink_test.py:530:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the DisconnectTxRx() command when the device was abruptly set offline after connecting.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:530:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the DisconnectTxRx() command when the device was abruptly set offline after connecting.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:530:1: DAR101 Missing parameter(s) in Docstring: - rx_device_name
        """
        Test the DisconnectTxRx() command when the device was abruptly set offline after connecting.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:530:1: DAR101 Missing parameter(s) in Docstring: - tx_device_name
        """
        Test the DisconnectTxRx() command when the device was abruptly set offline after connecting.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:562:10: N802 function name 'test_DisconnectTxRx_empty_device_names' should be lowercase
    def test_DisconnectTxRx_empty_device_names(
         ^
tests/unit/slim_link/SlimLink_test.py:566:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:566:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:599:10: N802 function name 'test_ClearCounters' should be lowercase
    def test_ClearCounters(
         ^
tests/unit/slim_link/SlimLink_test.py:606:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the ClearCounters() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:606:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the ClearCounters() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:606:1: DAR101 Missing parameter(s) in Docstring: - rx_device_name
        """
        Test the ClearCounters() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:606:1: DAR101 Missing parameter(s) in Docstring: - tx_device_name
        """
        Test the ClearCounters() command's happy path.

        :param tx_device_name: FQDN used to create a proxy to a SlimTx device.
        :param rx_device_name: FQDN used to create a proxy to a SlimRx device.
        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/slim_link/SlimLink_test.py:630:10: N802 function name 'test_ClearCounters_empty_device_names' should be lowercase
    def test_ClearCounters_empty_device_names(
         ^
tests/unit/slim_link/SlimLink_test.py:634:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/slim_link/SlimLink_test.py:634:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/slim_link/conftest.py:33:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/slim_link/conftest.py:33:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/slim_link/conftest.py:46:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/slim_link/conftest.py:46:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/slim_link/conftest.py:126:1: DAR101 Missing parameter(s) in Docstring: - mock_slim_rx
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_slim_tx: a mock SlimTx device.
    :param mock_slim_rx: a mock SlimRx device.
    :param mock_slim_tx_regenerate: a mock SlimTx device in regenerating state.
    :param mock_slim_rx_unhealthy: a mock SlimRx device in unhealthy state.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/slim_link/conftest.py:126:1: DAR101 Missing parameter(s) in Docstring: - mock_slim_rx_unhealthy
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_slim_tx: a mock SlimTx device.
    :param mock_slim_rx: a mock SlimRx device.
    :param mock_slim_tx_regenerate: a mock SlimTx device in regenerating state.
    :param mock_slim_rx_unhealthy: a mock SlimRx device in unhealthy state.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/slim_link/conftest.py:126:1: DAR101 Missing parameter(s) in Docstring: - mock_slim_tx
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_slim_tx: a mock SlimTx device.
    :param mock_slim_rx: a mock SlimRx device.
    :param mock_slim_tx_regenerate: a mock SlimTx device in regenerating state.
    :param mock_slim_rx_unhealthy: a mock SlimRx device in unhealthy state.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/slim_link/conftest.py:126:1: DAR101 Missing parameter(s) in Docstring: - mock_slim_tx_regenerate
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_slim_tx: a mock SlimTx device.
    :param mock_slim_rx: a mock SlimRx device.
    :param mock_slim_tx_regenerate: a mock SlimTx device in regenerating state.
    :param mock_slim_rx_unhealthy: a mock SlimRx device in unhealthy state.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/slim_link/conftest.py:126:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_slim_tx: a mock SlimTx device.
    :param mock_slim_rx: a mock SlimRx device.
    :param mock_slim_tx_regenerate: a mock SlimTx device in regenerating state.
    :param mock_slim_rx_unhealthy: a mock SlimRx device in unhealthy state.

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/subarray/CbfSubarray_test.py:45:1: DAR101 Missing parameter(s) in Docstring: - initial_mocks
        """
        Fixture that creates a test context for the CbfSubarray device.

        :param initial_mocks: A dictionary of initial mocks to be used in the test context.
        :return: A test context for the CbfSubarray device.
        """
^
tests/unit/subarray/CbfSubarray_test.py:45:1: DAR301 Missing "Yields" in Docstring: - yield
        """
        Fixture that creates a test context for the CbfSubarray device.

        :param initial_mocks: A dictionary of initial mocks to be used in the test context.
        :return: A test context for the CbfSubarray device.
        """
^
tests/unit/subarray/CbfSubarray_test.py:93:10: N802 function name 'test_State' should be lowercase
    def test_State(
         ^
tests/unit/subarray/CbfSubarray_test.py:95:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/subarray/CbfSubarray_test.py:103:10: N802 function name 'test_Status' should be lowercase
    def test_Status(
         ^
tests/unit/subarray/CbfSubarray_test.py:105:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/subarray/CbfSubarray_test.py:113:10: N802 function name 'test_adminMode' should be lowercase
    def test_adminMode(
         ^
tests/unit/subarray/CbfSubarray_test.py:115:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/subarray/CbfSubarray_test.py:127:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/subarray/CbfSubarray_test.py:127:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/subarray/CbfSubarray_test.py:187:10: N802 function name 'test_Add_Remove_Receptors' should be lowercase
    def test_Add_Remove_Receptors(
         ^
tests/unit/subarray/CbfSubarray_test.py:195:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the AddReceptors(), RemoveReceptors(),
        and RemoveAllReceptors() commands' happy paths.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param remove_all: False to use RemoveReceptors, True for RemoveAllReceptors
        :param receptors_to_remove: list of DISH IDs to remove from subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:195:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the AddReceptors(), RemoveReceptors(),
        and RemoveAllReceptors() commands' happy paths.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param remove_all: False to use RemoveReceptors, True for RemoveAllReceptors
        :param receptors_to_remove: list of DISH IDs to remove from subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:195:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test the AddReceptors(), RemoveReceptors(),
        and RemoveAllReceptors() commands' happy paths.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param remove_all: False to use RemoveReceptors, True for RemoveAllReceptors
        :param receptors_to_remove: list of DISH IDs to remove from subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:195:1: DAR101 Missing parameter(s) in Docstring: - receptors_to_remove
        """
        Test the AddReceptors(), RemoveReceptors(),
        and RemoveAllReceptors() commands' happy paths.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param remove_all: False to use RemoveReceptors, True for RemoveAllReceptors
        :param receptors_to_remove: list of DISH IDs to remove from subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:195:1: DAR101 Missing parameter(s) in Docstring: - remove_all
        """
        Test the AddReceptors(), RemoveReceptors(),
        and RemoveAllReceptors() commands' happy paths.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param remove_all: False to use RemoveReceptors, True for RemoveAllReceptors
        :param receptors_to_remove: list of DISH IDs to remove from subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:359:10: N802 function name 'test_AddReceptors_invalid' should be lowercase
    def test_AddReceptors_invalid(
         ^
tests/unit/subarray/CbfSubarray_test.py:365:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the AddReceptors() command when a receptor ID is out of valid range.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param invalid_receptor: invalid DISH ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:365:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the AddReceptors() command when a receptor ID is out of valid range.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param invalid_receptor: invalid DISH ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:365:1: DAR101 Missing parameter(s) in Docstring: - invalid_receptor
        """
        Test the AddReceptors() command when a receptor ID is out of valid range.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param invalid_receptor: invalid DISH ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:419:10: N802 function name 'test_RemoveReceptors_not_assigned' should be lowercase
    def test_RemoveReceptors_not_assigned(
         ^
tests/unit/subarray/CbfSubarray_test.py:426:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the RemoveReceptors() command when one of the receptors to remove
        was not assigned to the subarray.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param unassigned_receptors: unassigned DISH IDs
        """
^
tests/unit/subarray/CbfSubarray_test.py:426:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the RemoveReceptors() command when one of the receptors to remove
        was not assigned to the subarray.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param unassigned_receptors: unassigned DISH IDs
        """
^
tests/unit/subarray/CbfSubarray_test.py:426:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test the RemoveReceptors() command when one of the receptors to remove
        was not assigned to the subarray.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param unassigned_receptors: unassigned DISH IDs
        """
^
tests/unit/subarray/CbfSubarray_test.py:426:1: DAR101 Missing parameter(s) in Docstring: - unassigned_receptors
        """
        Test the RemoveReceptors() command when one of the receptors to remove
        was not assigned to the subarray.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param unassigned_receptors: unassigned DISH IDs
        """
^
tests/unit/subarray/CbfSubarray_test.py:506:10: N802 function name 'test_RemoveReceptors_invalid' should be lowercase
    def test_RemoveReceptors_invalid(
         ^
tests/unit/subarray/CbfSubarray_test.py:513:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the RemoveReceptors() command when one of the receptor IDs to be
        removed is not in valid range.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param invalid_receptor: invalid DISH ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:513:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the RemoveReceptors() command when one of the receptor IDs to be
        removed is not in valid range.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param invalid_receptor: invalid DISH ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:513:1: DAR101 Missing parameter(s) in Docstring: - invalid_receptor
        """
        Test the RemoveReceptors() command when one of the receptor IDs to be
        removed is not in valid range.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param invalid_receptor: invalid DISH ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:513:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test the RemoveReceptors() command when one of the receptor IDs to be
        removed is not in valid range.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to assign to subarray
        :param invalid_receptor: invalid DISH ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:591:10: N802 function name 'test_RemoveAllReceptors_not_allowed' should be lowercase
    def test_RemoveAllReceptors_not_allowed(
         ^
tests/unit/subarray/CbfSubarray_test.py:597:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the RemoveReceptors() and RemoveAllReceptors()
        commands when subarray is in ObsState.EMPTY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to remove from subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:597:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the RemoveReceptors() and RemoveAllReceptors()
        commands when subarray is in ObsState.EMPTY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to remove from subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:597:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test the RemoveReceptors() and RemoveAllReceptors()
        commands when subarray is in ObsState.EMPTY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param receptors: list of DISH IDs to remove from subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:663:10: N802 function name 'test_Scan' should be lowercase
    def test_Scan(
         ^
tests/unit/subarray/CbfSubarray_test.py:672:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test the Scan() command's happy path with a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:672:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the Scan() command's happy path with a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:672:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the Scan() command's happy path with a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:672:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test the Scan() command's happy path with a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:672:1: DAR101 Missing parameter(s) in Docstring: - scan_file_name
        """
        Test the Scan() command's happy path with a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:753:10: N802 function name 'test_Scan_reconfigure' should be lowercase
    def test_Scan_reconfigure(
         ^
tests/unit/subarray/CbfSubarray_test.py:762:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test subarrays's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:762:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test subarrays's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:762:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test subarrays's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:762:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test subarrays's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:762:1: DAR101 Missing parameter(s) in Docstring: - scan_file_name
        """
        Test subarrays's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:876:10: N802 function name 'test_Abort_from_ready' should be lowercase
    def test_Abort_from_ready(
         ^
tests/unit/subarray/CbfSubarray_test.py:884:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test the Abort() command from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:884:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the Abort() command from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:884:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the Abort() command from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:884:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test the Abort() command from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:957:10: N802 function name 'test_Abort_from_scanning' should be lowercase
    def test_Abort_from_scanning(
         ^
tests/unit/subarray/CbfSubarray_test.py:966:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test the Abort() command from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:966:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the Abort() command from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:966:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the Abort() command from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:966:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test the Abort() command from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:966:1: DAR101 Missing parameter(s) in Docstring: - scan_file_name
        """
        Test the Abort() command from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:1044:10: N802 function name 'test_ObsReset_abort_from_ready' should be lowercase
    def test_ObsReset_abort_from_ready(
         ^
tests/unit/subarray/CbfSubarray_test.py:1052:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test the ObsReset() command to ObsState.IDLE from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:1052:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the ObsReset() command to ObsState.IDLE from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:1052:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the ObsReset() command to ObsState.IDLE from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:1052:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test the ObsReset() command to ObsState.IDLE from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:1103:10: N802 function name 'test_ObsReset_abort_from_scanning' should be lowercase
    def test_ObsReset_abort_from_scanning(
         ^
tests/unit/subarray/CbfSubarray_test.py:1112:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test the ObsReset() command to ObsState.IDLE from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:1112:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the ObsReset() command to ObsState.IDLE from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:1112:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the ObsReset() command to ObsState.IDLE from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:1112:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test the ObsReset() command to ObsState.IDLE from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:1112:1: DAR101 Missing parameter(s) in Docstring: - scan_file_name
        """
        Test the ObsReset() command to ObsState.IDLE from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:1165:10: N802 function name 'test_Abort_Restart_from_ready' should be lowercase
    def test_Abort_Restart_from_ready(
         ^
tests/unit/subarray/CbfSubarray_test.py:1173:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test the Restart() command to ObsState.EMPTY from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:1173:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the Restart() command to ObsState.EMPTY from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:1173:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the Restart() command to ObsState.EMPTY from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:1173:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test the Restart() command to ObsState.EMPTY from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        """
^
tests/unit/subarray/CbfSubarray_test.py:1225:10: N802 function name 'test_Abort_Restart_from_scanning' should be lowercase
    def test_Abort_Restart_from_scanning(
         ^
tests/unit/subarray/CbfSubarray_test.py:1234:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test the Restart() command to ObsState.EMPTY from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:1234:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the Restart() command to ObsState.EMPTY from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:1234:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the Restart() command to ObsState.EMPTY from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:1234:1: DAR101 Missing parameter(s) in Docstring: - receptors
        """
        Test the Restart() command to ObsState.EMPTY from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/CbfSubarray_test.py:1234:1: DAR101 Missing parameter(s) in Docstring: - scan_file_name
        """
        Test the Restart() command to ObsState.EMPTY from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration
        :param receptors: list of DISH IDs to assign to subarray
        :param scan_file_name: file name for the scan ID
        """
^
tests/unit/subarray/conftest.py:35:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/subarray/conftest.py:35:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/subarray/conftest.py:48:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/subarray/conftest.py:48:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/subarray/conftest.py:223:1: DAR101 Missing parameter(s) in Docstring: - mock_controller
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_tm: a mock TM.
    :param mock_controller: a mock CbfController.
    :param mock_vcc_builder: a mock Vcc builder.
    :param mock_fsp: a mock Fsp.
    :param mock_fsp_subarray: a mock FspCorrSubarray.
    :param mock_talon_board: a mock TalonBoard.
    :param mock_vis_mesh: a mock SlimMesh.
    :param mock_host_lut_s1: a mock HostLutStage1.
    :param mock_host_lut_s2: a mock HostLutStage2.
    :param mock_spead_desc: a mock SpeadDescriptor.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/subarray/conftest.py:223:1: DAR101 Missing parameter(s) in Docstring: - mock_fsp
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_tm: a mock TM.
    :param mock_controller: a mock CbfController.
    :param mock_vcc_builder: a mock Vcc builder.
    :param mock_fsp: a mock Fsp.
    :param mock_fsp_subarray: a mock FspCorrSubarray.
    :param mock_talon_board: a mock TalonBoard.
    :param mock_vis_mesh: a mock SlimMesh.
    :param mock_host_lut_s1: a mock HostLutStage1.
    :param mock_host_lut_s2: a mock HostLutStage2.
    :param mock_spead_desc: a mock SpeadDescriptor.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/subarray/conftest.py:223:1: DAR101 Missing parameter(s) in Docstring: - mock_fsp_subarray
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_tm: a mock TM.
    :param mock_controller: a mock CbfController.
    :param mock_vcc_builder: a mock Vcc builder.
    :param mock_fsp: a mock Fsp.
    :param mock_fsp_subarray: a mock FspCorrSubarray.
    :param mock_talon_board: a mock TalonBoard.
    :param mock_vis_mesh: a mock SlimMesh.
    :param mock_host_lut_s1: a mock HostLutStage1.
    :param mock_host_lut_s2: a mock HostLutStage2.
    :param mock_spead_desc: a mock SpeadDescriptor.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/subarray/conftest.py:223:1: DAR101 Missing parameter(s) in Docstring: - mock_host_lut_s1
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_tm: a mock TM.
    :param mock_controller: a mock CbfController.
    :param mock_vcc_builder: a mock Vcc builder.
    :param mock_fsp: a mock Fsp.
    :param mock_fsp_subarray: a mock FspCorrSubarray.
    :param mock_talon_board: a mock TalonBoard.
    :param mock_vis_mesh: a mock SlimMesh.
    :param mock_host_lut_s1: a mock HostLutStage1.
    :param mock_host_lut_s2: a mock HostLutStage2.
    :param mock_spead_desc: a mock SpeadDescriptor.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/subarray/conftest.py:223:1: DAR101 Missing parameter(s) in Docstring: - mock_host_lut_s2
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_tm: a mock TM.
    :param mock_controller: a mock CbfController.
    :param mock_vcc_builder: a mock Vcc builder.
    :param mock_fsp: a mock Fsp.
    :param mock_fsp_subarray: a mock FspCorrSubarray.
    :param mock_talon_board: a mock TalonBoard.
    :param mock_vis_mesh: a mock SlimMesh.
    :param mock_host_lut_s1: a mock HostLutStage1.
    :param mock_host_lut_s2: a mock HostLutStage2.
    :param mock_spead_desc: a mock SpeadDescriptor.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/subarray/conftest.py:223:1: DAR101 Missing parameter(s) in Docstring: - mock_spead_desc
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_tm: a mock TM.
    :param mock_controller: a mock CbfController.
    :param mock_vcc_builder: a mock Vcc builder.
    :param mock_fsp: a mock Fsp.
    :param mock_fsp_subarray: a mock FspCorrSubarray.
    :param mock_talon_board: a mock TalonBoard.
    :param mock_vis_mesh: a mock SlimMesh.
    :param mock_host_lut_s1: a mock HostLutStage1.
    :param mock_host_lut_s2: a mock HostLutStage2.
    :param mock_spead_desc: a mock SpeadDescriptor.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/subarray/conftest.py:223:1: DAR101 Missing parameter(s) in Docstring: - mock_talon_board
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_tm: a mock TM.
    :param mock_controller: a mock CbfController.
    :param mock_vcc_builder: a mock Vcc builder.
    :param mock_fsp: a mock Fsp.
    :param mock_fsp_subarray: a mock FspCorrSubarray.
    :param mock_talon_board: a mock TalonBoard.
    :param mock_vis_mesh: a mock SlimMesh.
    :param mock_host_lut_s1: a mock HostLutStage1.
    :param mock_host_lut_s2: a mock HostLutStage2.
    :param mock_spead_desc: a mock SpeadDescriptor.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/subarray/conftest.py:223:1: DAR101 Missing parameter(s) in Docstring: - mock_tm
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_tm: a mock TM.
    :param mock_controller: a mock CbfController.
    :param mock_vcc_builder: a mock Vcc builder.
    :param mock_fsp: a mock Fsp.
    :param mock_fsp_subarray: a mock FspCorrSubarray.
    :param mock_talon_board: a mock TalonBoard.
    :param mock_vis_mesh: a mock SlimMesh.
    :param mock_host_lut_s1: a mock HostLutStage1.
    :param mock_host_lut_s2: a mock HostLutStage2.
    :param mock_spead_desc: a mock SpeadDescriptor.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/subarray/conftest.py:223:1: DAR101 Missing parameter(s) in Docstring: - mock_vcc_builder
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_tm: a mock TM.
    :param mock_controller: a mock CbfController.
    :param mock_vcc_builder: a mock Vcc builder.
    :param mock_fsp: a mock Fsp.
    :param mock_fsp_subarray: a mock FspCorrSubarray.
    :param mock_talon_board: a mock TalonBoard.
    :param mock_vis_mesh: a mock SlimMesh.
    :param mock_host_lut_s1: a mock HostLutStage1.
    :param mock_host_lut_s2: a mock HostLutStage2.
    :param mock_spead_desc: a mock SpeadDescriptor.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/subarray/conftest.py:223:1: DAR101 Missing parameter(s) in Docstring: - mock_vis_mesh
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_tm: a mock TM.
    :param mock_controller: a mock CbfController.
    :param mock_vcc_builder: a mock Vcc builder.
    :param mock_fsp: a mock Fsp.
    :param mock_fsp_subarray: a mock FspCorrSubarray.
    :param mock_talon_board: a mock TalonBoard.
    :param mock_vis_mesh: a mock SlimMesh.
    :param mock_host_lut_s1: a mock HostLutStage1.
    :param mock_host_lut_s2: a mock HostLutStage2.
    :param mock_spead_desc: a mock SpeadDescriptor.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/subarray/conftest.py:223:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a dictionary of proxy mocks to pre-register.

    :param mock_tm: a mock TM.
    :param mock_controller: a mock CbfController.
    :param mock_vcc_builder: a mock Vcc builder.
    :param mock_fsp: a mock Fsp.
    :param mock_fsp_subarray: a mock FspCorrSubarray.
    :param mock_talon_board: a mock TalonBoard.
    :param mock_vis_mesh: a mock SlimMesh.
    :param mock_host_lut_s1: a mock HostLutStage1.
    :param mock_host_lut_s2: a mock HostLutStage2.
    :param mock_spead_desc: a mock SpeadDescriptor.

    :return: a dictionary of proxy mocks to pre-register.
    """
^
tests/unit/talon_board/TalonBoard_test.py:51:1: DAR101 Missing parameter(s) in Docstring: - initial_mocks
        """
        Fixture that creates a test context for the TalonBoard device.

        :param request: the pytest request object
        :param monkeymodule: the pytest monkeypatch object
        :param initial_mocks: A dictionary of device mocks to be added to the test context.
        :return: A test context for the TalonBoard device.
        """
^
tests/unit/talon_board/TalonBoard_test.py:51:1: DAR101 Missing parameter(s) in Docstring: - monkeymodule
        """
        Fixture that creates a test context for the TalonBoard device.

        :param request: the pytest request object
        :param monkeymodule: the pytest monkeypatch object
        :param initial_mocks: A dictionary of device mocks to be added to the test context.
        :return: A test context for the TalonBoard device.
        """
^
tests/unit/talon_board/TalonBoard_test.py:51:1: DAR101 Missing parameter(s) in Docstring: - request
        """
        Fixture that creates a test context for the TalonBoard device.

        :param request: the pytest request object
        :param monkeymodule: the pytest monkeypatch object
        :param initial_mocks: A dictionary of device mocks to be added to the test context.
        :return: A test context for the TalonBoard device.
        """
^
tests/unit/talon_board/TalonBoard_test.py:51:1: DAR301 Missing "Yields" in Docstring: - yield
        """
        Fixture that creates a test context for the TalonBoard device.

        :param request: the pytest request object
        :param monkeymodule: the pytest monkeypatch object
        :param initial_mocks: A dictionary of device mocks to be added to the test context.
        :return: A test context for the TalonBoard device.
        """
^
tests/unit/talon_board/TalonBoard_test.py:62:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            """
            Replace requests.request method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/talon_board/TalonBoard_test.py:62:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Replace requests.request method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/talon_board/TalonBoard_test.py:62:1: DAR101 Missing parameter(s) in Docstring: - self
            """
            Replace requests.request method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/talon_board/TalonBoard_test.py:75:1: DAR101 Missing parameter(s) in Docstring: - **kwargs
            """
            Replace asyncio.run method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/talon_board/TalonBoard_test.py:75:1: DAR101 Missing parameter(s) in Docstring: - *args
            """
            Replace asyncio.run method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/talon_board/TalonBoard_test.py:75:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Replace asyncio.run method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/talon_board/TalonBoard_test.py:75:1: DAR101 Missing parameter(s) in Docstring: - self
            """
            Replace asyncio.run method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/talon_board/TalonBoard_test.py:86:1: DAR201 Missing "Returns" in Docstring: - return
            """
            Replace requests.request method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/talon_board/TalonBoard_test.py:86:1: DAR101 Missing parameter(s) in Docstring: - self
            """
            Replace requests.request method with a mock method.

            :param url: the URL
            :param kwargs: other keyword args

            :return: a response
            """
^
tests/unit/talon_board/TalonBoard_test.py:140:10: N802 function name 'test_State' should be lowercase
    def test_State(
         ^
tests/unit/talon_board/TalonBoard_test.py:143:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the State attribute just after device initialization.

        :param device_under_test: DeviceProxy to the device under test.
        """
^
tests/unit/talon_board/TalonBoard_test.py:159:10: N802 function name 'test_Status' should be lowercase
    def test_Status(
         ^
tests/unit/talon_board/TalonBoard_test.py:162:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the Status attribute just after device initialization.

        :param device_under_test: DeviceProxy to the device under test.
        """
^
tests/unit/talon_board/TalonBoard_test.py:178:10: N802 function name 'test_adminMode' should be lowercase
    def test_adminMode(
         ^
tests/unit/talon_board/TalonBoard_test.py:181:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the adminMode attribute just after device initialization.

        :param device_under_test: DeviceProxy to the device under test.
        """
^
tests/unit/talon_board/TalonBoard_test.py:197:10: N802 function name 'test_Online' should be lowercase
    def test_Online(
         ^
tests/unit/talon_board/TalonBoard_test.py:202:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test that the devState is appropriately set after device startup.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/talon_board/TalonBoard_test.py:202:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test that the devState is appropriately set after device startup.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/talon_board/TalonBoard_test.py:236:10: N802 function name 'test_Online_correct_state_when_missing_property' should be lowercase
    def test_Online_correct_state_when_missing_property(
         ^
tests/unit/talon_board/TalonBoard_test.py:241:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test that the State attribute is appropriately set after device startup when there is a device property misisng form charts.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/talon_board/TalonBoard_test.py:241:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test that the State attribute is appropriately set after device startup when there is a device property misisng form charts.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/talon_board/TalonBoard_test.py:275:10: N802 function name 'test_ReadWriteAttributes' should be lowercase
    def test_ReadWriteAttributes(
         ^
tests/unit/talon_board/TalonBoard_test.py:280:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test the that all attributes can be read/written correctly.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/talon_board/TalonBoard_test.py:280:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test the that all attributes can be read/written correctly.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/talon_board/conftest.py:33:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/talon_board/conftest.py:33:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/talon_board/conftest.py:46:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/talon_board/conftest.py:46:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/talon_board/conftest.py:122:1: DAR101 Missing parameter(s) in Docstring: - mock_ethernet_100g
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_talon_sysid: mock for talon sysid device
    :param mock_ethernet_100g: mock for talon 100g ethernet device
    :param mock_talon_status: mock for talon status device
    :param mock_hps_master: mock for hps master device
    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/talon_board/conftest.py:122:1: DAR101 Missing parameter(s) in Docstring: - mock_hps_master
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_talon_sysid: mock for talon sysid device
    :param mock_ethernet_100g: mock for talon 100g ethernet device
    :param mock_talon_status: mock for talon status device
    :param mock_hps_master: mock for hps master device
    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/talon_board/conftest.py:122:1: DAR101 Missing parameter(s) in Docstring: - mock_talon_status
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_talon_sysid: mock for talon sysid device
    :param mock_ethernet_100g: mock for talon 100g ethernet device
    :param mock_talon_status: mock for talon status device
    :param mock_hps_master: mock for hps master device
    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/talon_board/conftest.py:122:1: DAR101 Missing parameter(s) in Docstring: - mock_talon_sysid
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_talon_sysid: mock for talon sysid device
    :param mock_ethernet_100g: mock for talon 100g ethernet device
    :param mock_talon_status: mock for talon status device
    :param mock_hps_master: mock for hps master device
    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/talon_board/conftest.py:122:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_talon_sysid: mock for talon sysid device
    :param mock_ethernet_100g: mock for talon 100g ethernet device
    :param mock_talon_status: mock for talon status device
    :param mock_hps_master: mock for hps master device
    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/talon_lru/TalonLRU_test.py:47:1: DAR101 Missing parameter(s) in Docstring: - initial_mocks
        """
        Fixture that creates a test context for the TalonLRU device.

        :param initial_mocks: A dictionary of initial mocks to be added to the test context.
        :return: A test context for the TalonLRU device.
        """
^
tests/unit/talon_lru/TalonLRU_test.py:47:1: DAR301 Missing "Yields" in Docstring: - yield
        """
        Fixture that creates a test context for the TalonLRU device.

        :param initial_mocks: A dictionary of initial mocks to be added to the test context.
        :return: A test context for the TalonLRU device.
        """
^
tests/unit/talon_lru/TalonLRU_test.py:71:10: N802 function name 'test_State' should be lowercase
    def test_State(
         ^
tests/unit/talon_lru/TalonLRU_test.py:76:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:76:1: DAR101 Missing parameter(s) in Docstring: - power_switch_1
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:76:1: DAR101 Missing parameter(s) in Docstring: - power_switch_2
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:96:10: N802 function name 'test_Status' should be lowercase
    def test_Status(
         ^
tests/unit/talon_lru/TalonLRU_test.py:101:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:101:1: DAR101 Missing parameter(s) in Docstring: - power_switch_1
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:101:1: DAR101 Missing parameter(s) in Docstring: - power_switch_2
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:121:10: N802 function name 'test_adminMode' should be lowercase
    def test_adminMode(
         ^
tests/unit/talon_lru/TalonLRU_test.py:126:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:126:1: DAR101 Missing parameter(s) in Docstring: - power_switch_1
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:126:1: DAR101 Missing parameter(s) in Docstring: - power_switch_2
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:150:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:150:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:181:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:181:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:181:1: DAR101 Missing parameter(s) in Docstring: - power_switch_1
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:181:1: DAR101 Missing parameter(s) in Docstring: - power_switch_2
    ) -> None:
^
tests/unit/talon_lru/TalonLRU_test.py:204:10: N802 function name 'test_On' should be lowercase
    def test_On(
         ^
tests/unit/talon_lru/TalonLRU_test.py:211:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests the On() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param power_switch_1: a mock power switch device.
        :param power_switch_2: a mock power switch device.
        """
^
tests/unit/talon_lru/TalonLRU_test.py:211:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests the On() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param power_switch_1: a mock power switch device.
        :param power_switch_2: a mock power switch device.
        """
^
tests/unit/talon_lru/TalonLRU_test.py:211:1: DAR101 Missing parameter(s) in Docstring: - power_switch_1
        """
        Tests the On() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param power_switch_1: a mock power switch device.
        :param power_switch_2: a mock power switch device.
        """
^
tests/unit/talon_lru/TalonLRU_test.py:211:1: DAR101 Missing parameter(s) in Docstring: - power_switch_2
        """
        Tests the On() command's happy path.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param power_switch_1: a mock power switch device.
        :param power_switch_2: a mock power switch device.
        """
^
tests/unit/talon_lru/TalonLRU_test.py:276:10: N802 function name 'test_Off_from_off' should be lowercase
    def test_Off_from_off(
         ^
tests/unit/talon_lru/TalonLRU_test.py:281:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests that the Off command from an off state behaves appropriately.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/talon_lru/TalonLRU_test.py:281:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Tests that the Off command from an off state behaves appropriately.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        """
^
tests/unit/talon_lru/TalonLRU_test.py:307:10: N802 function name 'test_On_Off' should be lowercase
    def test_On_Off(
         ^
tests/unit/talon_lru/TalonLRU_test.py:314:1: DAR101 Missing parameter(s) in Docstring: - change_event_callbacks
        """
        Tests that the On command followed by the Off command works appropriately.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param power_switch_1: a mock power switch device.
        :param power_switch_2: a mock power switch device.
        """
^
tests/unit/talon_lru/TalonLRU_test.py:314:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Tests that the On command followed by the Off command works appropriately.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param power_switch_1: a mock power switch device.
        :param power_switch_2: a mock power switch device.
        """
^
tests/unit/talon_lru/TalonLRU_test.py:314:1: DAR101 Missing parameter(s) in Docstring: - power_switch_1
        """
        Tests that the On command followed by the Off command works appropriately.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param power_switch_1: a mock power switch device.
        :param power_switch_2: a mock power switch device.
        """
^
tests/unit/talon_lru/TalonLRU_test.py:314:1: DAR101 Missing parameter(s) in Docstring: - power_switch_2
        """
        Tests that the On command followed by the Off command works appropriately.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param power_switch_1: a mock power switch device.
        :param power_switch_2: a mock power switch device.
        """
^
tests/unit/talon_lru/conftest.py:29:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/talon_lru/conftest.py:29:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy for the device under test
    """
^
tests/unit/talon_lru/conftest.py:42:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the power switch mock
    """
^
tests/unit/talon_lru/conftest.py:42:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the power switch mock
    """
^
tests/unit/talon_lru/conftest.py:52:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the power switch mock
    """
^
tests/unit/talon_lru/conftest.py:52:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the power switch mock
    """
^
tests/unit/talon_lru/conftest.py:62:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/talon_lru/conftest.py:62:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy for the device under test
    :return: TangoEventTracer
    """
^
tests/unit/talon_lru/conftest.py:102:1: DAR101 Missing parameter(s) in Docstring: - request
    """
    Get a mock power switch device. This fixture is parameterized to
    mock different pass / failure scenarios.

    :param request: the pytest request fixture which holds information about the
                    parameterization of this fixture
    :return: a mock PowerSwitch device
    """
^
tests/unit/talon_lru/conftest.py:102:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Get a mock power switch device. This fixture is parameterized to
    mock different pass / failure scenarios.

    :param request: the pytest request fixture which holds information about the
                    parameterization of this fixture
    :return: a mock PowerSwitch device
    """
^
tests/unit/talon_lru/conftest.py:115:1: DAR101 Missing parameter(s) in Docstring: - request
    """
    Get a mock power switch device. This fixture is parameterized to
    mock different pass / failure scenarios.

    :param request: the pytest request fixture which holds information about the
                    parameterization of this fixture
    :return: a mock PowerSwitch device
    """
^
tests/unit/talon_lru/conftest.py:115:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Get a mock power switch device. This fixture is parameterized to
    mock different pass / failure scenarios.

    :param request: the pytest request fixture which holds information about the
                    parameterization of this fixture
    :return: a mock PowerSwitch device
    """
^
tests/unit/talon_lru/conftest.py:126:1: DAR101 Missing parameter(s) in Docstring: - param
    """
    Get a mock power switch device with the specified parameterization.

    :param param: parameterization string that impacts the mocked behaviour
    """
^
tests/unit/talon_lru/conftest.py:126:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Get a mock power switch device with the specified parameterization.

    :param param: parameterization string that impacts the mocked behaviour
    """
^
tests/unit/talon_lru/conftest.py:164:1: DAR101 Missing parameter(s) in Docstring: - mock_power_switch_1
    """
    Return a dictionary of device proxy mocks to pre-register.
    Althought these mocks are not explicitly used in TalonLRU_test.py,
    they are required to be pre-registered in the test harness.
    TalonLRU device only uses the mock's 3 digit device name
    to create the device proxy rather then full FQDN.

    :param mock_power_switch_1: a mock power switch device that simulates both successful and failed commands
    :param mock_power_switch_2: a mock power switch device that simulates both successful and failed commands
    :param mock_talon_board: a mock talon board

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/talon_lru/conftest.py:164:1: DAR101 Missing parameter(s) in Docstring: - mock_power_switch_2
    """
    Return a dictionary of device proxy mocks to pre-register.
    Althought these mocks are not explicitly used in TalonLRU_test.py,
    they are required to be pre-registered in the test harness.
    TalonLRU device only uses the mock's 3 digit device name
    to create the device proxy rather then full FQDN.

    :param mock_power_switch_1: a mock power switch device that simulates both successful and failed commands
    :param mock_power_switch_2: a mock power switch device that simulates both successful and failed commands
    :param mock_talon_board: a mock talon board

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/talon_lru/conftest.py:164:1: DAR101 Missing parameter(s) in Docstring: - mock_talon_board
    """
    Return a dictionary of device proxy mocks to pre-register.
    Althought these mocks are not explicitly used in TalonLRU_test.py,
    they are required to be pre-registered in the test harness.
    TalonLRU device only uses the mock's 3 digit device name
    to create the device proxy rather then full FQDN.

    :param mock_power_switch_1: a mock power switch device that simulates both successful and failed commands
    :param mock_power_switch_2: a mock power switch device that simulates both successful and failed commands
    :param mock_talon_board: a mock talon board

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/talon_lru/conftest.py:164:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a dictionary of device proxy mocks to pre-register.
    Althought these mocks are not explicitly used in TalonLRU_test.py,
    they are required to be pre-registered in the test harness.
    TalonLRU device only uses the mock's 3 digit device name
    to create the device proxy rather then full FQDN.

    :param mock_power_switch_1: a mock power switch device that simulates both successful and failed commands
    :param mock_power_switch_2: a mock power switch device that simulates both successful and failed commands
    :param mock_talon_board: a mock talon board

    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/vcc/Vcc_test.py:54:1: DAR101 Missing parameter(s) in Docstring: - initial_mocks
        """
        Fixture that creates a test context for the Vcc device.

        :param initial_mocks: A dictionary of initial mocks to be used in the test context.
        :return: A test context for the Vcc device.
        """
^
tests/unit/vcc/Vcc_test.py:54:1: DAR301 Missing "Yields" in Docstring: - yield
        """
        Fixture that creates a test context for the Vcc device.

        :param initial_mocks: A dictionary of initial mocks to be used in the test context.
        :return: A test context for the Vcc device.
        """
^
tests/unit/vcc/Vcc_test.py:83:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> bool:
^
tests/unit/vcc/Vcc_test.py:83:1: DAR201 Missing "Returns" in Docstring: - return
    ) -> bool:
^
tests/unit/vcc/Vcc_test.py:94:10: N802 function name 'test_State' should be lowercase
    def test_State(
         ^
tests/unit/vcc/Vcc_test.py:96:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/vcc/Vcc_test.py:104:10: N802 function name 'test_subarrayMembership' should be lowercase
    def test_subarrayMembership(
         ^
tests/unit/vcc/Vcc_test.py:108:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/vcc/Vcc_test.py:108:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/vcc/Vcc_test.py:129:10: N802 function name 'test_Status' should be lowercase
    def test_Status(
         ^
tests/unit/vcc/Vcc_test.py:131:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/vcc/Vcc_test.py:139:10: N802 function name 'test_adminMode' should be lowercase
    def test_adminMode(
         ^
tests/unit/vcc/Vcc_test.py:141:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/vcc/Vcc_test.py:149:10: N802 function name 'test_Online' should be lowercase
    def test_Online(
         ^
tests/unit/vcc/Vcc_test.py:153:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    ) -> None:
^
tests/unit/vcc/Vcc_test.py:153:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
    ) -> None:
^
tests/unit/vcc/Vcc_test.py:194:10: N802 function name 'test_ConfigureBand' should be lowercase
    def test_ConfigureBand(
         ^
tests/unit/vcc/Vcc_test.py:201:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test ConfigureBand with both failing and passing configurations.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param frequency_band: The frequency band to configure.
        :param success: A parameterized value used to test success and failure conditions.
        """
^
tests/unit/vcc/Vcc_test.py:201:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test ConfigureBand with both failing and passing configurations.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param frequency_band: The frequency band to configure.
        :param success: A parameterized value used to test success and failure conditions.
        """
^
tests/unit/vcc/Vcc_test.py:201:1: DAR101 Missing parameter(s) in Docstring: - frequency_band
        """
        Test ConfigureBand with both failing and passing configurations.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param frequency_band: The frequency band to configure.
        :param success: A parameterized value used to test success and failure conditions.
        """
^
tests/unit/vcc/Vcc_test.py:201:1: DAR101 Missing parameter(s) in Docstring: - success
        """
        Test ConfigureBand with both failing and passing configurations.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param frequency_band: The frequency band to configure.
        :param success: A parameterized value used to test success and failure conditions.
        """
^
tests/unit/vcc/Vcc_test.py:267:10: N802 function name 'test_Scan' should be lowercase
    def test_Scan(
         ^
tests/unit/vcc/Vcc_test.py:274:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/Vcc_test.py:274:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/Vcc_test.py:274:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/Vcc_test.py:274:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test a minimal successful scan configuration.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/Vcc_test.py:369:10: N802 function name 'test_Scan_reconfigure' should be lowercase
    def test_Scan_reconfigure(
         ^
tests/unit/vcc/Vcc_test.py:376:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test Vcc's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/Vcc_test.py:376:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test Vcc's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/Vcc_test.py:376:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test Vcc's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/Vcc_test.py:376:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test Vcc's ability to reconfigure and run multiple scans.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/Vcc_test.py:531:10: N802 function name 'test_Abort_from_ready' should be lowercase
    def test_Abort_from_ready(
         ^
tests/unit/vcc/Vcc_test.py:537:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test Abort from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        """
^
tests/unit/vcc/Vcc_test.py:537:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test Abort from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        """
^
tests/unit/vcc/Vcc_test.py:537:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test Abort from ObsState.READY.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        """
^
tests/unit/vcc/Vcc_test.py:680:10: N802 function name 'test_Abort_from_scanning' should be lowercase
    def test_Abort_from_scanning(
         ^
tests/unit/vcc/Vcc_test.py:687:1: DAR101 Missing parameter(s) in Docstring: - config_file_name
        """
        Test Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/Vcc_test.py:687:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
        """
        Test Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/Vcc_test.py:687:1: DAR101 Missing parameter(s) in Docstring: - event_tracer
        """
        Test Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/Vcc_test.py:687:1: DAR101 Missing parameter(s) in Docstring: - scan_id
        """
        Test Abort from ObsState.SCANNING.

        :param device_under_test: DeviceProxy to the device under test.
        :param event_tracer: A TangoEventTracer used to recieve subscribed change
                             events from the device under test.
        :param config_file_name: file name for the configuration.
        :param scan_id: An identifier for the scan operation.
        """
^
tests/unit/vcc/conftest.py:28:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy to device under test
    """
^
tests/unit/vcc/conftest.py:28:1: DAR101 Missing parameter(s) in Docstring: - test_context
    """
    Fixture that returns the device under test.

    :param test_context: the context in which the tests run
    :return: the DeviceProxy to device under test
    """
^
tests/unit/vcc/conftest.py:41:1: DAR101 Missing parameter(s) in Docstring: - device_under_test
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy to device under test
    :return: TangoEventTracer
    """
^
tests/unit/vcc/conftest.py:41:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Fixture that returns a TangoEventTracer for pertinent devices.
    Takes as parameter all required device proxy fixtures for this test module.

    :param device_under_test: the DeviceProxy to device under test
    :return: TangoEventTracer
    """
^
tests/unit/vcc/conftest.py:92:1: DAR101 Missing parameter(s) in Docstring: - mock_vcc_band
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_vcc_controller: mock for the vcc_controller device
    :param mock_vcc_band: mock for the vcc_band device
    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/vcc/conftest.py:92:1: DAR101 Missing parameter(s) in Docstring: - mock_vcc_controller
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_vcc_controller: mock for the vcc_controller device
    :param mock_vcc_band: mock for the vcc_band device
    :return: a dictionary of device proxy mocks to pre-register.
    """
^
tests/unit/vcc/conftest.py:92:1: DAR201 Missing "Returns" in Docstring: - return
    """
    Return a dictionary of device proxy mocks to pre-register.

    :param mock_vcc_controller: mock for the vcc_controller device
    :param mock_vcc_band: mock for the vcc_band device
    :return: a dictionary of device proxy mocks to pre-register.
    """
^
1457  DAR101 Missing parameter(s) in Docstring: - mapping
627   DAR201 Missing "Returns" in Docstring: - return
11    DAR301 Missing "Yields" in Docstring: - yield
21    DAR401 Missing exception(s) in Raises section: -r NotImplementedError
1     F401 'json' imported but unused
420   N802 function name 'is_Valid_DISH_Id' should be lowercase
3     N803 argument name 'outlet_ID' should be lowercase
41    N806 variable 'vccID' in function should be lowercase
4     N815 variable 'outputEnable' in class scope should not be mixedCase
